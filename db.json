{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/uploads/1.png","path":"uploads/1.png","modified":0,"renderable":0},{"_id":"source/uploads/2.jpg","path":"uploads/2.jpg","modified":0,"renderable":0},{"_id":"source/uploads/4.spring.jpg","path":"uploads/4.spring.jpg","modified":0,"renderable":0},{"_id":"source/uploads/6.mongo.png","path":"uploads/6.mongo.png","modified":0,"renderable":0},{"_id":"source/uploads/7.jmm.png","path":"uploads/7.jmm.png","modified":0,"renderable":0},{"_id":"source/uploads/3.spring.jpg","path":"uploads/3.spring.jpg","modified":0,"renderable":0},{"_id":"source/uploads/2.spring.jpg","path":"uploads/2.spring.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/uploads/interview/25.jpg","path":"uploads/interview/25.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/28.jpg","path":"uploads/interview/28.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/1.jpg","path":"uploads/interview/1.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/10.jpg","path":"uploads/interview/10.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/11.jpg","path":"uploads/interview/11.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/12.jpg","path":"uploads/interview/12.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/13.jpg","path":"uploads/interview/13.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/15.jpg","path":"uploads/interview/15.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/14.jpg","path":"uploads/interview/14.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/16.jpg","path":"uploads/interview/16.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/17.jpg","path":"uploads/interview/17.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/18.jpg","path":"uploads/interview/18.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/21.jpg","path":"uploads/interview/21.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/26.jpg","path":"uploads/interview/26.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/27.jpg","path":"uploads/interview/27.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/4.jpg","path":"uploads/interview/4.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/5.jpg","path":"uploads/interview/5.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/6.jpg","path":"uploads/interview/6.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/7.jpg","path":"uploads/interview/7.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/8.jpg","path":"uploads/interview/8.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/README.md","path":"vendors/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/LICENSE","path":"vendors/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/bower.json","path":"vendors/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","path":"vendors/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/bower.json","path":"vendors/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","path":"vendors/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","path":"vendors/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","path":"vendors/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","path":"vendors/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","path":"vendors/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"source/uploads/interview/19.jpg","path":"uploads/interview/19.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/2.jpg","path":"uploads/interview/2.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/20.jpg","path":"uploads/interview/20.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/22.jpg","path":"uploads/interview/22.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/23.jpg","path":"uploads/interview/23.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/24.jpg","path":"uploads/interview/24.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/3.jpg","path":"uploads/interview/3.jpg","modified":0,"renderable":0},{"_id":"source/uploads/interview/9.jpg","path":"uploads/interview/9.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","path":"vendors/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","path":"vendors/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","path":"vendors/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","path":"vendors/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","path":"vendors/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","path":"vendors/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","path":"vendors/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","path":"vendors/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","path":"vendors/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","path":"vendors/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","path":"vendors/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"source/uploads/logo.jpg","path":"uploads/logo.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","path":"vendors/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"source/uploads/5.spring.jpg","path":"uploads/5.spring.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/baidu_verify_0NO91jEMFX.html","hash":"55e2c0b0ab8b371436bc20d3766674b7391c7c41","modified":1467115582000},{"_id":"source/googlee52b9dfb082441da.html","hash":"70148dbff86521a105008392ba194a70ec191d5b","modified":1467115572000},{"_id":"source/.DS_Store","hash":"d7eace5416521f6be6f7cff059327ca9a08a5ba3","modified":1472027915000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1464173442000},{"_id":"themes/next/.bowerrc","hash":"80e096fdc1cf912ee85dd9f7e6e77fd40cf60f10","modified":1464173442000},{"_id":"themes/next/.gitignore","hash":"efec790f5b7a0256763e1cc08f12c4f0aff509f6","modified":1464173442000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1464173442000},{"_id":"themes/next/README.en.md","hash":"565ba52b3825b85a9f05b41183caca7f18b741d4","modified":1464173442000},{"_id":"themes/next/.javascript_ignore","hash":"d619ee13031908cd72666e4ff652d2ea3483b1c3","modified":1464173442000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1464173442000},{"_id":"themes/next/bower.json","hash":"f89c6700a11d81e067cc97273ca6bf96cb88c8f9","modified":1464173442000},{"_id":"themes/next/gulpfile.coffee","hash":"26e5b1b945704c8bc78b928feede895c4c111c95","modified":1464173442000},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1464173442000},{"_id":"themes/next/package.json","hash":"63e9c0f1dd9e5d7f51b4ae383981ef939a2ed45d","modified":1464173442000},{"_id":"themes/next/_config.yml","hash":"30c9d99dbf0ac2f011f796f9ec65cadb35142e22","modified":1464234188000},{"_id":"source/_posts/AtomicInteger的底层实现.md","hash":"a5bf9956360c4408bcd9d1babb4436dc2b743c49","modified":1469797503000},{"_id":"source/_posts/.DS_Store","hash":"52e8cdb2eff90d77c25b7f8ea7cb11d4fe761459","modified":1472027915000},{"_id":"source/_posts/Github学习.md","hash":"3df35a0f2fe35bd102200322ccf3fb06ea8f6056","modified":1469793298000},{"_id":"source/_posts/CAS单点登录配置.md","hash":"df0d3759b7b092d4c0389568b0ff18d33a5079b3","modified":1465722447000},{"_id":"source/_posts/Hexo的使用.md","hash":"7fa694287b7f2871fa79771a7a06e49c097890a0","modified":1467118445000},{"_id":"source/_posts/Java动态代理和CGLib代理.md","hash":"73e850e9255ef815e7d54e8badcf32a6bd20023a","modified":1472093687000},{"_id":"source/_posts/Java-ArrayList与LinkedList对比.md","hash":"3a08758f4987d0e0b1b9fc1f64f5a5b107dfc4c5","modified":1464436609000},{"_id":"source/_posts/JVM性能调优.md","hash":"e970105e08082bb923c557e166804e7ea1a07963","modified":1468842722000},{"_id":"source/_posts/Java虚拟机的理解.md","hash":"e5249ae1debc7bb52299dcada8af69decaffc842","modified":1468329046000},{"_id":"source/_posts/Maven.md","hash":"7de7de079b164793b2ddf362908a9cafaa03111b","modified":1464241254000},{"_id":"source/_posts/MyBatis入门.md","hash":"3ae49efc9a222a2fd400e701b6270c7b3d10ff00","modified":1467952046000},{"_id":"source/_posts/Java面试常见问题总结.md","hash":"f5a5d9f24283287bc4f23fb5b0fd38113f9f7528","modified":1471224686000},{"_id":"source/_posts/Spring-AOP相关内容.md","hash":"28e6aa4acbf38ed08d0127dfc7ba1432bd4a28a4","modified":1464682443000},{"_id":"source/_posts/Spring-IOC相关内容.md","hash":"4dede2aa505ebd2e800a515f1eaefdc136cf1b37","modified":1464749060000},{"_id":"source/_posts/Zookeeper-Leader选举算法.md","hash":"c0808dbe03d82e2c14de166ddffc8563dc0c2180","modified":1467522988000},{"_id":"source/_posts/String池化及intern方法的作用.md","hash":"b38ef6549660bcce35996cde16d04378de2ef1f1","modified":1464436123000},{"_id":"source/_posts/mongoDB搭建与配置.md","hash":"232498382bc8bdcee1b04302e4bdbe59d38b1148","modified":1465718134000},{"_id":"source/_posts/单利模式你不一定懂.md","hash":"4fa9aca9f747b571118dabcc1afd840992541b32","modified":1467090277000},{"_id":"source/_posts/在线课堂搭建注意事项.md","hash":"c8aee219cfd58695fc77f54ce057987d4263b35e","modified":1465779545000},{"_id":"source/_posts/数据库索引.md","hash":"04fea073eff2b2d185a87f35873901cc4b884ed6","modified":1467024218000},{"_id":"source/_posts/笔试常见问题.md","hash":"31e2212e25eff71acfa0bd312bd8b117e19afe60","modified":1471224690000},{"_id":"source/_posts/转-Spring如何加载XSD文件-org-xml-sax-SAXParseException-Failed-to-read-schema-document错误的解决方法.md","hash":"298984fe43faebda9c274b0afaacb0ca3780ef43","modified":1465174338000},{"_id":"source/about/index.md","hash":"b678a5854f789d907a1f0482111bc9848b64071b","modified":1464179832000},{"_id":"source/categories/index.md","hash":"d9a53b181b9c86c7297cfeb6aade5af53de709f4","modified":1464178516000},{"_id":"source/tags/index.md","hash":"5786566f04d8b7bec5f2e850bb12fa57dc95afbd","modified":1464178602000},{"_id":"source/uploads/.DS_Store","hash":"66758fe8928895cf66af0593e9e58ea2104a6779","modified":1468320084000},{"_id":"source/uploads/1.png","hash":"6a8be3730ea8627f1e496340ab3f375a085dd143","modified":1464517365000},{"_id":"source/uploads/2.jpg","hash":"bec50388b94a6e76e731b0d8fd55700cdf5bbac2","modified":1464668389000},{"_id":"source/uploads/4.spring.jpg","hash":"5608f746b8a0f844a02c586c873001f1c4848f20","modified":1464680465000},{"_id":"source/uploads/6.mongo.png","hash":"3b92c499975aae7bb994ae29f38aee2d54085737","modified":1465714833000},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1464173442000},{"_id":"source/uploads/7.jmm.png","hash":"65825c6c2a0111fd288c1ea9e4a4e74de7af4127","modified":1468321655000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1464173442000},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1464173427000},{"_id":"themes/next/.git/index","hash":"4079343358c80f9cd1e3167784c074f9f0af989d","modified":1464173442000},{"_id":"themes/next/.git/packed-refs","hash":"320179d93925bb90c1b023203a4fdb929dd552ae","modified":1464173442000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1464173442000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1464173442000},{"_id":"themes/next/languages/default.yml","hash":"9db835c0543ade5a89bc80ec5a898203227cf3d8","modified":1464173442000},{"_id":"themes/next/languages/de.yml","hash":"786afba25cfc98845a20d9901823ebeebcd1cbbf","modified":1464173442000},{"_id":"themes/next/languages/fr-FR.yml","hash":"1a084623c39de74301f3e92f9388a3a815a542ca","modified":1464173442000},{"_id":"themes/next/languages/en.yml","hash":"f03799cbdb5a33064ead080bcac4baca1f6bc5f9","modified":1464173442000},{"_id":"themes/next/languages/id.yml","hash":"147c01e41b931085ad14250fa900c2249dcbbdd7","modified":1464173442000},{"_id":"themes/next/languages/zh-hk.yml","hash":"519ab3d817ec3bc5bfc91159c494b6b3c170bea7","modified":1464173442000},{"_id":"themes/next/languages/ru.yml","hash":"cc7b964a46587aea0e57b0a5269d8fd25570858e","modified":1464173442000},{"_id":"themes/next/languages/pt.yml","hash":"ca239b39bf65c9462e59d51b12f0fe566d453197","modified":1464173442000},{"_id":"themes/next/languages/ja.yml","hash":"a2c7b6301b5474aab798946fb700289df237c3cf","modified":1464173442000},{"_id":"themes/next/languages/zh-tw.yml","hash":"6b1f345aaefc13e6723dc8a6741b59ac05c20dfd","modified":1464173442000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"bea452bc49aed171a210d09bd6cddc4e846ea8ab","modified":1464174652000},{"_id":"themes/next/scripts/merge-configs.js","hash":"0c56be2e85c694247cfa327ea6d627b99ca265e8","modified":1464173442000},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1464173442000},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1464173442000},{"_id":"themes/next/layout/page.swig","hash":"8019d02232a6dd1a665b6a4d2daef8e5dd2f0049","modified":1464173442000},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1464173442000},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1464173442000},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1464173442000},{"_id":"themes/next/layout/_layout.swig","hash":"74157f6cfd679ea11febec632542793f37c5e5d4","modified":1464173442000},{"_id":"themes/next/test/.jshintrc","hash":"096ed6df627373edd820f24d46b8baf528dee61d","modified":1464173442000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1464173442000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1464173442000},{"_id":"source/uploads/3.spring.jpg","hash":"04ca02fcca17ebce64efd6d802d5d5910197bcd7","modified":1464680446000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464173442000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1464173427000},{"_id":"source/uploads/2.spring.jpg","hash":"598353c48eefe55dd5e69a81cd313c4d5545f77f","modified":1464680405000},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1464173427000},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1464173427000},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1464173427000},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1464173427000},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1464173427000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1464173427000},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1464173427000},{"_id":"themes/next/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1464173427000},{"_id":"themes/next/.git/logs/HEAD","hash":"83ff3eb8bc88e4170d7fb5adbf6b1bf9790d8dc4","modified":1464173442000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1464173442000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"3acce36db0feb11a982c6c799aa6b6b47df2827c","modified":1464173442000},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1464173427000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1464173442000},{"_id":"themes/next/layout/_macro/post.swig","hash":"1ca03011bed92614832b1343b65be92183957dc5","modified":1464173442000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1464173442000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"b883289054ee54a374caad5d4883591beb94bd8b","modified":1464173442000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"43c3433155ccd9abcbe7dce2e6bfa1f3a66af18b","modified":1464173442000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"85327c2174d09c6d69c9033592e6c8f7eb7ac3ba","modified":1464173442000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"0b91cadecead8e0b5211cc42b085998d94af503a","modified":1464173442000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1464173442000},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1464173442000},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"82d060fe055d6e423bbc9199f82dfe5c68e74779","modified":1464173442000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"82a9bc2ba60ce68419128ff60624bd74b15dfb78","modified":1464173442000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"0ce71d8322ea7dea82d9371fa2fe13949aa870e3","modified":1464173442000},{"_id":"themes/next/layout/_partials/head.swig","hash":"f83b1c55bedd2c1a3eb734c72c6997795a4e5f99","modified":1464173442000},{"_id":"themes/next/layout/_partials/header.swig","hash":"963a765dc00e6ac43cfc53ffaf5725eb854cf95e","modified":1464173442000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1464173442000},{"_id":"themes/next/layout/_partials/search.swig","hash":"011b9d6c9f0a2f4654908ea20b9391f9b7981271","modified":1464173442000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1464173442000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1464173442000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1464173442000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1464173442000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1464173442000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1464173442000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1464173442000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1464173442000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1464173442000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1464173442000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1464173442000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1464173442000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1464173442000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1464173442000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1464173442000},{"_id":"source/uploads/interview/25.jpg","hash":"dfec15a4c29f48e384a0a460f1fc081586835220","modified":1465298318000},{"_id":"source/uploads/interview/28.jpg","hash":"029bdf0a672f5002422a89ef633d0cf29ba672b6","modified":1465298318000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464173442000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464173442000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464173442000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464173442000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464173442000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464173442000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1464173442000},{"_id":"source/uploads/interview/1.jpg","hash":"7728a55a025cfcf260613b5accd2ac2249718912","modified":1471009269000},{"_id":"source/uploads/interview/10.jpg","hash":"a6a2b52637360deb0cb2acf3ea427990f0442932","modified":1465298318000},{"_id":"source/uploads/interview/11.jpg","hash":"771456cb94362e6d73b86422a0e99770d206b397","modified":1465298318000},{"_id":"source/uploads/interview/12.jpg","hash":"f9de9108ad5827c08708062006720e7a63741eeb","modified":1465298318000},{"_id":"source/uploads/interview/13.jpg","hash":"65d18f63a83c251b3ae311164f44112d6b239116","modified":1465298318000},{"_id":"source/uploads/interview/15.jpg","hash":"61bea10285a04ecedec99c6896e90c10e65d9cc7","modified":1465298318000},{"_id":"source/uploads/interview/14.jpg","hash":"dbbd0f49589563f190e27e7046e57b7b23d151bd","modified":1465298318000},{"_id":"source/uploads/interview/16.jpg","hash":"ee5251ec4025956a4e7081a5842a20e82d183350","modified":1465298318000},{"_id":"source/uploads/interview/17.jpg","hash":"9ca9469d3bfed42437f6ace8520c4c700c1de963","modified":1465298317000},{"_id":"source/uploads/interview/18.jpg","hash":"d4af12e8b4ac336accdb7511736effdbad2ec1f8","modified":1465298318000},{"_id":"source/uploads/interview/21.jpg","hash":"c5801d46285dd4bc0b451c7b752614d34553a970","modified":1465298318000},{"_id":"source/uploads/interview/26.jpg","hash":"ad53de68d02f841817adcf7ade961dc9c5b054c2","modified":1465298318000},{"_id":"source/uploads/interview/27.jpg","hash":"4785b3aa91c785e17b054d21098c2807e2c7f205","modified":1465298318000},{"_id":"themes/next/.git/refs/heads/master","hash":"4ef9f91c1cc6d025b6873e0ccf647436959bf219","modified":1464173442000},{"_id":"source/uploads/interview/4.jpg","hash":"f52df9d39532da090bdcf98473e35c168f710626","modified":1465298318000},{"_id":"source/uploads/interview/5.jpg","hash":"225d764cb3a34e7b64c5f4b9f903fbb7ee0d6c4a","modified":1465298318000},{"_id":"source/uploads/interview/6.jpg","hash":"3dc511f6eca3b7dff27bfea4298757433d809245","modified":1465298318000},{"_id":"source/uploads/interview/7.jpg","hash":"c991fb1873aa1bb77355b563941e7219ca20f080","modified":1465298318000},{"_id":"source/uploads/interview/8.jpg","hash":"6d35ef9cdc7096b70c01aede3118090d51ad7a81","modified":1465298318000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1464173442000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1464173442000},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"0a89c04055bade7baa5962f1d5aefe438d83a244","modified":1464173442000},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"907b931d775d32405d02a25b3b0a3ac03bf804d0","modified":1464173442000},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"069bb17fb1db3bc7c85c88efa3ed94ab6becbe2c","modified":1464173442000},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"1561bd0c107d725252c6d746e9ac177fc18f93bf","modified":1464173442000},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"5bafc33f57508d1d04a9930165240f6e9efa8d6d","modified":1464173442000},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1464173442000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1464173442000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"ff5523d5dacaa77a55a24e50e6e6530c3b98bfad","modified":1464173442000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1464173442000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1464173442000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c07f7b2f264e5215b8ed42d67e8cef2477558364","modified":1464173442000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"7ca5cb4daa58b3504e17f3e02975e794bc634658","modified":1464173442000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1464173442000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1464173442000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"3ead77befa064d6327dc7afd0a5af7be59a5f196","modified":1464173442000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1464173442000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1464173442000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"17624186f7a1f28daddea258d044f8e03b2f4bea","modified":1464173442000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1464173442000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1464173442000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1464173442000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1464173442000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1464173442000},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1464173442000},{"_id":"themes/next/source/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1464173442000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1464173442000},{"_id":"themes/next/source/vendors/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1464173442000},{"_id":"themes/next/source/js/src/utils.js","hash":"e5cb720894c4bc28ca8f10b33df127fb394018d9","modified":1464173442000},{"_id":"themes/next/source/vendors/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1464173442000},{"_id":"themes/next/source/vendors/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1464173442000},{"_id":"themes/next/source/vendors/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1464173442000},{"_id":"themes/next/source/vendors/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1464173442000},{"_id":"themes/next/source/vendors/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1464173442000},{"_id":"themes/next/source/vendors/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1464173442000},{"_id":"themes/next/source/vendors/font-awesome/.bower.json","hash":"7da985a99674e54f514d4fd9fcd3bcea6e7e41d5","modified":1464173442000},{"_id":"themes/next/source/vendors/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1464173442000},{"_id":"themes/next/source/vendors/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1464173442000},{"_id":"themes/next/source/vendors/font-awesome/HELP-US-OUT.txt","hash":"69a4c537d167b68a0ccf1c6febd138aeffca60d6","modified":1464173442000},{"_id":"themes/next/source/vendors/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1464173442000},{"_id":"themes/next/source/vendors/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1464173442000},{"_id":"themes/next/source/vendors/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1464173442000},{"_id":"themes/next/source/vendors/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1464173442000},{"_id":"themes/next/source/vendors/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1464173442000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1464173442000},{"_id":"themes/next/source/vendors/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1464173442000},{"_id":"themes/next/source/vendors/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1464173442000},{"_id":"themes/next/source/vendors/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1464173442000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1464173442000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1464173442000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1464173442000},{"_id":"source/uploads/interview/19.jpg","hash":"d14e904210f8b57cf0353cbe138a6a777033e6f5","modified":1465298317000},{"_id":"source/uploads/interview/2.jpg","hash":"c5e787fb8f10e0f25ad290dfe7c5f022476f717e","modified":1465298318000},{"_id":"source/uploads/interview/20.jpg","hash":"b5d956cd9e1e48b84f7aefefc0363c280b15f662","modified":1465298318000},{"_id":"source/uploads/interview/22.jpg","hash":"74468ac13f20ad07904a201f997d321d1b21097e","modified":1465298318000},{"_id":"source/uploads/interview/23.jpg","hash":"4a7cc85adf8a658e1b04dbde4c90105fc948f0c2","modified":1465298318000},{"_id":"source/uploads/interview/24.jpg","hash":"a64d5c71a733b0bc7939b3b1da7c745bdac2e721","modified":1465298318000},{"_id":"source/uploads/interview/3.jpg","hash":"26cdcf4dacd0967de2b2f793d751b841a43d6d55","modified":1465298318000},{"_id":"source/uploads/interview/9.jpg","hash":"29c746b0295458d213b0c3224f280a6d69752fe9","modified":1465298318000},{"_id":"themes/next/source/vendors/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1464173442000},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"83ff3eb8bc88e4170d7fb5adbf6b1bf9790d8dc4","modified":1464173442000},{"_id":"themes/next/.git/objects/pack/pack-bf1411dc3b879233501bd7eb5c029d28b9cf51da.idx","hash":"1cb2ab787e7d0a37fa0c610953fd352de339e7c0","modified":1464173442000},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1464173442000},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"44e761721e8ad787ef571a3cc57bbc12d318a2a3","modified":1464173442000},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1464173442000},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1464173442000},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"334176d838ee528e58468d8bc74ff3a6d3f25b2b","modified":1464173442000},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"30a23fa7e816496fdec0e932aa42e2d13098a9c2","modified":1464173442000},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1464173442000},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"3491d3cebabc8a28857200db28a1be65aad6adc2","modified":1464173442000},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"8c7af79407d223486fba72b8150fe045a553bf70","modified":1464173442000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5304f99581da3a31de3ecec959b7adf9002fde83","modified":1464173442000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"54c90cf7bdbf5c596179d8dae6e671bad1292662","modified":1464173442000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1464173442000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1464173442000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"4303776991ef28f5742ca51c7dffe6f12f0acf34","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c2c6c4f6434b4f94aac2af5861cd769427f0ee10","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6ed60cc621bac096c0ed7534fa25b1a52dc571d4","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"be22ad34f546a07f6d56b424338cdd898683eea4","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"8d7cecde4933900c7df2db9d0a98f5f82f88dc93","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"d09280e5b79f3b573edb30f30c7a5f03ac640986","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"938d39eedc6e3d33918c1145a5bf1e79991d3fcf","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"1b10ba2d3ad0c063c418dc94a0b7e0db4b342c53","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d4b7bd610ca03dbb2f5b66631c0e84a79fb4660b","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1464173442000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b49efc66bd055a2d0be7deabfcb02ee72a9a28c8","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"10994990d6e0b4d965a728a22cf7f6ee29cae9f6","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1464173442000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"7506e7490c69a200831393c38d25e91c156bd471","modified":1464173442000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1464173442000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1464173442000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1464173442000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1464173442000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1464173442000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1464173442000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1464173442000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1464173442000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1464173442000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1464173442000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1464173442000},{"_id":"themes/next/source/vendors/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1464173442000},{"_id":"themes/next/source/vendors/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1464173442000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.min.css","hash":"05ea25bc9b3ac48993e1fee322d3bc94b49a6e22","modified":1464173442000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css","hash":"3b87c2560832748cd06f9bfd2fd6ea8edbdae8c7","modified":1464173442000},{"_id":"themes/next/source/vendors/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1464173442000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff2","hash":"574ea2698c03ae9477db2ea3baf460ee32f1a7ea","modified":1464173442000},{"_id":"themes/next/source/vendors/font-awesome/fonts/FontAwesome.otf","hash":"0112e96f327d413938d37c1693806f468ffdbace","modified":1464173442000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.woff","hash":"507970402e328b2baeb05bde73bf9ded4e2c3a2d","modified":1464173442000},{"_id":"themes/next/source/vendors/velocity/velocity.js","hash":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1464173442000},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"83ff3eb8bc88e4170d7fb5adbf6b1bf9790d8dc4","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1464173442000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"8b8e8cbce98a9296c8fd77f512ae85d945f65d40","modified":1464173442000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.eot","hash":"b3c2f08e73320135b69c23a3908b87a12053a2f6","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"c890ce7fe933abad7baf39764a01894924854e92","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4da051c7f3924fa2db1e73c55b2baf1c2c150255","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"90f8f9706cd7fe829cf06e9959a65fd3f8b994fa","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d543d1377c1f61b70e3adb6da0eb12797552e5f2","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cbca4842a54950e2934b3b8f3cd940f122111aef","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"15063d79b5befc21820baf05d6f20cc1c1787477","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"4eb18b12fa0ea6c35925d9a64f64e2a7dae8c7fd","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"c44f6a553ec7ea5508f2054a13be33a62a15d3a9","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"2d3abbc85b979a648e0e579e45f16a6eba49d1e7","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"3c46efd6601e268093ce6d7b1471d18501878f0d","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"618f73450cf541f88a4fddc3d22898aee49d105d","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8e66c2635d48e11de616bb29c4b1323698eebc0a","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"b03f891883446f3a5548b7cc90d29c77e62f1053","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"795d94561888d31cb7a6ff4a125596809ea69b7d","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1464173442000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"3afc459442c132c480d1d832f1a872f1070bb048","modified":1464173442000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1464173442000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1464173442000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1464173442000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1464173442000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1464173442000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1464173442000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.ttf","hash":"27cf1f2ec59aece6938c7bb2feb0e287ea778ff9","modified":1464173442000},{"_id":"source/uploads/logo.jpg","hash":"97efdb1e20fca1294e08085123ed1798274b5a7b","modified":1464175016000},{"_id":"themes/next/source/vendors/font-awesome/fonts/fontawesome-webfont.svg","hash":"2b3c8ba7008cc014d8fb37abc6f9f49aeda83824","modified":1464173442000},{"_id":"source/uploads/5.spring.jpg","hash":"f5486d67264711ffa60a1b49295c8343a8fe51c9","modified":1464681119000},{"_id":"themes/next/.git/objects/pack/pack-bf1411dc3b879233501bd7eb5c029d28b9cf51da.pack","hash":"d0bad1ce21e844c462f3d8f8b7ea37a58efdb5a0","modified":1464173442000}],"Category":[{"name":"Java","_id":"cis9pixsy0005bxbo9waik6pl"},{"name":"编程工具","_id":"cis9pixt4000abxbo2aihwnyo"},{"name":"服务器","_id":"cis9pixtf000gbxbobpwhjond"},{"name":"Hexo","_id":"cis9pixtl000nbxbo12g6zjxh"},{"name":"maven","_id":"cis9pixtq000ubxboge1snqdg"},{"name":"数据库","_id":"cis9pixu8001dbxbofaa8ergu"}],"Data":[],"Page":[{"layout":"false","_content":"0NO91jEMFX\n","source":"baidu_verify_0NO91jEMFX.html","raw":"layout: false\n---\n0NO91jEMFX\n","date":"2016-06-28T12:06:22.000Z","updated":"2016-06-28T12:06:22.000Z","path":"baidu_verify_0NO91jEMFX.html","title":"","comments":1,"_id":"cis9pixri0000bxboogtg5b9h","content":"0NO91jEMFX\n","excerpt":"","more":"0NO91jEMFX\n"},{"layout":"false","_content":"google-site-verification: googlee52b9dfb082441da.html","source":"googlee52b9dfb082441da.html","raw":"layout: false\n---\ngoogle-site-verification: googlee52b9dfb082441da.html","date":"2016-06-28T12:06:12.000Z","updated":"2016-06-28T12:06:12.000Z","path":"googlee52b9dfb082441da.html","title":"","comments":1,"_id":"cis9pixrk0001bxbou07xz3tk","content":"google-site-verification: googlee52b9dfb082441da.html","excerpt":"","more":"google-site-verification: googlee52b9dfb082441da.html"},{"title":"about","date":"2016-05-25T12:36:25.000Z","type":"about","comments":0,"_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-05-25 20:36:25\ntype: \"about\"\ncomments: false\n---\n","updated":"2016-05-25T12:37:12.000Z","path":"about/index.html","layout":"page","_id":"cis9pixy8002kbxbomfid6y90","content":"","excerpt":"","more":""},{"title":"categories","date":"2016-05-25T12:14:52.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2016-05-25 20:14:52\ntype: \"categories\"\ncomments: false\n---\n","updated":"2016-05-25T12:15:16.000Z","path":"categories/index.html","layout":"page","_id":"cis9pixy9002lbxbohlkn7v54","content":"","excerpt":"","more":""},{"title":"tags","date":"2016-05-25T12:11:08.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2016-05-25 20:11:08\ntype: \"tags\"\ncomments: false\n---\n","updated":"2016-05-25T12:16:42.000Z","path":"tags/index.html","layout":"page","_id":"cis9pixye002mbxboywuubwau","content":"","excerpt":"","more":""}],"Post":[{"title":"AtomicInteger的底层实现","date":"2016-07-29T13:00:29.000Z","_content":"\n\n### 悲观锁与乐观锁\n\n   我们都知道，cpu是时分复用的，也就是把cpu的时间片，分配给不同的thread/process轮流执行，时间片与时间片之间，需要进行cpu切换，也就是会发生进程的切换。切换涉及到清空寄存器，缓存数据。然后重新加载新的thread所需数据。当一个线程被挂起时，加入到阻塞队列，在一定的时间或条件下，在通过notify()，notifyAll()唤醒回来。在某个资源不可用的时候，就将cpu让出，把当前等待线程切换为阻塞状态。等到资源(比如一个共享数据）可用了，那么就将线程唤醒，让他进入runnable状态等待cpu调度。这就是典型的悲观锁的实现。独占锁是一种悲观锁，synchronized就是一种独占锁，它假设最坏的情况，并且只有在确保其它线程不会造成干扰的情况下执行，会导致其它所有需要锁的线程挂起，等待持有锁的线程释放锁。\n\n   但是，由于在进程挂起和恢复执行过程中存在着很大的开销。当一个线程正在等待锁时，它不能做任何事，所以悲观锁有很大的缺点。举个例子，如果一个线程需要某个资源，但是这个资源的占用时间很短，当线程第一次抢占这个资源时，可能这个资源被占用，如果此时挂起这个线程，可能立刻就发现资源可用，然后又需要花费很长的时间重新抢占锁，时间代价就会非常的高。\n\n   所以就有了乐观锁的概念，他的核心思路就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。在上面的例子中，某个线程可以不让出cpu,而是一直while循环，如果失败就重试，直到成功为止。所以，当数据争用不严重时，乐观锁效果更好。比如CAS就是一种乐观锁思想的应用。\n\n### java中CAS的实现\n\n   CAS就是Compare and Swap的意思，比较并操作。很多的cpu直接支持CAS指令。CAS是项乐观锁技术，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。\n\n   JDK1.5中引入了底层的支持，在int、long和对象的引用等类型上都公开了CAS的操作，并且JVM把它们编译为底层硬件提供的最有效的方法，在运行CAS的平台上，运行时把它们编译为相应的机器指令。在java.util.concurrent.atomic包下面的所有的原子变量类型中，比如AtomicInteger，都使用了这些底层的JVM支持为数字类型的引用类型提供一种高效的CAS操作。\n\n   在CAS操作中，会出现ABA问题。就是如果V的值先由A变成B，再由B变成A，那么仍然认为是发生了变化，并需要重新执行算法中的步骤。有简单的解决方案：不是更新某个引用的值，而是更新两个值，包括一个引用和一个版本号，即使这个值由A变为B，然后为变为A，版本号也是不同的。AtomicStampedReference和AtomicMarkableReference支持在两个变量上执行原子的条件更新。AtomicStampedReference更新一个“对象-引用”二元组，通过在引用上加上“版本号”，从而避免ABA问题，AtomicMarkableReference将更新一个“对象引用-布尔值”的二元组。\n\n### AtomicInteger的实现\n\n   AtomicInteger 是一个支持原子操作的 Integer 类，就是保证对AtomicInteger类型变量的增加和减少操作是原子性的，不会出现多个线程下的数据不一致问题。如果不使用 AtomicInteger，要实现一个按顺序获取的 ID，就必须在每次获取时进行加锁操作，以避免出现并发时获取到同样的 ID 的现象。\n\n接下来通过源代码来看AtomicInteger具体是如何实现的原子操作。\n\n首先看incrementAndGet() 方法，下面是具体的代码。\n\n```Java\npublic final int incrementAndGet() {\n        for (;;) {\n            int current = get();\n            int next = current + 1;\n            if (compareAndSet(current, next))\n                return next;\n        }\n    }\n```\n\n   通过源码，可以知道，这个方法的做法为先获取到当前的 value 属性值，然后将 value 加 1，赋值给一个局部的 next 变量，然而，这两步都是非线程安全的，但是内部有一个死循环，不断去做compareAndSet操作，直到成功为止，也就是修改的根本在compareAndSet方法里面，compareAndSet()方法的代码如下：\n\n```Java\npublic final boolean compareAndSet(int expect, int update) {\n        return unsafe.compareAndSwapInt(this, valueOffset, expect, update);\n    }\n```\n\ncompareAndSet()方法调用的compareAndSwapInt()方法的声明如下，是一个native方法。\n```Java\n   publicfinal native boolean compareAndSwapInt(Object var1, long var2, int var4, intvar5);\n   ```\n\n   compareAndSet 传入的为执行方法时获取到的 value 属性值，next 为加 1 后的值， compareAndSet所做的为调用 Sun 的 UnSafe 的 compareAndSwapInt 方法来完成，此方法为 native 方法，compareAndSwapInt 基于的是CPU 的 CAS指令来实现的。所以基于 CAS 的操作可认为是无阻塞的，一个线程的失败或挂起不会引起其它线程也失败或挂起。并且由于 CAS 操作是 CPU 原语，所以性能比较好。\n\n   类似的，还有decrementAndGet()方法。它和incrementAndGet()的区别是将 value 减 1，赋值给next 变量。\n\n   AtomicInteger中还有getAndIncrement() 和getAndDecrement() 方法，他们的实现原理和上面的两个方法完全相同，区别是返回值不同，前两个方法返回的是改变之后的值，即next。而这两个方法返回的是改变之前的值，即current。还有很多的其他方法，就不列举了。\n","source":"_posts/AtomicInteger的底层实现.md","raw":"---\ntitle: AtomicInteger的底层实现\ndate: 2016-07-29 21:00:29\ntags:\n- 源码\ncategories:\n- Java\n\n---\n\n\n### 悲观锁与乐观锁\n\n   我们都知道，cpu是时分复用的，也就是把cpu的时间片，分配给不同的thread/process轮流执行，时间片与时间片之间，需要进行cpu切换，也就是会发生进程的切换。切换涉及到清空寄存器，缓存数据。然后重新加载新的thread所需数据。当一个线程被挂起时，加入到阻塞队列，在一定的时间或条件下，在通过notify()，notifyAll()唤醒回来。在某个资源不可用的时候，就将cpu让出，把当前等待线程切换为阻塞状态。等到资源(比如一个共享数据）可用了，那么就将线程唤醒，让他进入runnable状态等待cpu调度。这就是典型的悲观锁的实现。独占锁是一种悲观锁，synchronized就是一种独占锁，它假设最坏的情况，并且只有在确保其它线程不会造成干扰的情况下执行，会导致其它所有需要锁的线程挂起，等待持有锁的线程释放锁。\n\n   但是，由于在进程挂起和恢复执行过程中存在着很大的开销。当一个线程正在等待锁时，它不能做任何事，所以悲观锁有很大的缺点。举个例子，如果一个线程需要某个资源，但是这个资源的占用时间很短，当线程第一次抢占这个资源时，可能这个资源被占用，如果此时挂起这个线程，可能立刻就发现资源可用，然后又需要花费很长的时间重新抢占锁，时间代价就会非常的高。\n\n   所以就有了乐观锁的概念，他的核心思路就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。在上面的例子中，某个线程可以不让出cpu,而是一直while循环，如果失败就重试，直到成功为止。所以，当数据争用不严重时，乐观锁效果更好。比如CAS就是一种乐观锁思想的应用。\n\n### java中CAS的实现\n\n   CAS就是Compare and Swap的意思，比较并操作。很多的cpu直接支持CAS指令。CAS是项乐观锁技术，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。\n\n   JDK1.5中引入了底层的支持，在int、long和对象的引用等类型上都公开了CAS的操作，并且JVM把它们编译为底层硬件提供的最有效的方法，在运行CAS的平台上，运行时把它们编译为相应的机器指令。在java.util.concurrent.atomic包下面的所有的原子变量类型中，比如AtomicInteger，都使用了这些底层的JVM支持为数字类型的引用类型提供一种高效的CAS操作。\n\n   在CAS操作中，会出现ABA问题。就是如果V的值先由A变成B，再由B变成A，那么仍然认为是发生了变化，并需要重新执行算法中的步骤。有简单的解决方案：不是更新某个引用的值，而是更新两个值，包括一个引用和一个版本号，即使这个值由A变为B，然后为变为A，版本号也是不同的。AtomicStampedReference和AtomicMarkableReference支持在两个变量上执行原子的条件更新。AtomicStampedReference更新一个“对象-引用”二元组，通过在引用上加上“版本号”，从而避免ABA问题，AtomicMarkableReference将更新一个“对象引用-布尔值”的二元组。\n\n### AtomicInteger的实现\n\n   AtomicInteger 是一个支持原子操作的 Integer 类，就是保证对AtomicInteger类型变量的增加和减少操作是原子性的，不会出现多个线程下的数据不一致问题。如果不使用 AtomicInteger，要实现一个按顺序获取的 ID，就必须在每次获取时进行加锁操作，以避免出现并发时获取到同样的 ID 的现象。\n\n接下来通过源代码来看AtomicInteger具体是如何实现的原子操作。\n\n首先看incrementAndGet() 方法，下面是具体的代码。\n\n```Java\npublic final int incrementAndGet() {\n        for (;;) {\n            int current = get();\n            int next = current + 1;\n            if (compareAndSet(current, next))\n                return next;\n        }\n    }\n```\n\n   通过源码，可以知道，这个方法的做法为先获取到当前的 value 属性值，然后将 value 加 1，赋值给一个局部的 next 变量，然而，这两步都是非线程安全的，但是内部有一个死循环，不断去做compareAndSet操作，直到成功为止，也就是修改的根本在compareAndSet方法里面，compareAndSet()方法的代码如下：\n\n```Java\npublic final boolean compareAndSet(int expect, int update) {\n        return unsafe.compareAndSwapInt(this, valueOffset, expect, update);\n    }\n```\n\ncompareAndSet()方法调用的compareAndSwapInt()方法的声明如下，是一个native方法。\n```Java\n   publicfinal native boolean compareAndSwapInt(Object var1, long var2, int var4, intvar5);\n   ```\n\n   compareAndSet 传入的为执行方法时获取到的 value 属性值，next 为加 1 后的值， compareAndSet所做的为调用 Sun 的 UnSafe 的 compareAndSwapInt 方法来完成，此方法为 native 方法，compareAndSwapInt 基于的是CPU 的 CAS指令来实现的。所以基于 CAS 的操作可认为是无阻塞的，一个线程的失败或挂起不会引起其它线程也失败或挂起。并且由于 CAS 操作是 CPU 原语，所以性能比较好。\n\n   类似的，还有decrementAndGet()方法。它和incrementAndGet()的区别是将 value 减 1，赋值给next 变量。\n\n   AtomicInteger中还有getAndIncrement() 和getAndDecrement() 方法，他们的实现原理和上面的两个方法完全相同，区别是返回值不同，前两个方法返回的是改变之后的值，即next。而这两个方法返回的是改变之前的值，即current。还有很多的其他方法，就不列举了。\n","slug":"AtomicInteger的底层实现","published":1,"updated":"2016-07-29T13:05:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixsk0002bxboc9ajhbhv","content":"<h3 id=\"悲观锁与乐观锁\"><a href=\"#悲观锁与乐观锁\" class=\"headerlink\" title=\"悲观锁与乐观锁\"></a>悲观锁与乐观锁</h3><p>   我们都知道，cpu是时分复用的，也就是把cpu的时间片，分配给不同的thread/process轮流执行，时间片与时间片之间，需要进行cpu切换，也就是会发生进程的切换。切换涉及到清空寄存器，缓存数据。然后重新加载新的thread所需数据。当一个线程被挂起时，加入到阻塞队列，在一定的时间或条件下，在通过notify()，notifyAll()唤醒回来。在某个资源不可用的时候，就将cpu让出，把当前等待线程切换为阻塞状态。等到资源(比如一个共享数据）可用了，那么就将线程唤醒，让他进入runnable状态等待cpu调度。这就是典型的悲观锁的实现。独占锁是一种悲观锁，synchronized就是一种独占锁，它假设最坏的情况，并且只有在确保其它线程不会造成干扰的情况下执行，会导致其它所有需要锁的线程挂起，等待持有锁的线程释放锁。</p>\n<p>   但是，由于在进程挂起和恢复执行过程中存在着很大的开销。当一个线程正在等待锁时，它不能做任何事，所以悲观锁有很大的缺点。举个例子，如果一个线程需要某个资源，但是这个资源的占用时间很短，当线程第一次抢占这个资源时，可能这个资源被占用，如果此时挂起这个线程，可能立刻就发现资源可用，然后又需要花费很长的时间重新抢占锁，时间代价就会非常的高。</p>\n<p>   所以就有了乐观锁的概念，他的核心思路就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。在上面的例子中，某个线程可以不让出cpu,而是一直while循环，如果失败就重试，直到成功为止。所以，当数据争用不严重时，乐观锁效果更好。比如CAS就是一种乐观锁思想的应用。</p>\n<h3 id=\"java中CAS的实现\"><a href=\"#java中CAS的实现\" class=\"headerlink\" title=\"java中CAS的实现\"></a>java中CAS的实现</h3><p>   CAS就是Compare and Swap的意思，比较并操作。很多的cpu直接支持CAS指令。CAS是项乐观锁技术，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。</p>\n<p>   JDK1.5中引入了底层的支持，在int、long和对象的引用等类型上都公开了CAS的操作，并且JVM把它们编译为底层硬件提供的最有效的方法，在运行CAS的平台上，运行时把它们编译为相应的机器指令。在java.util.concurrent.atomic包下面的所有的原子变量类型中，比如AtomicInteger，都使用了这些底层的JVM支持为数字类型的引用类型提供一种高效的CAS操作。</p>\n<p>   在CAS操作中，会出现ABA问题。就是如果V的值先由A变成B，再由B变成A，那么仍然认为是发生了变化，并需要重新执行算法中的步骤。有简单的解决方案：不是更新某个引用的值，而是更新两个值，包括一个引用和一个版本号，即使这个值由A变为B，然后为变为A，版本号也是不同的。AtomicStampedReference和AtomicMarkableReference支持在两个变量上执行原子的条件更新。AtomicStampedReference更新一个“对象-引用”二元组，通过在引用上加上“版本号”，从而避免ABA问题，AtomicMarkableReference将更新一个“对象引用-布尔值”的二元组。</p>\n<h3 id=\"AtomicInteger的实现\"><a href=\"#AtomicInteger的实现\" class=\"headerlink\" title=\"AtomicInteger的实现\"></a>AtomicInteger的实现</h3><p>   AtomicInteger 是一个支持原子操作的 Integer 类，就是保证对AtomicInteger类型变量的增加和减少操作是原子性的，不会出现多个线程下的数据不一致问题。如果不使用 AtomicInteger，要实现一个按顺序获取的 ID，就必须在每次获取时进行加锁操作，以避免出现并发时获取到同样的 ID 的现象。</p>\n<p>接下来通过源代码来看AtomicInteger具体是如何实现的原子操作。</p>\n<p>首先看incrementAndGet() 方法，下面是具体的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">incrementAndGet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> current = get();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> next = current + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSet(current, next))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>   通过源码，可以知道，这个方法的做法为先获取到当前的 value 属性值，然后将 value 加 1，赋值给一个局部的 next 变量，然而，这两步都是非线程安全的，但是内部有一个死循环，不断去做compareAndSet操作，直到成功为止，也就是修改的根本在compareAndSet方法里面，compareAndSet()方法的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(<span class=\"keyword\">int</span> expect, <span class=\"keyword\">int</span> update)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"keyword\">this</span>, valueOffset, expect, update);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>compareAndSet()方法调用的compareAndSwapInt()方法的声明如下，是一个native方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">publicfinal <span class=\"keyword\">native</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSwapInt</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, <span class=\"keyword\">int</span> var4, intvar5)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>   compareAndSet 传入的为执行方法时获取到的 value 属性值，next 为加 1 后的值， compareAndSet所做的为调用 Sun 的 UnSafe 的 compareAndSwapInt 方法来完成，此方法为 native 方法，compareAndSwapInt 基于的是CPU 的 CAS指令来实现的。所以基于 CAS 的操作可认为是无阻塞的，一个线程的失败或挂起不会引起其它线程也失败或挂起。并且由于 CAS 操作是 CPU 原语，所以性能比较好。</p>\n<p>   类似的，还有decrementAndGet()方法。它和incrementAndGet()的区别是将 value 减 1，赋值给next 变量。</p>\n<p>   AtomicInteger中还有getAndIncrement() 和getAndDecrement() 方法，他们的实现原理和上面的两个方法完全相同，区别是返回值不同，前两个方法返回的是改变之后的值，即next。而这两个方法返回的是改变之前的值，即current。还有很多的其他方法，就不列举了。</p>\n","excerpt":"","more":"<h3 id=\"悲观锁与乐观锁\"><a href=\"#悲观锁与乐观锁\" class=\"headerlink\" title=\"悲观锁与乐观锁\"></a>悲观锁与乐观锁</h3><p>   我们都知道，cpu是时分复用的，也就是把cpu的时间片，分配给不同的thread/process轮流执行，时间片与时间片之间，需要进行cpu切换，也就是会发生进程的切换。切换涉及到清空寄存器，缓存数据。然后重新加载新的thread所需数据。当一个线程被挂起时，加入到阻塞队列，在一定的时间或条件下，在通过notify()，notifyAll()唤醒回来。在某个资源不可用的时候，就将cpu让出，把当前等待线程切换为阻塞状态。等到资源(比如一个共享数据）可用了，那么就将线程唤醒，让他进入runnable状态等待cpu调度。这就是典型的悲观锁的实现。独占锁是一种悲观锁，synchronized就是一种独占锁，它假设最坏的情况，并且只有在确保其它线程不会造成干扰的情况下执行，会导致其它所有需要锁的线程挂起，等待持有锁的线程释放锁。</p>\n<p>   但是，由于在进程挂起和恢复执行过程中存在着很大的开销。当一个线程正在等待锁时，它不能做任何事，所以悲观锁有很大的缺点。举个例子，如果一个线程需要某个资源，但是这个资源的占用时间很短，当线程第一次抢占这个资源时，可能这个资源被占用，如果此时挂起这个线程，可能立刻就发现资源可用，然后又需要花费很长的时间重新抢占锁，时间代价就会非常的高。</p>\n<p>   所以就有了乐观锁的概念，他的核心思路就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。在上面的例子中，某个线程可以不让出cpu,而是一直while循环，如果失败就重试，直到成功为止。所以，当数据争用不严重时，乐观锁效果更好。比如CAS就是一种乐观锁思想的应用。</p>\n<h3 id=\"java中CAS的实现\"><a href=\"#java中CAS的实现\" class=\"headerlink\" title=\"java中CAS的实现\"></a>java中CAS的实现</h3><p>   CAS就是Compare and Swap的意思，比较并操作。很多的cpu直接支持CAS指令。CAS是项乐观锁技术，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。CAS有3个操作数，内存值V，旧的预期值A，要修改的新值B。当且仅当预期值A和内存值V相同时，将内存值V修改为B，否则什么都不做。</p>\n<p>   JDK1.5中引入了底层的支持，在int、long和对象的引用等类型上都公开了CAS的操作，并且JVM把它们编译为底层硬件提供的最有效的方法，在运行CAS的平台上，运行时把它们编译为相应的机器指令。在java.util.concurrent.atomic包下面的所有的原子变量类型中，比如AtomicInteger，都使用了这些底层的JVM支持为数字类型的引用类型提供一种高效的CAS操作。</p>\n<p>   在CAS操作中，会出现ABA问题。就是如果V的值先由A变成B，再由B变成A，那么仍然认为是发生了变化，并需要重新执行算法中的步骤。有简单的解决方案：不是更新某个引用的值，而是更新两个值，包括一个引用和一个版本号，即使这个值由A变为B，然后为变为A，版本号也是不同的。AtomicStampedReference和AtomicMarkableReference支持在两个变量上执行原子的条件更新。AtomicStampedReference更新一个“对象-引用”二元组，通过在引用上加上“版本号”，从而避免ABA问题，AtomicMarkableReference将更新一个“对象引用-布尔值”的二元组。</p>\n<h3 id=\"AtomicInteger的实现\"><a href=\"#AtomicInteger的实现\" class=\"headerlink\" title=\"AtomicInteger的实现\"></a>AtomicInteger的实现</h3><p>   AtomicInteger 是一个支持原子操作的 Integer 类，就是保证对AtomicInteger类型变量的增加和减少操作是原子性的，不会出现多个线程下的数据不一致问题。如果不使用 AtomicInteger，要实现一个按顺序获取的 ID，就必须在每次获取时进行加锁操作，以避免出现并发时获取到同样的 ID 的现象。</p>\n<p>接下来通过源代码来看AtomicInteger具体是如何实现的原子操作。</p>\n<p>首先看incrementAndGet() 方法，下面是具体的代码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">incrementAndGet</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> current = get();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> next = current + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndSet(current, next))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>   通过源码，可以知道，这个方法的做法为先获取到当前的 value 属性值，然后将 value 加 1，赋值给一个局部的 next 变量，然而，这两步都是非线程安全的，但是内部有一个死循环，不断去做compareAndSet操作，直到成功为止，也就是修改的根本在compareAndSet方法里面，compareAndSet()方法的代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSet</span><span class=\"params\">(<span class=\"keyword\">int</span> expect, <span class=\"keyword\">int</span> update)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unsafe.compareAndSwapInt(<span class=\"keyword\">this</span>, valueOffset, expect, update);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>compareAndSet()方法调用的compareAndSwapInt()方法的声明如下，是一个native方法。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">publicfinal <span class=\"keyword\">native</span> <span class=\"keyword\">boolean</span> <span class=\"title\">compareAndSwapInt</span><span class=\"params\">(Object var1, <span class=\"keyword\">long</span> var2, <span class=\"keyword\">int</span> var4, intvar5)</span></span>;</span><br></pre></td></tr></table></figure></p>\n<p>   compareAndSet 传入的为执行方法时获取到的 value 属性值，next 为加 1 后的值， compareAndSet所做的为调用 Sun 的 UnSafe 的 compareAndSwapInt 方法来完成，此方法为 native 方法，compareAndSwapInt 基于的是CPU 的 CAS指令来实现的。所以基于 CAS 的操作可认为是无阻塞的，一个线程的失败或挂起不会引起其它线程也失败或挂起。并且由于 CAS 操作是 CPU 原语，所以性能比较好。</p>\n<p>   类似的，还有decrementAndGet()方法。它和incrementAndGet()的区别是将 value 减 1，赋值给next 变量。</p>\n<p>   AtomicInteger中还有getAndIncrement() 和getAndDecrement() 方法，他们的实现原理和上面的两个方法完全相同，区别是返回值不同，前两个方法返回的是改变之后的值，即next。而这两个方法返回的是改变之前的值，即current。还有很多的其他方法，就不列举了。</p>\n"},{"title":"Github学习","date":"2016-07-21T07:27:32.000Z","_content":"1. 当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。 事实上，如果你的服务器的磁盘坏掉了，你通常可以使用任何一个克隆下来的用户端来重建服务器上的仓库。\n\n2. 忽略文件\n\t\t\t一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。 来看一个实际的例子：\n```bash\n\t$ cat .gitignore\n\t*.[oa]\n\t*~```\n\n\t第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。 第二行告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。 此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。 要养成一开始就设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。\n\n3.  从远程仓库中抓取与拉取\n\n\t就如刚才所见，从远程仓库中获得数据，可以执行：\n    ```bash\n\t$ git fetch [remote-name] 和 git merge [remote-name]/\t[local-name]\n  ```\n\t这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。\n\n\t如果你使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。 所以，git fetch origin 会抓取克隆（或上一次抓取）后新推送的所有工作。 必须注意 git fetch 命令会将数据拉取到你的本地仓库 - 它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。\n\n4. 下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 origin/serverfix，指向服务器的 serverfix 分支的引用：\n```bash\n$ git fetch origin\nremote: Counting objects: 7, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 3 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/schacon/simplegit\n *[new branch]      serverfix    -> origin/serverfix\n```\n\t要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。 换一句话说，这种情况下，不会有一个新的 serverfix 分支 - 只有一个不可以修改的 origin/serverfix 指针。\n\n\t可以运行 git merge origin/serverfix 将这些工作合并到当前所在的分支。 如果想要在自己的 serverfix 分支上工作，可以将其建立在远程跟踪分支之上：\n```bash\n$ git checkout -b serverfix origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n```\n\t这会给你一个用于工作的本地分支，并且起点位于 origin/serverfix。\n5. 跟踪分支\n从一个远程跟踪分支检出一个本地分支会自动创建一个叫做 “跟踪分支”（有时候也叫做 “上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入 git pull，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。\n\n\t当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支。 然而，如果你愿意的话可以设置其他的跟踪分支 - 其他远程仓库上的跟踪分支，或者不跟踪 master 分支。 最简单的就是之前看到的例子，运行 git checkout -b [branch] [remotename]/[branch]。 这是一个十分常用的操作所以 Git 提供了 --track 快捷方式：\n```bash\n$ git checkout --track origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n```\n\t如果想要将本地分支与远程分支设置为不同名字，你可以轻松地增加一个不同名字的本地分支的上一个命令：\n```bash\n$ git checkout -b sf origin/serverfix\nBranch sf set up to track remote branch serverfix from origin.\nSwitched to a new branch 'sf'```\n\t现在，本地分支 sf 会自动从 origin/serverfix 拉取。\n设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支，你可以在任意时间使用 -u 或 --set-upstream-to 选项运行 git branch 来显式地设置。\n ```bash\n$ git branch -u origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\n```\n\n\t常用命令：\n\t```bash\n\tgit init\n\tgit add index.txt\n\tgit commit -m\n\tgit remote add origin https//github.com\n\tgit push origin master  跟新到origin的master分支\n\tgit pull origin master  从origin的master从跟新\n\tgit fetch origin\n\tgit checkout --track origin/master\n\t```\n","source":"_posts/Github学习.md","raw":"---\ntitle: Github学习\ndate: 2016-07-21 15:27:32\ntags:\n- GitHub\ncategories:\n- 编程工具\n\n---\n1. 当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。 事实上，如果你的服务器的磁盘坏掉了，你通常可以使用任何一个克隆下来的用户端来重建服务器上的仓库。\n\n2. 忽略文件\n\t\t\t一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。 来看一个实际的例子：\n```bash\n\t$ cat .gitignore\n\t*.[oa]\n\t*~```\n\n\t第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。 第二行告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。 此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。 要养成一开始就设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。\n\n3.  从远程仓库中抓取与拉取\n\n\t就如刚才所见，从远程仓库中获得数据，可以执行：\n    ```bash\n\t$ git fetch [remote-name] 和 git merge [remote-name]/\t[local-name]\n  ```\n\t这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。\n\n\t如果你使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。 所以，git fetch origin 会抓取克隆（或上一次抓取）后新推送的所有工作。 必须注意 git fetch 命令会将数据拉取到你的本地仓库 - 它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。\n\n4. 下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 origin/serverfix，指向服务器的 serverfix 分支的引用：\n```bash\n$ git fetch origin\nremote: Counting objects: 7, done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 3 (delta 0)\nUnpacking objects: 100% (3/3), done.\nFrom https://github.com/schacon/simplegit\n *[new branch]      serverfix    -> origin/serverfix\n```\n\t要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。 换一句话说，这种情况下，不会有一个新的 serverfix 分支 - 只有一个不可以修改的 origin/serverfix 指针。\n\n\t可以运行 git merge origin/serverfix 将这些工作合并到当前所在的分支。 如果想要在自己的 serverfix 分支上工作，可以将其建立在远程跟踪分支之上：\n```bash\n$ git checkout -b serverfix origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n```\n\t这会给你一个用于工作的本地分支，并且起点位于 origin/serverfix。\n5. 跟踪分支\n从一个远程跟踪分支检出一个本地分支会自动创建一个叫做 “跟踪分支”（有时候也叫做 “上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入 git pull，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。\n\n\t当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支。 然而，如果你愿意的话可以设置其他的跟踪分支 - 其他远程仓库上的跟踪分支，或者不跟踪 master 分支。 最简单的就是之前看到的例子，运行 git checkout -b [branch] [remotename]/[branch]。 这是一个十分常用的操作所以 Git 提供了 --track 快捷方式：\n```bash\n$ git checkout --track origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\nSwitched to a new branch 'serverfix'\n```\n\t如果想要将本地分支与远程分支设置为不同名字，你可以轻松地增加一个不同名字的本地分支的上一个命令：\n```bash\n$ git checkout -b sf origin/serverfix\nBranch sf set up to track remote branch serverfix from origin.\nSwitched to a new branch 'sf'```\n\t现在，本地分支 sf 会自动从 origin/serverfix 拉取。\n设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支，你可以在任意时间使用 -u 或 --set-upstream-to 选项运行 git branch 来显式地设置。\n ```bash\n$ git branch -u origin/serverfix\nBranch serverfix set up to track remote branch serverfix from origin.\n```\n\n\t常用命令：\n\t```bash\n\tgit init\n\tgit add index.txt\n\tgit commit -m\n\tgit remote add origin https//github.com\n\tgit push origin master  跟新到origin的master分支\n\tgit pull origin master  从origin的master从跟新\n\tgit fetch origin\n\tgit checkout --track origin/master\n\t```\n","slug":"Github学习","published":1,"updated":"2016-07-29T11:54:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixsq0003bxboy71vdjtd","content":"<ol>\n<li><p>当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。 事实上，如果你的服务器的磁盘坏掉了，你通常可以使用任何一个克隆下来的用户端来重建服务器上的仓库。</p>\n</li>\n<li><p>忽略文件</p>\n<pre><code>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。 来看一个实际的例子：\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat .gitignore</span><br><span class=\"line\">*.[oa]</span><br><span class=\"line\">*~</span><br></pre></td></tr></table></figure>\n<p> 第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。 第二行告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。 此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。 要养成一开始就设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。</p>\n</li>\n<li><p>从远程仓库中抓取与拉取</p>\n<p>就如刚才所见，从远程仓库中获得数据，可以执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch [remote-name] 和 git merge [remote-name]/\t[<span class=\"built_in\">local</span>-name]</span><br></pre></td></tr></table></figure>\n<p>这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。</p>\n<p>如果你使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。 所以，git fetch origin 会抓取克隆（或上一次抓取）后新推送的所有工作。 必须注意 git fetch 命令会将数据拉取到你的本地仓库 - 它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。</p>\n</li>\n<li><p>下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 origin/serverfix，指向服务器的 serverfix 分支的引用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch origin</span><br><span class=\"line\">remote: Counting objects: 7, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (2/2), done.</span><br><span class=\"line\">remote: Total 3 (delta 0), reused 3 (delta 0)</span><br><span class=\"line\">Unpacking objects: 100% (3/3), done.</span><br><span class=\"line\">From https://github.com/schacon/simplegit</span><br><span class=\"line\"> *[new branch]      serverfix    -&gt; origin/serverfix</span><br></pre></td></tr></table></figure>\n<p> 要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。 换一句话说，这种情况下，不会有一个新的 serverfix 分支 - 只有一个不可以修改的 origin/serverfix 指针。</p>\n<p> 可以运行 git merge origin/serverfix 将这些工作合并到当前所在的分支。 如果想要在自己的 serverfix 分支上工作，可以将其建立在远程跟踪分支之上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b serverfix origin/serverfix</span><br><span class=\"line\">Branch serverfix <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</span><br><span class=\"line\">Switched to a new branch <span class=\"string\">'serverfix'</span></span><br></pre></td></tr></table></figure>\n<p> 这会给你一个用于工作的本地分支，并且起点位于 origin/serverfix。</p>\n</li>\n<li><p>跟踪分支<br>从一个远程跟踪分支检出一个本地分支会自动创建一个叫做 “跟踪分支”（有时候也叫做 “上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入 git pull，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。</p>\n<p> 当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支。 然而，如果你愿意的话可以设置其他的跟踪分支 - 其他远程仓库上的跟踪分支，或者不跟踪 master 分支。 最简单的就是之前看到的例子，运行 git checkout -b [branch] [remotename]/[branch]。 这是一个十分常用的操作所以 Git 提供了 –track 快捷方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout --track origin/serverfix</span><br><span class=\"line\">Branch serverfix <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</span><br><span class=\"line\">Switched to a new branch <span class=\"string\">'serverfix'</span></span><br></pre></td></tr></table></figure>\n<p> 如果想要将本地分支与远程分支设置为不同名字，你可以轻松地增加一个不同名字的本地分支的上一个命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b sf origin/serverfix</span><br><span class=\"line\">Branch sf <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</span><br><span class=\"line\">Switched to a new branch <span class=\"string\">'sf'</span></span><br></pre></td></tr></table></figure>\n<p> 现在，本地分支 sf 会自动从 origin/serverfix 拉取。<br>设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支，你可以在任意时间使用 -u 或 –set-upstream-to 选项运行 git branch 来显式地设置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -u origin/serverfix</span><br><span class=\"line\">Branch serverfix <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</span><br></pre></td></tr></table></figure>\n<p> 常用命令：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add index.txt</span><br><span class=\"line\">git commit -m</span><br><span class=\"line\">git remote add origin https//github.com</span><br><span class=\"line\">git push origin master  跟新到origin的master分支</span><br><span class=\"line\">git pull origin master  从origin的master从跟新</span><br><span class=\"line\">git fetch origin</span><br><span class=\"line\">git checkout --track origin/master</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>当你执行 git clone 命令的时候，默认配置下远程 Git 仓库中的每一个文件的每一个版本都将被拉取下来。 事实上，如果你的服务器的磁盘坏掉了，你通常可以使用任何一个克隆下来的用户端来重建服务器上的仓库。</p>\n</li>\n<li><p>忽略文件</p>\n<pre><code>一般我们总会有些文件无需纳入 Git 的管理，也不希望它们总出现在未跟踪文件列表。 通常都是些自动生成的文件，比如日志文件，或者编译过程中创建的临时文件等。 在这种情况下，我们可以创建一个名为 .gitignore 的文件，列出要忽略的文件模式。 来看一个实际的例子：\n</code></pre><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat .gitignore</span><br><span class=\"line\">*.[oa]</span><br><span class=\"line\">*~</span><br></pre></td></tr></table></figure>\n<p> 第一行告诉 Git 忽略所有以 .o 或 .a 结尾的文件。一般这类对象文件和存档文件都是编译过程中出现的。 第二行告诉 Git 忽略所有以波浪符（~）结尾的文件，许多文本编辑软件（比如 Emacs）都用这样的文件名保存副本。 此外，你可能还需要忽略 log，tmp 或者 pid 目录，以及自动生成的文档等等。 要养成一开始就设置好 .gitignore 文件的习惯，以免将来误提交这类无用的文件。</p>\n</li>\n<li><p>从远程仓库中抓取与拉取</p>\n<p>就如刚才所见，从远程仓库中获得数据，可以执行：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch [remote-name] 和 git merge [remote-name]/\t[<span class=\"built_in\">local</span>-name]</span><br></pre></td></tr></table></figure>\n<p>这个命令会访问远程仓库，从中拉取所有你还没有的数据。 执行完成后，你将会拥有那个远程仓库中所有分支的引用，可以随时合并或查看。</p>\n<p>如果你使用 clone 命令克隆了一个仓库，命令会自动将其添加为远程仓库并默认以 “origin” 为简写。 所以，git fetch origin 会抓取克隆（或上一次抓取）后新推送的所有工作。 必须注意 git fetch 命令会将数据拉取到你的本地仓库 - 它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。</p>\n</li>\n<li><p>下一次其他协作者从服务器上抓取数据时，他们会在本地生成一个远程分支 origin/serverfix，指向服务器的 serverfix 分支的引用：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git fetch origin</span><br><span class=\"line\">remote: Counting objects: 7, done.</span><br><span class=\"line\">remote: Compressing objects: 100% (2/2), done.</span><br><span class=\"line\">remote: Total 3 (delta 0), reused 3 (delta 0)</span><br><span class=\"line\">Unpacking objects: 100% (3/3), done.</span><br><span class=\"line\">From https://github.com/schacon/simplegit</span><br><span class=\"line\"> *[new branch]      serverfix    -&gt; origin/serverfix</span><br></pre></td></tr></table></figure>\n<p> 要特别注意的一点是当抓取到新的远程跟踪分支时，本地不会自动生成一份可编辑的副本（拷贝）。 换一句话说，这种情况下，不会有一个新的 serverfix 分支 - 只有一个不可以修改的 origin/serverfix 指针。</p>\n<p> 可以运行 git merge origin/serverfix 将这些工作合并到当前所在的分支。 如果想要在自己的 serverfix 分支上工作，可以将其建立在远程跟踪分支之上：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b serverfix origin/serverfix</span><br><span class=\"line\">Branch serverfix <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</span><br><span class=\"line\">Switched to a new branch <span class=\"string\">'serverfix'</span></span><br></pre></td></tr></table></figure>\n<p> 这会给你一个用于工作的本地分支，并且起点位于 origin/serverfix。</p>\n</li>\n<li><p>跟踪分支<br>从一个远程跟踪分支检出一个本地分支会自动创建一个叫做 “跟踪分支”（有时候也叫做 “上游分支”）。 跟踪分支是与远程分支有直接关系的本地分支。 如果在一个跟踪分支上输入 git pull，Git 能自动地识别去哪个服务器上抓取、合并到哪个分支。</p>\n<p> 当克隆一个仓库时，它通常会自动地创建一个跟踪 origin/master 的 master 分支。 然而，如果你愿意的话可以设置其他的跟踪分支 - 其他远程仓库上的跟踪分支，或者不跟踪 master 分支。 最简单的就是之前看到的例子，运行 git checkout -b [branch] [remotename]/[branch]。 这是一个十分常用的操作所以 Git 提供了 –track 快捷方式：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout --track origin/serverfix</span><br><span class=\"line\">Branch serverfix <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</span><br><span class=\"line\">Switched to a new branch <span class=\"string\">'serverfix'</span></span><br></pre></td></tr></table></figure>\n<p> 如果想要将本地分支与远程分支设置为不同名字，你可以轻松地增加一个不同名字的本地分支的上一个命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git checkout -b sf origin/serverfix</span><br><span class=\"line\">Branch sf <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</span><br><span class=\"line\">Switched to a new branch <span class=\"string\">'sf'</span></span><br></pre></td></tr></table></figure>\n<p> 现在，本地分支 sf 会自动从 origin/serverfix 拉取。<br>设置已有的本地分支跟踪一个刚刚拉取下来的远程分支，或者想要修改正在跟踪的上游分支，你可以在任意时间使用 -u 或 –set-upstream-to 选项运行 git branch 来显式地设置。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git branch -u origin/serverfix</span><br><span class=\"line\">Branch serverfix <span class=\"built_in\">set</span> up to track remote branch serverfix from origin.</span><br></pre></td></tr></table></figure>\n<p> 常用命令：</p>\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git add index.txt</span><br><span class=\"line\">git commit -m</span><br><span class=\"line\">git remote add origin https//github.com</span><br><span class=\"line\">git push origin master  跟新到origin的master分支</span><br><span class=\"line\">git pull origin master  从origin的master从跟新</span><br><span class=\"line\">git fetch origin</span><br><span class=\"line\">git checkout --track origin/master</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"CAS单点登录配置","date":"2016-06-12T08:02:44.000Z","_content":"\n## 生成证书\n\n1. 新建一个cas文件夹\n2. 用以下命令生成server.keystore\n```bash\njinyaoyuan:cas jinyaoyuan$ keytool -genkey -alias server -keyalg RSA -keypass mysql123 -storepass mysql123 -keystore server.keystore\n您的名字与姓氏是什么?\n  [Unknown]:  zzkt.sso.com\n您的组织单位名称是什么?\n  [Unknown]:  zzkt.sso.com\n您的组织名称是什么?\n  [Unknown]:  zzkt.sso.com\n您所在的城市或区域名称是什么?\n  [Unknown]:  beijing\n您所在的省/市/自治区名称是什么?\n  [Unknown]:  beijing\n该单位的双字母国家/地区代码是什么?\n  [Unknown]:  cn\nCN=zzkt.sso.com, OU=zzkt.sso.com, O=zzkt.sso.com, L=beijing, ST=beijing, C=cn是否正确?\n  [否]:  Y\n```\n\t**<font color=\"#A52A2A\">其中名字与姓氏一定要是cas服务器对应的域名，不能是IP</font>**\n\n3. 导出证书\n```bash\njinyaoyuan:cas jinyaoyuan$ keytool -export -alias server -storepass mysql123 -file server.cer -keystore server.keystore\n存储在文件 <server.cer> 中的证书\n```\n\n4. 导入证书\n```bash\njinyaoyuan:cas jinyaoyuan$ keytool -import -trustcacerts -alias server -file server.cer -keystore cacerts -storepass mysql123\n所有者: CN=zzkt.sso.com, OU=zzkt.sso.com, O=zzkt.sso.com, L=beijing, ST=beijing, C=cn\n发布者: CN=zzkt.sso.com, OU=zzkt.sso.com, O=zzkt.sso.com, L=beijing, ST=beijing, C=cn\n序列号: 4406dd99\n有效期开始日期: Sun Jun 12 16:19:09 CST 2016, 截止日期: Sat Sep 10 16:19:09 CST 2016\n证书指纹:\n\t MD5: 6F:AB:1B:6D:30:45:14:42:B9:09:4A:12:61:AA:42:CB\n\t SHA1: F8:2E:22:34:A4:E4:C6:8E:61:7D:90:AC:99:2A:08:AC:A3:4C:1A:1C\n\t SHA256: B5:17:93:49:60:F6:17:6C:0A:93:2A:5F:00:C5:E7:F7:33:B1:CE:D3:DC:A0:9F:C5:43:FF:68:CD:67:A2:F8:9A\n\t 签名算法名称: SHA256withRSA\n\t 版本: 3\n扩展:\n#1: ObjectId: 2.5.29.14 Criticality=false\nSubjectKeyIdentifier [\nKeyIdentifier [\n0000: 9E F9 E0 9A 0A F4 E8 9C   B4 24 C6 85 44 C3 30 F7  .........$..D.0.\n0010: 5F 24 B5 4C                                        _$.L\n]\n]\n是否信任此证书? [否]:  Y\n证书已添加到密钥库中\n```\n\n5. 完成上述步骤后cas文件下会生成server.keystore、server.cer、cacerts三个文件，将生成的cacerts文件替换到$JAVA_HOME/jre/lib/security/cacerts文件，**<font color=\"#A52A2A\">替换前最好备份一下，这个文件有可能影响其他程序的正常运行</font>**。\n\n6. \n-genkey      \n在用户主目录中创建一个默认文件\".keystore\",还会产生一个mykey的别名，mykey中包含用户的公钥、私钥和证书\n-alias       产生别名\n-keystore    指定密钥库的名称(产生的各类信息将不在.keystore文件中\n-keyalg      指定密钥的算法\n-validity    指定创建的证书有效期多少天\n-keysize     指定密钥长度\n-storepass   指定密钥库的密码\n-keypass     指定别名条目的密码\n-dname   指定证书拥有者信息\n-list  显示密钥库中的证书信息\n-v           显示密钥库中的证书详细信息\n-export      将别名指定的证书导出到文件\n-file        参数指定导出到文件的文件名\n-delete      删除密钥库中某条目\n-keypasswd   修改密钥库中指定条目口令\n-import      将已签名数字证书导入密钥库\n\n## CAS配置\n\n1. 将生成的server.keystore放入%TOMCAT_HOME%\\conf下。修改%TOMCAT_HOME%\\conf\\server.xml文件\n \t\n\t\t <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11Protocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\" scheme=\"http\" secure=\"true\"\n               clientAuth=\"false\" sslProtocol=\"TLS\" keystoreFile=\"./conf/server.keystore\" \n\t\tkeystorePass=\"mysql123\"/>\n","source":"_posts/CAS单点登录配置.md","raw":"---\ntitle: CAS单点登录配置\ndate: 2016-06-12 16:02:44\ntags:\n- CAS\ncategories:\n- 服务器\n\n---\n\n## 生成证书\n\n1. 新建一个cas文件夹\n2. 用以下命令生成server.keystore\n```bash\njinyaoyuan:cas jinyaoyuan$ keytool -genkey -alias server -keyalg RSA -keypass mysql123 -storepass mysql123 -keystore server.keystore\n您的名字与姓氏是什么?\n  [Unknown]:  zzkt.sso.com\n您的组织单位名称是什么?\n  [Unknown]:  zzkt.sso.com\n您的组织名称是什么?\n  [Unknown]:  zzkt.sso.com\n您所在的城市或区域名称是什么?\n  [Unknown]:  beijing\n您所在的省/市/自治区名称是什么?\n  [Unknown]:  beijing\n该单位的双字母国家/地区代码是什么?\n  [Unknown]:  cn\nCN=zzkt.sso.com, OU=zzkt.sso.com, O=zzkt.sso.com, L=beijing, ST=beijing, C=cn是否正确?\n  [否]:  Y\n```\n\t**<font color=\"#A52A2A\">其中名字与姓氏一定要是cas服务器对应的域名，不能是IP</font>**\n\n3. 导出证书\n```bash\njinyaoyuan:cas jinyaoyuan$ keytool -export -alias server -storepass mysql123 -file server.cer -keystore server.keystore\n存储在文件 <server.cer> 中的证书\n```\n\n4. 导入证书\n```bash\njinyaoyuan:cas jinyaoyuan$ keytool -import -trustcacerts -alias server -file server.cer -keystore cacerts -storepass mysql123\n所有者: CN=zzkt.sso.com, OU=zzkt.sso.com, O=zzkt.sso.com, L=beijing, ST=beijing, C=cn\n发布者: CN=zzkt.sso.com, OU=zzkt.sso.com, O=zzkt.sso.com, L=beijing, ST=beijing, C=cn\n序列号: 4406dd99\n有效期开始日期: Sun Jun 12 16:19:09 CST 2016, 截止日期: Sat Sep 10 16:19:09 CST 2016\n证书指纹:\n\t MD5: 6F:AB:1B:6D:30:45:14:42:B9:09:4A:12:61:AA:42:CB\n\t SHA1: F8:2E:22:34:A4:E4:C6:8E:61:7D:90:AC:99:2A:08:AC:A3:4C:1A:1C\n\t SHA256: B5:17:93:49:60:F6:17:6C:0A:93:2A:5F:00:C5:E7:F7:33:B1:CE:D3:DC:A0:9F:C5:43:FF:68:CD:67:A2:F8:9A\n\t 签名算法名称: SHA256withRSA\n\t 版本: 3\n扩展:\n#1: ObjectId: 2.5.29.14 Criticality=false\nSubjectKeyIdentifier [\nKeyIdentifier [\n0000: 9E F9 E0 9A 0A F4 E8 9C   B4 24 C6 85 44 C3 30 F7  .........$..D.0.\n0010: 5F 24 B5 4C                                        _$.L\n]\n]\n是否信任此证书? [否]:  Y\n证书已添加到密钥库中\n```\n\n5. 完成上述步骤后cas文件下会生成server.keystore、server.cer、cacerts三个文件，将生成的cacerts文件替换到$JAVA_HOME/jre/lib/security/cacerts文件，**<font color=\"#A52A2A\">替换前最好备份一下，这个文件有可能影响其他程序的正常运行</font>**。\n\n6. \n-genkey      \n在用户主目录中创建一个默认文件\".keystore\",还会产生一个mykey的别名，mykey中包含用户的公钥、私钥和证书\n-alias       产生别名\n-keystore    指定密钥库的名称(产生的各类信息将不在.keystore文件中\n-keyalg      指定密钥的算法\n-validity    指定创建的证书有效期多少天\n-keysize     指定密钥长度\n-storepass   指定密钥库的密码\n-keypass     指定别名条目的密码\n-dname   指定证书拥有者信息\n-list  显示密钥库中的证书信息\n-v           显示密钥库中的证书详细信息\n-export      将别名指定的证书导出到文件\n-file        参数指定导出到文件的文件名\n-delete      删除密钥库中某条目\n-keypasswd   修改密钥库中指定条目口令\n-import      将已签名数字证书导入密钥库\n\n## CAS配置\n\n1. 将生成的server.keystore放入%TOMCAT_HOME%\\conf下。修改%TOMCAT_HOME%\\conf\\server.xml文件\n \t\n\t\t <Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11Protocol\"\n               maxThreads=\"150\" SSLEnabled=\"true\" scheme=\"http\" secure=\"true\"\n               clientAuth=\"false\" sslProtocol=\"TLS\" keystoreFile=\"./conf/server.keystore\" \n\t\tkeystorePass=\"mysql123\"/>\n","slug":"CAS单点登录配置","published":1,"updated":"2016-06-12T09:07:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixsz0006bxbo1c6tc4gc","content":"<h2 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h2><ol>\n<li>新建一个cas文件夹</li>\n<li><p>用以下命令生成server.keystore</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jinyaoyuan:cas jinyaoyuan$ keytool -genkey -alias server -keyalg RSA -keypass mysql123 -storepass mysql123 -keystore server.keystore</span><br><span class=\"line\">您的名字与姓氏是什么?</span><br><span class=\"line\">  [Unknown]:  zzkt.sso.com</span><br><span class=\"line\">您的组织单位名称是什么?</span><br><span class=\"line\">  [Unknown]:  zzkt.sso.com</span><br><span class=\"line\">您的组织名称是什么?</span><br><span class=\"line\">  [Unknown]:  zzkt.sso.com</span><br><span class=\"line\">您所在的城市或区域名称是什么?</span><br><span class=\"line\">  [Unknown]:  beijing</span><br><span class=\"line\">您所在的省/市/自治区名称是什么?</span><br><span class=\"line\">  [Unknown]:  beijing</span><br><span class=\"line\">该单位的双字母国家/地区代码是什么?</span><br><span class=\"line\">  [Unknown]:  cn</span><br><span class=\"line\">CN=zzkt.sso.com, OU=zzkt.sso.com, O=zzkt.sso.com, L=beijing, ST=beijing, C=cn是否正确?</span><br><span class=\"line\">  [否]:  Y</span><br></pre></td></tr></table></figure>\n<p> <strong><font color=\"#A52A2A\">其中名字与姓氏一定要是cas服务器对应的域名，不能是IP</font></strong></p>\n</li>\n<li><p>导出证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jinyaoyuan:cas jinyaoyuan$ keytool -export -alias server -storepass mysql123 -file server.cer -keystore server.keystore</span><br><span class=\"line\">存储在文件 &lt;server.cer&gt; 中的证书</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>导入证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jinyaoyuan:cas jinyaoyuan$ keytool -import -trustcacerts -alias server -file server.cer -keystore cacerts -storepass mysql123</span><br><span class=\"line\">所有者: CN=zzkt.sso.com, OU=zzkt.sso.com, O=zzkt.sso.com, L=beijing, ST=beijing, C=cn</span><br><span class=\"line\">发布者: CN=zzkt.sso.com, OU=zzkt.sso.com, O=zzkt.sso.com, L=beijing, ST=beijing, C=cn</span><br><span class=\"line\">序列号: 4406dd99</span><br><span class=\"line\">有效期开始日期: Sun Jun 12 16:19:09 CST 2016, 截止日期: Sat Sep 10 16:19:09 CST 2016</span><br><span class=\"line\">证书指纹:</span><br><span class=\"line\">\t MD5: 6F:AB:1B:6D:30:45:14:42:B9:09:4A:12:61:AA:42:CB</span><br><span class=\"line\">\t SHA1: F8:2E:22:34:A4:E4:C6:8E:61:7D:90:AC:99:2A:08:AC:A3:4C:1A:1C</span><br><span class=\"line\">\t SHA256: B5:17:93:49:60:F6:17:6C:0A:93:2A:5F:00:C5:E7:F7:33:B1:CE:D3:DC:A0:9F:C5:43:FF:68:CD:67:A2:F8:9A</span><br><span class=\"line\">\t 签名算法名称: SHA256withRSA</span><br><span class=\"line\">\t 版本: 3</span><br><span class=\"line\">扩展:</span><br><span class=\"line\"><span class=\"comment\">#1: ObjectId: 2.5.29.14 Criticality=false</span></span><br><span class=\"line\">SubjectKeyIdentifier [</span><br><span class=\"line\">KeyIdentifier [</span><br><span class=\"line\">0000: 9E F9 E0 9A 0A F4 E8 9C   B4 24 C6 85 44 C3 30 F7  .........$..D.0.</span><br><span class=\"line\">0010: 5F 24 B5 4C                                        _$.L</span><br><span class=\"line\">]</span><br><span class=\"line\">]</span><br><span class=\"line\">是否信任此证书? [否]:  Y</span><br><span class=\"line\">证书已添加到密钥库中</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤后cas文件下会生成server.keystore、server.cer、cacerts三个文件，将生成的cacerts文件替换到$JAVA_HOME/jre/lib/security/cacerts文件，<strong><font color=\"#A52A2A\">替换前最好备份一下，这个文件有可能影响其他程序的正常运行</font></strong>。</p>\n</li>\n<li><p>-genkey<br>在用户主目录中创建一个默认文件”.keystore”,还会产生一个mykey的别名，mykey中包含用户的公钥、私钥和证书<br>-alias       产生别名<br>-keystore    指定密钥库的名称(产生的各类信息将不在.keystore文件中<br>-keyalg      指定密钥的算法<br>-validity    指定创建的证书有效期多少天<br>-keysize     指定密钥长度<br>-storepass   指定密钥库的密码<br>-keypass     指定别名条目的密码<br>-dname   指定证书拥有者信息<br>-list  显示密钥库中的证书信息<br>-v           显示密钥库中的证书详细信息<br>-export      将别名指定的证书导出到文件<br>-file        参数指定导出到文件的文件名<br>-delete      删除密钥库中某条目<br>-keypasswd   修改密钥库中指定条目口令<br>-import      将已签名数字证书导入密钥库</p>\n</li>\n</ol>\n<h2 id=\"CAS配置\"><a href=\"#CAS配置\" class=\"headerlink\" title=\"CAS配置\"></a>CAS配置</h2><ol>\n<li><p>将生成的server.keystore放入%TOMCAT_HOME%\\conf下。修改%TOMCAT_HOME%\\conf\\server.xml文件</p>\n<pre><code> &lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11Protocol&quot;\n       maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;http&quot; secure=&quot;true&quot;\n       clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; keystoreFile=&quot;./conf/server.keystore&quot; \nkeystorePass=&quot;mysql123&quot;/&gt;\n</code></pre></li>\n</ol>\n","excerpt":"","more":"<h2 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h2><ol>\n<li>新建一个cas文件夹</li>\n<li><p>用以下命令生成server.keystore</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jinyaoyuan:cas jinyaoyuan$ keytool -genkey -alias server -keyalg RSA -keypass mysql123 -storepass mysql123 -keystore server.keystore</span><br><span class=\"line\">您的名字与姓氏是什么?</span><br><span class=\"line\">  [Unknown]:  zzkt.sso.com</span><br><span class=\"line\">您的组织单位名称是什么?</span><br><span class=\"line\">  [Unknown]:  zzkt.sso.com</span><br><span class=\"line\">您的组织名称是什么?</span><br><span class=\"line\">  [Unknown]:  zzkt.sso.com</span><br><span class=\"line\">您所在的城市或区域名称是什么?</span><br><span class=\"line\">  [Unknown]:  beijing</span><br><span class=\"line\">您所在的省/市/自治区名称是什么?</span><br><span class=\"line\">  [Unknown]:  beijing</span><br><span class=\"line\">该单位的双字母国家/地区代码是什么?</span><br><span class=\"line\">  [Unknown]:  cn</span><br><span class=\"line\">CN=zzkt.sso.com, OU=zzkt.sso.com, O=zzkt.sso.com, L=beijing, ST=beijing, C=cn是否正确?</span><br><span class=\"line\">  [否]:  Y</span><br></pre></td></tr></table></figure>\n<p> <strong><font color=\"#A52A2A\">其中名字与姓氏一定要是cas服务器对应的域名，不能是IP</font></strong></p>\n</li>\n<li><p>导出证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jinyaoyuan:cas jinyaoyuan$ keytool -export -alias server -storepass mysql123 -file server.cer -keystore server.keystore</span><br><span class=\"line\">存储在文件 &lt;server.cer&gt; 中的证书</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>导入证书</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jinyaoyuan:cas jinyaoyuan$ keytool -import -trustcacerts -alias server -file server.cer -keystore cacerts -storepass mysql123</span><br><span class=\"line\">所有者: CN=zzkt.sso.com, OU=zzkt.sso.com, O=zzkt.sso.com, L=beijing, ST=beijing, C=cn</span><br><span class=\"line\">发布者: CN=zzkt.sso.com, OU=zzkt.sso.com, O=zzkt.sso.com, L=beijing, ST=beijing, C=cn</span><br><span class=\"line\">序列号: 4406dd99</span><br><span class=\"line\">有效期开始日期: Sun Jun 12 16:19:09 CST 2016, 截止日期: Sat Sep 10 16:19:09 CST 2016</span><br><span class=\"line\">证书指纹:</span><br><span class=\"line\">\t MD5: 6F:AB:1B:6D:30:45:14:42:B9:09:4A:12:61:AA:42:CB</span><br><span class=\"line\">\t SHA1: F8:2E:22:34:A4:E4:C6:8E:61:7D:90:AC:99:2A:08:AC:A3:4C:1A:1C</span><br><span class=\"line\">\t SHA256: B5:17:93:49:60:F6:17:6C:0A:93:2A:5F:00:C5:E7:F7:33:B1:CE:D3:DC:A0:9F:C5:43:FF:68:CD:67:A2:F8:9A</span><br><span class=\"line\">\t 签名算法名称: SHA256withRSA</span><br><span class=\"line\">\t 版本: 3</span><br><span class=\"line\">扩展:</span><br><span class=\"line\"><span class=\"comment\">#1: ObjectId: 2.5.29.14 Criticality=false</span></span><br><span class=\"line\">SubjectKeyIdentifier [</span><br><span class=\"line\">KeyIdentifier [</span><br><span class=\"line\">0000: 9E F9 E0 9A 0A F4 E8 9C   B4 24 C6 85 44 C3 30 F7  .........$..D.0.</span><br><span class=\"line\">0010: 5F 24 B5 4C                                        _$.L</span><br><span class=\"line\">]</span><br><span class=\"line\">]</span><br><span class=\"line\">是否信任此证书? [否]:  Y</span><br><span class=\"line\">证书已添加到密钥库中</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>完成上述步骤后cas文件下会生成server.keystore、server.cer、cacerts三个文件，将生成的cacerts文件替换到$JAVA_HOME/jre/lib/security/cacerts文件，<strong><font color=\"#A52A2A\">替换前最好备份一下，这个文件有可能影响其他程序的正常运行</font></strong>。</p>\n</li>\n<li><p>-genkey<br>在用户主目录中创建一个默认文件”.keystore”,还会产生一个mykey的别名，mykey中包含用户的公钥、私钥和证书<br>-alias       产生别名<br>-keystore    指定密钥库的名称(产生的各类信息将不在.keystore文件中<br>-keyalg      指定密钥的算法<br>-validity    指定创建的证书有效期多少天<br>-keysize     指定密钥长度<br>-storepass   指定密钥库的密码<br>-keypass     指定别名条目的密码<br>-dname   指定证书拥有者信息<br>-list  显示密钥库中的证书信息<br>-v           显示密钥库中的证书详细信息<br>-export      将别名指定的证书导出到文件<br>-file        参数指定导出到文件的文件名<br>-delete      删除密钥库中某条目<br>-keypasswd   修改密钥库中指定条目口令<br>-import      将已签名数字证书导入密钥库</p>\n</li>\n</ol>\n<h2 id=\"CAS配置\"><a href=\"#CAS配置\" class=\"headerlink\" title=\"CAS配置\"></a>CAS配置</h2><ol>\n<li><p>将生成的server.keystore放入%TOMCAT_HOME%\\conf下。修改%TOMCAT_HOME%\\conf\\server.xml文件</p>\n<pre><code> &lt;Connector port=&quot;8443&quot; protocol=&quot;org.apache.coyote.http11.Http11Protocol&quot;\n       maxThreads=&quot;150&quot; SSLEnabled=&quot;true&quot; scheme=&quot;http&quot; secure=&quot;true&quot;\n       clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; keystoreFile=&quot;./conf/server.keystore&quot; \nkeystorePass=&quot;mysql123&quot;/&gt;\n</code></pre></li>\n</ol>\n"},{"title":"Hexo的使用","date":"2016-05-25T12:59:06.000Z","_content":"\n# Hexo的使用\n\n### 让搜索引擎收录\n利用文件验证的时候记得在下载的html前面加上\n\t\t\n\tlayout: false  //分号后面一定要有空格\n\n### 部署步骤\n\n每次部署的步骤，可按以下三步来进行。\n```\n\thexo clean\n\thexo generate\n\thexo deploy\n```\n\n### 一些常用命令：\n\n* hexo new \"postName\" #新建文章\n\n* hexo new page\"pageName\" #新建页面\n\n* hexo generate #生成静态页面至public目录\n\n* hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n\n* hexo deploy #将.deploy目录部署到GitHub\n\n","source":"_posts/Hexo的使用.md","raw":"---\ntitle: Hexo的使用\ndate: 2016-05-25 20:59:06\ntags:\n- Hexo\ncategories:\n- Hexo\n\n---\n\n# Hexo的使用\n\n### 让搜索引擎收录\n利用文件验证的时候记得在下载的html前面加上\n\t\t\n\tlayout: false  //分号后面一定要有空格\n\n### 部署步骤\n\n每次部署的步骤，可按以下三步来进行。\n```\n\thexo clean\n\thexo generate\n\thexo deploy\n```\n\n### 一些常用命令：\n\n* hexo new \"postName\" #新建文章\n\n* hexo new page\"pageName\" #新建页面\n\n* hexo generate #生成静态页面至public目录\n\n* hexo server #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）\n\n* hexo deploy #将.deploy目录部署到GitHub\n\n","slug":"Hexo的使用","published":1,"updated":"2016-06-28T12:54:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixt00007bxboti86o6hy","content":"<h1 id=\"Hexo的使用\"><a href=\"#Hexo的使用\" class=\"headerlink\" title=\"Hexo的使用\"></a>Hexo的使用</h1><h3 id=\"让搜索引擎收录\"><a href=\"#让搜索引擎收录\" class=\"headerlink\" title=\"让搜索引擎收录\"></a>让搜索引擎收录</h3><p>利用文件验证的时候记得在下载的html前面加上</p>\n<pre><code>layout: false  //分号后面一定要有空格\n</code></pre><h3 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h3><p>每次部署的步骤，可按以下三步来进行。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"一些常用命令：\"><a href=\"#一些常用命令：\" class=\"headerlink\" title=\"一些常用命令：\"></a>一些常用命令：</h3><ul>\n<li><p>hexo new “postName” #新建文章</p>\n</li>\n<li><p>hexo new page”pageName” #新建页面</p>\n</li>\n<li><p>hexo generate #生成静态页面至public目录</p>\n</li>\n<li><p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p>\n</li>\n<li><p>hexo deploy #将.deploy目录部署到GitHub</p>\n</li>\n</ul>\n","excerpt":"","more":"<h1 id=\"Hexo的使用\"><a href=\"#Hexo的使用\" class=\"headerlink\" title=\"Hexo的使用\"></a>Hexo的使用</h1><h3 id=\"让搜索引擎收录\"><a href=\"#让搜索引擎收录\" class=\"headerlink\" title=\"让搜索引擎收录\"></a>让搜索引擎收录</h3><p>利用文件验证的时候记得在下载的html前面加上</p>\n<pre><code>layout: false  //分号后面一定要有空格\n</code></pre><h3 id=\"部署步骤\"><a href=\"#部署步骤\" class=\"headerlink\" title=\"部署步骤\"></a>部署步骤</h3><p>每次部署的步骤，可按以下三步来进行。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"一些常用命令：\"><a href=\"#一些常用命令：\" class=\"headerlink\" title=\"一些常用命令：\"></a>一些常用命令：</h3><ul>\n<li><p>hexo new “postName” #新建文章</p>\n</li>\n<li><p>hexo new page”pageName” #新建页面</p>\n</li>\n<li><p>hexo generate #生成静态页面至public目录</p>\n</li>\n<li><p>hexo server #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）</p>\n</li>\n<li><p>hexo deploy #将.deploy目录部署到GitHub</p>\n</li>\n</ul>\n"},{"title":"Java动态代理和CGLib代理","date":"2016-08-24T08:38:15.000Z","_content":"#### Java动态代理\n\n```java\n/**\n * HelloWorld.java\n */\npublic interface HelloWorld {\n    public int say(String words);\n}\n\n/**\n * HelloWorldImplements.java\n */\npublic class HelloWorldImplements implements HelloWorld {\n    public int say(String words) {\n        System.out.println(\"I am saying:\"+words);\n        return 1;\n    }\n}\n\n/**\n * HelloWorldHandler.java\n */\npublic class HelloWorldHandler implements InvocationHandler {\n\n    Object target;\n\n    public HelloWorldHandler(Object target) {\n        super();\n        this.target = target;\n    }\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(\"before\");\n        Object result=method.invoke(target,args);\n        System.out.println(\"after\");\n        return result;\n    }\n\n}\n\n\n/**\n * Main.java\n */\npublic class Main {\n    public static void main(String[] args) {\n        HelleWorld helleWorld = new HelloWorldImplements();\n        HelloWorldHandler helloWorldHandler = new HelloWorldHandler(helleWorld);\n        //HelleWorld proxy =(HelleWorld) Proxy.newProxyInstance(HelleWorld.class.getClassLoader(), HelloWorldImplements.class.getInterfaces(), helloWorldHandler);\n        HelleWorld proxy = (HelleWorld) Proxy.newProxyInstance(helleWorld.getClass().getClassLoader(), new Class[]{HelleWorld.class}, helloWorldHandler);\n        proxy.say(\"fuck the world\");\n\n    }\n```\n\n#### JDK动态代理和CGLib动态代理的区别\n* jdk动态代理的对象需要实现一个接口，不能对类直接进行代理\n* CGLIB可以对类进行代理，基于继承去生成一个子类，在子类里对父类的方法进行覆盖，所以最好不要用final修饰方法\n* CGLIB的性能和JDK有所区别","source":"_posts/Java动态代理和CGLib代理.md","raw":"---\ntitle: Java动态代理和CGLib代理\ndate: 2016-08-24 16:38:15\ntags:\n- 面试\ncategories:\n- Java\n\n---\n#### Java动态代理\n\n```java\n/**\n * HelloWorld.java\n */\npublic interface HelloWorld {\n    public int say(String words);\n}\n\n/**\n * HelloWorldImplements.java\n */\npublic class HelloWorldImplements implements HelloWorld {\n    public int say(String words) {\n        System.out.println(\"I am saying:\"+words);\n        return 1;\n    }\n}\n\n/**\n * HelloWorldHandler.java\n */\npublic class HelloWorldHandler implements InvocationHandler {\n\n    Object target;\n\n    public HelloWorldHandler(Object target) {\n        super();\n        this.target = target;\n    }\n    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n        System.out.println(\"before\");\n        Object result=method.invoke(target,args);\n        System.out.println(\"after\");\n        return result;\n    }\n\n}\n\n\n/**\n * Main.java\n */\npublic class Main {\n    public static void main(String[] args) {\n        HelleWorld helleWorld = new HelloWorldImplements();\n        HelloWorldHandler helloWorldHandler = new HelloWorldHandler(helleWorld);\n        //HelleWorld proxy =(HelleWorld) Proxy.newProxyInstance(HelleWorld.class.getClassLoader(), HelloWorldImplements.class.getInterfaces(), helloWorldHandler);\n        HelleWorld proxy = (HelleWorld) Proxy.newProxyInstance(helleWorld.getClass().getClassLoader(), new Class[]{HelleWorld.class}, helloWorldHandler);\n        proxy.say(\"fuck the world\");\n\n    }\n```\n\n#### JDK动态代理和CGLib动态代理的区别\n* jdk动态代理的对象需要实现一个接口，不能对类直接进行代理\n* CGLIB可以对类进行代理，基于继承去生成一个子类，在子类里对父类的方法进行覆盖，所以最好不要用final修饰方法\n* CGLIB的性能和JDK有所区别","slug":"Java动态代理和CGLib代理","published":1,"updated":"2016-08-25T02:54:47.000Z","_id":"cis9pixt30009bxbogfvzg60e","comments":1,"layout":"post","photos":[],"link":"","content":"<h4 id=\"Java动态代理\"><a href=\"#Java动态代理\" class=\"headerlink\" title=\"Java动态代理\"></a>Java动态代理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * HelloWorld.java</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">say</span><span class=\"params\">(String words)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * HelloWorldImplements.java</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldImplements</span> <span class=\"keyword\">implements</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">say</span><span class=\"params\">(String words)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I am saying:\"</span>+words);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * HelloWorldHandler.java</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HelloWorldHandler</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"before\"</span>);</span><br><span class=\"line\">        Object result=method.invoke(target,args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"after\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Main.java</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        HelleWorld helleWorld = <span class=\"keyword\">new</span> HelloWorldImplements();</span><br><span class=\"line\">        HelloWorldHandler helloWorldHandler = <span class=\"keyword\">new</span> HelloWorldHandler(helleWorld);</span><br><span class=\"line\">        <span class=\"comment\">//HelleWorld proxy =(HelleWorld) Proxy.newProxyInstance(HelleWorld.class.getClassLoader(), HelloWorldImplements.class.getInterfaces(), helloWorldHandler);</span></span><br><span class=\"line\">        HelleWorld proxy = (HelleWorld) Proxy.newProxyInstance(helleWorld.getClass().getClassLoader(), <span class=\"keyword\">new</span> Class[]&#123;HelleWorld.class&#125;, helloWorldHandler);</span><br><span class=\"line\">        proxy.say(<span class=\"string\">\"fuck the world\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"JDK动态代理和CGLib动态代理的区别\"><a href=\"#JDK动态代理和CGLib动态代理的区别\" class=\"headerlink\" title=\"JDK动态代理和CGLib动态代理的区别\"></a>JDK动态代理和CGLib动态代理的区别</h4><ul>\n<li>jdk动态代理的对象需要实现一个接口，不能对类直接进行代理</li>\n<li>CGLIB可以对类进行代理，基于继承去生成一个子类，在子类里对父类的方法进行覆盖，所以最好不要用final修饰方法</li>\n<li>CGLIB的性能和JDK有所区别</li>\n</ul>\n","excerpt":"","more":"<h4 id=\"Java动态代理\"><a href=\"#Java动态代理\" class=\"headerlink\" title=\"Java动态代理\"></a>Java动态代理</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * HelloWorld.java</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">say</span><span class=\"params\">(String words)</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * HelloWorldImplements.java</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldImplements</span> <span class=\"keyword\">implements</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">say</span><span class=\"params\">(String words)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"I am saying:\"</span>+words);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * HelloWorldHandler.java</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorldHandler</span> <span class=\"keyword\">implements</span> <span class=\"title\">InvocationHandler</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Object target;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">HelloWorldHandler</span><span class=\"params\">(Object target)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>();</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"before\"</span>);</span><br><span class=\"line\">        Object result=method.invoke(target,args);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"after\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Main.java</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        HelleWorld helleWorld = <span class=\"keyword\">new</span> HelloWorldImplements();</span><br><span class=\"line\">        HelloWorldHandler helloWorldHandler = <span class=\"keyword\">new</span> HelloWorldHandler(helleWorld);</span><br><span class=\"line\">        <span class=\"comment\">//HelleWorld proxy =(HelleWorld) Proxy.newProxyInstance(HelleWorld.class.getClassLoader(), HelloWorldImplements.class.getInterfaces(), helloWorldHandler);</span></span><br><span class=\"line\">        HelleWorld proxy = (HelleWorld) Proxy.newProxyInstance(helleWorld.getClass().getClassLoader(), <span class=\"keyword\">new</span> Class[]&#123;HelleWorld.class&#125;, helloWorldHandler);</span><br><span class=\"line\">        proxy.say(<span class=\"string\">\"fuck the world\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"JDK动态代理和CGLib动态代理的区别\"><a href=\"#JDK动态代理和CGLib动态代理的区别\" class=\"headerlink\" title=\"JDK动态代理和CGLib动态代理的区别\"></a>JDK动态代理和CGLib动态代理的区别</h4><ul>\n<li>jdk动态代理的对象需要实现一个接口，不能对类直接进行代理</li>\n<li>CGLIB可以对类进行代理，基于继承去生成一个子类，在子类里对父类的方法进行覆盖，所以最好不要用final修饰方法</li>\n<li>CGLIB的性能和JDK有所区别</li>\n</ul>\n"},{"title":"Java ArrayList与LinkedList对比","date":"2016-05-28T07:35:04.000Z","_content":"\n## ArrayList\n * 底层是个默认大小为10的数组，所以当size需求大于10时，初始化size的时候大一点。\n * 当ArrayList的写满之后，ArrayList会生成一个更大的数组，大小变为原来的1.5倍。然后将原来数组的数据拷贝过去，因此会占用一定的时间和内存。\n ``` java\n  public void ensureCapacity(int var1) {\n        ++this.modCount;\n        int var2 = this.elementData.length;\n        if(var1 > var2) {\n            Object[] var3 = this.elementData;\n            int var4 = var2 * 3 / 2 + 1;\n            if(var4 < var1) {\n                var4 = var1;\n            }\n     this.elementData = Arrays.copyOf(this.elementData, var4);\n        }\n\n    }\n ```\n \n * 适合随机访问\n \n## LinkedList\n * 底层是List,适用于频繁添加删除元素的情况\n ","source":"_posts/Java-ArrayList与LinkedList对比.md","raw":"---\ntitle: Java ArrayList与LinkedList对比\ndate: 2016-05-28 15:35:04\ntags:\n- 面试\ncategories:\n- Java\n\n---\n\n## ArrayList\n * 底层是个默认大小为10的数组，所以当size需求大于10时，初始化size的时候大一点。\n * 当ArrayList的写满之后，ArrayList会生成一个更大的数组，大小变为原来的1.5倍。然后将原来数组的数据拷贝过去，因此会占用一定的时间和内存。\n ``` java\n  public void ensureCapacity(int var1) {\n        ++this.modCount;\n        int var2 = this.elementData.length;\n        if(var1 > var2) {\n            Object[] var3 = this.elementData;\n            int var4 = var2 * 3 / 2 + 1;\n            if(var4 < var1) {\n                var4 = var1;\n            }\n     this.elementData = Arrays.copyOf(this.elementData, var4);\n        }\n\n    }\n ```\n \n * 适合随机访问\n \n## LinkedList\n * 底层是List,适用于频繁添加删除元素的情况\n ","slug":"Java-ArrayList与LinkedList对比","published":1,"updated":"2016-05-28T11:56:49.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixt6000cbxbo78di9i6u","content":"<h2 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h2><ul>\n<li>底层是个默认大小为10的数组，所以当size需求大于10时，初始化size的时候大一点。</li>\n<li>当ArrayList的写满之后，ArrayList会生成一个更大的数组，大小变为原来的1.5倍。然后将原来数组的数据拷贝过去，因此会占用一定的时间和内存。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> var1)</span> </span>&#123;</span><br><span class=\"line\">      ++<span class=\"keyword\">this</span>.modCount;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> var2 = <span class=\"keyword\">this</span>.elementData.length;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(var1 &gt; var2) &#123;</span><br><span class=\"line\">          Object[] var3 = <span class=\"keyword\">this</span>.elementData;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> var4 = var2 * <span class=\"number\">3</span> / <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(var4 &lt; var1) &#123;</span><br><span class=\"line\">              var4 = var1;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.elementData = Arrays.copyOf(<span class=\"keyword\">this</span>.elementData, var4);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>适合随机访问</li>\n</ul>\n<h2 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h2><ul>\n<li>底层是List,适用于频繁添加删除元素的情况</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"ArrayList\"><a href=\"#ArrayList\" class=\"headerlink\" title=\"ArrayList\"></a>ArrayList</h2><ul>\n<li>底层是个默认大小为10的数组，所以当size需求大于10时，初始化size的时候大一点。</li>\n<li>当ArrayList的写满之后，ArrayList会生成一个更大的数组，大小变为原来的1.5倍。然后将原来数组的数据拷贝过去，因此会占用一定的时间和内存。<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacity</span><span class=\"params\">(<span class=\"keyword\">int</span> var1)</span> </span>&#123;</span><br><span class=\"line\">      ++<span class=\"keyword\">this</span>.modCount;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> var2 = <span class=\"keyword\">this</span>.elementData.length;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(var1 &gt; var2) &#123;</span><br><span class=\"line\">          Object[] var3 = <span class=\"keyword\">this</span>.elementData;</span><br><span class=\"line\">          <span class=\"keyword\">int</span> var4 = var2 * <span class=\"number\">3</span> / <span class=\"number\">2</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(var4 &lt; var1) &#123;</span><br><span class=\"line\">              var4 = var1;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">   <span class=\"keyword\">this</span>.elementData = Arrays.copyOf(<span class=\"keyword\">this</span>.elementData, var4);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>适合随机访问</li>\n</ul>\n<h2 id=\"LinkedList\"><a href=\"#LinkedList\" class=\"headerlink\" title=\"LinkedList\"></a>LinkedList</h2><ul>\n<li>底层是List,适用于频繁添加删除元素的情况</li>\n</ul>\n"},{"title":"JVM性能调优","date":"2016-07-18T02:25:47.000Z","_content":"> 转自：http://my.oschina.net/chape/blog/200790\nhttp://www.cnblogs.com/gw811/archive/2012/10/19/2730258.html\n\n### 1) Heap Size\n\n-Xmx ---最大Heap Size，即上图的Total size（包括Eden+form+to，Tenured，不包含Perm，见上图），限制了年轻代和年老代的可分配最大值；\n\n-Xms ---初始化分配的Heap Size\n\n生产环境中ms一般设置成跟mx相等，因为若ms不等于mx那么在某些场景下JVM可能需要对Heap Size进行频繁的扩展和收缩，增加处理时间；\n### 2）New/Young Generation Size\n\n-Xmn ---最大年轻代大小，即上图中的Eden+S0+S1+Virtual\n\n-XX:NewSize ---初始化年轻代大小，即上图中的Eden+S0+S1，在只设置了-Xmn不设置-XX:NewSize的情况下，NewSize等于mn。\n\n生产环境中一般只需设置-Xmn或者设置mn和NewSize相等，理由和HeapSize的设置一样，避免容量震荡消耗资源；\n\n### 3）Old Generation Size （Tenured）\n\n-XX:NewRatio --- Old Size/New Size，通过年老代和年轻代的比例和Heap Size就可以算出年老代的大小。一般默认为8，若Heap Size为1024m，则 NewSize=HeapSize/(NewRatio+1)=114m，OldSize=HeapSize-NewSize=910m；\n\n注意：-Xmn的优先级比-XX:NewRatio高，若-Xmn已指定，则OldSize=HeapSize-NewSize，无需再按比例计算。生产环境中一般只需指定-Xmn就足够了。\n\n### 4）Eden和S0、S1\n\n-XX:SurvivorRatio --- Eden/S0，即 Eden区和S0的比例，默认为8，若NewSize为114m，则S0=NewSize/(SurvivorRatio+2)=11.4m;\n\nS0==S1，S0、S1的职能是一模一样的，又叫做From space和To space，在每一次minor gc后角色会交换。\n\n注意：-XX类型的选项在不同的JDK版本或实现中定义可能有所区别，在近日的实践中发现，\n\n在Linux jdk_1_5_0_10_x86版本中，SurvivorRatio=(YoungSize/S0)，而Linux jdk_1_5_0_20_x64版本中，SurvivorRatio=(Eden/S0)\n\n所以，我们在实际的工程实践中还是应该用jmap -heap输出的jvm内存结构信息为准，不要想当然。\n\n### 5）Permanent Generation Size\n\n-XX:MaxPermSize ---最大持久代大小，默认为64m；\n\n-XX:PermSize ---初始化持久代大小，默认为16m；\n\n生产环境中一般设置MaxPermSize和PermSize相等，理由和HeapSize的设置一样，避免容量震荡消耗资源；\n\n当应用引用的类比较多或者应用了一些动态类生产技术时应该加大该区的值，一般256m对服务器程序都很足够了。\n\n\n### 6）Thread Stack Size\n\n-Xss ---线程堆栈大小，一般用于存放方法入口参数和返回值，以及原子类型的本地变量（即方法内部变量）；\n\n一般可设置为128k.\n\n### 7）Direct Memory Size\n\n-XX:MaxDirectMemorySize ---direct byte buffer用到的本地内存，在本blog的一篇《xsocket内存泄漏》文章中介绍过该参数的作用。默认跟mx相等，所以生产环境中一般不设置mx大于物理内存的一半。\n\n### GC过程  \n\n在讲述GC过程前我先解释一下JVM的两个控制参数：\n\n-XX:TargetSurvivorRatio --- Survivor Space最大使用率，若存放对象的总大小超过该值，将引起对象向Old区迁移；\n\n-XX:MaxTenuringThreshold --- Young区对象的最大任期阀值，即可经历minor gc的次数，超过该次数的对象直接迁移到Old区；\n\n实际的TenuringThreshold由JVM通过Survivor Space的占用率和TargetSurvivorRatio动态计算，详情请查看参考资料。\n\n### 引用计数算法\n\n　　很多教科书判断对象是否存活的算法是这样的：给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器都为0的对象就是不可能再被使用的。笔者面试过很多的应届生和一些有多年工作经验的开发人员，他们对于这个问题给予的都是这个答案。\n\n　　客观地说，引用计数算法（Reference Counting）的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法，也有一些比较著名的应用案例，例如微软的COM（Component Object Model）技术、使用ActionScript 3的FlashPlayer、Python语言以及在游戏脚本领域中被广泛应用的Squirrel中都使用了引用计数算法进行内存管理。但是，Java语言中没有选用引用计数算法来管理内存，其中最主要的原因是它很难解决对象之间的相互循环引用的问题。\n　　\n### 根搜索算法\n\n　　在主流的商用程序语言中（Java和C#，甚至包括前面提到的古老的Lisp），都是使用根搜索算法（GC Roots Tracing）判定对象是否存活的。这个算法的基本思路就是通过一系列的名为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连（用图论的话来说就是从GC Roots到这个对象不可达）时，则证明此对象是不可用的。如图3-1所示，对象object 5、object 6、object7虽然互相有关联，但是它们到GC Roots是不可达的，所以它们将会被判定为是可回收的对象。\n\n　　在Java语言里，可作为GC Roots的对象包括下面几种：\n\n　　　　虚拟机栈（栈帧中的本地变量表）中的引用的对象。\n\n　　　　方法区中的类静态属性引用的对象。\n\n　　　　方法区中的常量引用的对象。\n\n　　　　本地方法栈中JNI（即一般说的Native方法）的引用的对象。\n　　　　\n### 引用\n\n　　无论是通过引用计数算法判断对象的引用数量，还是通过根搜索算法判断对象的引用链是否可达，判定对象是否存活都与“引用”有关。在JDK 1.2之前，Java中的引用的定义很传统：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用。这种定义很纯粹，但是太过狭隘，一个对象在这种定义下只有被引用或者没有被引用两种状态，对于如何描述一些“食之无味，弃之可惜”的对象就显得无能为力。我们希望能描述这样一类对象：当内存空间还足够时，则能保留在内存之中；如果内存在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。很多系统的缓存功能都符合这样的应用场景。\n\n　　在JDK 1.2之后，Java对引用的概念进行了扩充，将引用分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（WeakReference）、虚引用（Phantom Reference）四种，这四种引用强度依次逐渐减弱。\n\n　　强引用就是指在程序代码之中普遍存在的，类似“Object obj = new Object()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。\n\n　　软引用用来描述一些还有用，但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中并进行第二次回收。如果这次回收还是没有足够的内存，才会抛出内存溢出异常。在JDK 1.2之后，提供了SoftReference类来实现软引用。\n\n　　弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2之后，提供了WeakReference类来实现弱引用。\n\n　　虚引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是希望能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2之后，提供了PhantomReference类来实现虚引用。\n　　\n","source":"_posts/JVM性能调优.md","raw":"---\ntitle: JVM性能调优\ndate: 2016-07-18 10:25:47\ntags:\n- JVM\ncategories:\n- Java\n\n---\n> 转自：http://my.oschina.net/chape/blog/200790\nhttp://www.cnblogs.com/gw811/archive/2012/10/19/2730258.html\n\n### 1) Heap Size\n\n-Xmx ---最大Heap Size，即上图的Total size（包括Eden+form+to，Tenured，不包含Perm，见上图），限制了年轻代和年老代的可分配最大值；\n\n-Xms ---初始化分配的Heap Size\n\n生产环境中ms一般设置成跟mx相等，因为若ms不等于mx那么在某些场景下JVM可能需要对Heap Size进行频繁的扩展和收缩，增加处理时间；\n### 2）New/Young Generation Size\n\n-Xmn ---最大年轻代大小，即上图中的Eden+S0+S1+Virtual\n\n-XX:NewSize ---初始化年轻代大小，即上图中的Eden+S0+S1，在只设置了-Xmn不设置-XX:NewSize的情况下，NewSize等于mn。\n\n生产环境中一般只需设置-Xmn或者设置mn和NewSize相等，理由和HeapSize的设置一样，避免容量震荡消耗资源；\n\n### 3）Old Generation Size （Tenured）\n\n-XX:NewRatio --- Old Size/New Size，通过年老代和年轻代的比例和Heap Size就可以算出年老代的大小。一般默认为8，若Heap Size为1024m，则 NewSize=HeapSize/(NewRatio+1)=114m，OldSize=HeapSize-NewSize=910m；\n\n注意：-Xmn的优先级比-XX:NewRatio高，若-Xmn已指定，则OldSize=HeapSize-NewSize，无需再按比例计算。生产环境中一般只需指定-Xmn就足够了。\n\n### 4）Eden和S0、S1\n\n-XX:SurvivorRatio --- Eden/S0，即 Eden区和S0的比例，默认为8，若NewSize为114m，则S0=NewSize/(SurvivorRatio+2)=11.4m;\n\nS0==S1，S0、S1的职能是一模一样的，又叫做From space和To space，在每一次minor gc后角色会交换。\n\n注意：-XX类型的选项在不同的JDK版本或实现中定义可能有所区别，在近日的实践中发现，\n\n在Linux jdk_1_5_0_10_x86版本中，SurvivorRatio=(YoungSize/S0)，而Linux jdk_1_5_0_20_x64版本中，SurvivorRatio=(Eden/S0)\n\n所以，我们在实际的工程实践中还是应该用jmap -heap输出的jvm内存结构信息为准，不要想当然。\n\n### 5）Permanent Generation Size\n\n-XX:MaxPermSize ---最大持久代大小，默认为64m；\n\n-XX:PermSize ---初始化持久代大小，默认为16m；\n\n生产环境中一般设置MaxPermSize和PermSize相等，理由和HeapSize的设置一样，避免容量震荡消耗资源；\n\n当应用引用的类比较多或者应用了一些动态类生产技术时应该加大该区的值，一般256m对服务器程序都很足够了。\n\n\n### 6）Thread Stack Size\n\n-Xss ---线程堆栈大小，一般用于存放方法入口参数和返回值，以及原子类型的本地变量（即方法内部变量）；\n\n一般可设置为128k.\n\n### 7）Direct Memory Size\n\n-XX:MaxDirectMemorySize ---direct byte buffer用到的本地内存，在本blog的一篇《xsocket内存泄漏》文章中介绍过该参数的作用。默认跟mx相等，所以生产环境中一般不设置mx大于物理内存的一半。\n\n### GC过程  \n\n在讲述GC过程前我先解释一下JVM的两个控制参数：\n\n-XX:TargetSurvivorRatio --- Survivor Space最大使用率，若存放对象的总大小超过该值，将引起对象向Old区迁移；\n\n-XX:MaxTenuringThreshold --- Young区对象的最大任期阀值，即可经历minor gc的次数，超过该次数的对象直接迁移到Old区；\n\n实际的TenuringThreshold由JVM通过Survivor Space的占用率和TargetSurvivorRatio动态计算，详情请查看参考资料。\n\n### 引用计数算法\n\n　　很多教科书判断对象是否存活的算法是这样的：给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器都为0的对象就是不可能再被使用的。笔者面试过很多的应届生和一些有多年工作经验的开发人员，他们对于这个问题给予的都是这个答案。\n\n　　客观地说，引用计数算法（Reference Counting）的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法，也有一些比较著名的应用案例，例如微软的COM（Component Object Model）技术、使用ActionScript 3的FlashPlayer、Python语言以及在游戏脚本领域中被广泛应用的Squirrel中都使用了引用计数算法进行内存管理。但是，Java语言中没有选用引用计数算法来管理内存，其中最主要的原因是它很难解决对象之间的相互循环引用的问题。\n　　\n### 根搜索算法\n\n　　在主流的商用程序语言中（Java和C#，甚至包括前面提到的古老的Lisp），都是使用根搜索算法（GC Roots Tracing）判定对象是否存活的。这个算法的基本思路就是通过一系列的名为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连（用图论的话来说就是从GC Roots到这个对象不可达）时，则证明此对象是不可用的。如图3-1所示，对象object 5、object 6、object7虽然互相有关联，但是它们到GC Roots是不可达的，所以它们将会被判定为是可回收的对象。\n\n　　在Java语言里，可作为GC Roots的对象包括下面几种：\n\n　　　　虚拟机栈（栈帧中的本地变量表）中的引用的对象。\n\n　　　　方法区中的类静态属性引用的对象。\n\n　　　　方法区中的常量引用的对象。\n\n　　　　本地方法栈中JNI（即一般说的Native方法）的引用的对象。\n　　　　\n### 引用\n\n　　无论是通过引用计数算法判断对象的引用数量，还是通过根搜索算法判断对象的引用链是否可达，判定对象是否存活都与“引用”有关。在JDK 1.2之前，Java中的引用的定义很传统：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用。这种定义很纯粹，但是太过狭隘，一个对象在这种定义下只有被引用或者没有被引用两种状态，对于如何描述一些“食之无味，弃之可惜”的对象就显得无能为力。我们希望能描述这样一类对象：当内存空间还足够时，则能保留在内存之中；如果内存在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。很多系统的缓存功能都符合这样的应用场景。\n\n　　在JDK 1.2之后，Java对引用的概念进行了扩充，将引用分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（WeakReference）、虚引用（Phantom Reference）四种，这四种引用强度依次逐渐减弱。\n\n　　强引用就是指在程序代码之中普遍存在的，类似“Object obj = new Object()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。\n\n　　软引用用来描述一些还有用，但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中并进行第二次回收。如果这次回收还是没有足够的内存，才会抛出内存溢出异常。在JDK 1.2之后，提供了SoftReference类来实现软引用。\n\n　　弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2之后，提供了WeakReference类来实现弱引用。\n\n　　虚引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是希望能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2之后，提供了PhantomReference类来实现虚引用。\n　　\n","slug":"JVM性能调优","published":1,"updated":"2016-07-18T11:52:02.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixtb000ebxbookc1uxqp","content":"<blockquote>\n<p>转自：<a href=\"http://my.oschina.net/chape/blog/200790\" target=\"_blank\" rel=\"external\">http://my.oschina.net/chape/blog/200790</a><br><a href=\"http://www.cnblogs.com/gw811/archive/2012/10/19/2730258.html\" target=\"_blank\" rel=\"external\">http://www.cnblogs.com/gw811/archive/2012/10/19/2730258.html</a></p>\n</blockquote>\n<h3 id=\"1-Heap-Size\"><a href=\"#1-Heap-Size\" class=\"headerlink\" title=\"1) Heap Size\"></a>1) Heap Size</h3><p>-Xmx —最大Heap Size，即上图的Total size（包括Eden+form+to，Tenured，不包含Perm，见上图），限制了年轻代和年老代的可分配最大值；</p>\n<p>-Xms —初始化分配的Heap Size</p>\n<p>生产环境中ms一般设置成跟mx相等，因为若ms不等于mx那么在某些场景下JVM可能需要对Heap Size进行频繁的扩展和收缩，增加处理时间；</p>\n<h3 id=\"2）New-Young-Generation-Size\"><a href=\"#2）New-Young-Generation-Size\" class=\"headerlink\" title=\"2）New/Young Generation Size\"></a>2）New/Young Generation Size</h3><p>-Xmn —最大年轻代大小，即上图中的Eden+S0+S1+Virtual</p>\n<p>-XX:NewSize —初始化年轻代大小，即上图中的Eden+S0+S1，在只设置了-Xmn不设置-XX:NewSize的情况下，NewSize等于mn。</p>\n<p>生产环境中一般只需设置-Xmn或者设置mn和NewSize相等，理由和HeapSize的设置一样，避免容量震荡消耗资源；</p>\n<h3 id=\"3）Old-Generation-Size-（Tenured）\"><a href=\"#3）Old-Generation-Size-（Tenured）\" class=\"headerlink\" title=\"3）Old Generation Size （Tenured）\"></a>3）Old Generation Size （Tenured）</h3><p>-XX:NewRatio — Old Size/New Size，通过年老代和年轻代的比例和Heap Size就可以算出年老代的大小。一般默认为8，若Heap Size为1024m，则 NewSize=HeapSize/(NewRatio+1)=114m，OldSize=HeapSize-NewSize=910m；</p>\n<p>注意：-Xmn的优先级比-XX:NewRatio高，若-Xmn已指定，则OldSize=HeapSize-NewSize，无需再按比例计算。生产环境中一般只需指定-Xmn就足够了。</p>\n<h3 id=\"4）Eden和S0、S1\"><a href=\"#4）Eden和S0、S1\" class=\"headerlink\" title=\"4）Eden和S0、S1\"></a>4）Eden和S0、S1</h3><p>-XX:SurvivorRatio — Eden/S0，即 Eden区和S0的比例，默认为8，若NewSize为114m，则S0=NewSize/(SurvivorRatio+2)=11.4m;</p>\n<p>S0==S1，S0、S1的职能是一模一样的，又叫做From space和To space，在每一次minor gc后角色会交换。</p>\n<p>注意：-XX类型的选项在不同的JDK版本或实现中定义可能有所区别，在近日的实践中发现，</p>\n<p>在Linux jdk_1_5_0_10_x86版本中，SurvivorRatio=(YoungSize/S0)，而Linux jdk_1_5_0_20_x64版本中，SurvivorRatio=(Eden/S0)</p>\n<p>所以，我们在实际的工程实践中还是应该用jmap -heap输出的jvm内存结构信息为准，不要想当然。</p>\n<h3 id=\"5）Permanent-Generation-Size\"><a href=\"#5）Permanent-Generation-Size\" class=\"headerlink\" title=\"5）Permanent Generation Size\"></a>5）Permanent Generation Size</h3><p>-XX:MaxPermSize —最大持久代大小，默认为64m；</p>\n<p>-XX:PermSize —初始化持久代大小，默认为16m；</p>\n<p>生产环境中一般设置MaxPermSize和PermSize相等，理由和HeapSize的设置一样，避免容量震荡消耗资源；</p>\n<p>当应用引用的类比较多或者应用了一些动态类生产技术时应该加大该区的值，一般256m对服务器程序都很足够了。</p>\n<h3 id=\"6）Thread-Stack-Size\"><a href=\"#6）Thread-Stack-Size\" class=\"headerlink\" title=\"6）Thread Stack Size\"></a>6）Thread Stack Size</h3><p>-Xss —线程堆栈大小，一般用于存放方法入口参数和返回值，以及原子类型的本地变量（即方法内部变量）；</p>\n<p>一般可设置为128k.</p>\n<h3 id=\"7）Direct-Memory-Size\"><a href=\"#7）Direct-Memory-Size\" class=\"headerlink\" title=\"7）Direct Memory Size\"></a>7）Direct Memory Size</h3><p>-XX:MaxDirectMemorySize —direct byte buffer用到的本地内存，在本blog的一篇《xsocket内存泄漏》文章中介绍过该参数的作用。默认跟mx相等，所以生产环境中一般不设置mx大于物理内存的一半。</p>\n<h3 id=\"GC过程\"><a href=\"#GC过程\" class=\"headerlink\" title=\"GC过程\"></a>GC过程</h3><p>在讲述GC过程前我先解释一下JVM的两个控制参数：</p>\n<p>-XX:TargetSurvivorRatio — Survivor Space最大使用率，若存放对象的总大小超过该值，将引起对象向Old区迁移；</p>\n<p>-XX:MaxTenuringThreshold — Young区对象的最大任期阀值，即可经历minor gc的次数，超过该次数的对象直接迁移到Old区；</p>\n<p>实际的TenuringThreshold由JVM通过Survivor Space的占用率和TargetSurvivorRatio动态计算，详情请查看参考资料。</p>\n<h3 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h3><p>　　很多教科书判断对象是否存活的算法是这样的：给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器都为0的对象就是不可能再被使用的。笔者面试过很多的应届生和一些有多年工作经验的开发人员，他们对于这个问题给予的都是这个答案。</p>\n<p>　　客观地说，引用计数算法（Reference Counting）的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法，也有一些比较著名的应用案例，例如微软的COM（Component Object Model）技术、使用ActionScript 3的FlashPlayer、Python语言以及在游戏脚本领域中被广泛应用的Squirrel中都使用了引用计数算法进行内存管理。但是，Java语言中没有选用引用计数算法来管理内存，其中最主要的原因是它很难解决对象之间的相互循环引用的问题。\n　　</p>\n<h3 id=\"根搜索算法\"><a href=\"#根搜索算法\" class=\"headerlink\" title=\"根搜索算法\"></a>根搜索算法</h3><p>　　在主流的商用程序语言中（Java和C#，甚至包括前面提到的古老的Lisp），都是使用根搜索算法（GC Roots Tracing）判定对象是否存活的。这个算法的基本思路就是通过一系列的名为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连（用图论的话来说就是从GC Roots到这个对象不可达）时，则证明此对象是不可用的。如图3-1所示，对象object 5、object 6、object7虽然互相有关联，但是它们到GC Roots是不可达的，所以它们将会被判定为是可回收的对象。</p>\n<p>　　在Java语言里，可作为GC Roots的对象包括下面几种：</p>\n<p>　　　　虚拟机栈（栈帧中的本地变量表）中的引用的对象。</p>\n<p>　　　　方法区中的类静态属性引用的对象。</p>\n<p>　　　　方法区中的常量引用的对象。</p>\n<p>　　　　本地方法栈中JNI（即一般说的Native方法）的引用的对象。\n　　　　</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>　　无论是通过引用计数算法判断对象的引用数量，还是通过根搜索算法判断对象的引用链是否可达，判定对象是否存活都与“引用”有关。在JDK 1.2之前，Java中的引用的定义很传统：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用。这种定义很纯粹，但是太过狭隘，一个对象在这种定义下只有被引用或者没有被引用两种状态，对于如何描述一些“食之无味，弃之可惜”的对象就显得无能为力。我们希望能描述这样一类对象：当内存空间还足够时，则能保留在内存之中；如果内存在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。很多系统的缓存功能都符合这样的应用场景。</p>\n<p>　　在JDK 1.2之后，Java对引用的概念进行了扩充，将引用分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（WeakReference）、虚引用（Phantom Reference）四种，这四种引用强度依次逐渐减弱。</p>\n<p>　　强引用就是指在程序代码之中普遍存在的，类似“Object obj = new Object()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。</p>\n<p>　　软引用用来描述一些还有用，但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中并进行第二次回收。如果这次回收还是没有足够的内存，才会抛出内存溢出异常。在JDK 1.2之后，提供了SoftReference类来实现软引用。</p>\n<p>　　弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2之后，提供了WeakReference类来实现弱引用。</p>\n<p>　　虚引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是希望能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2之后，提供了PhantomReference类来实现虚引用。\n　　</p>\n","excerpt":"","more":"<blockquote>\n<p>转自：<a href=\"http://my.oschina.net/chape/blog/200790\">http://my.oschina.net/chape/blog/200790</a><br><a href=\"http://www.cnblogs.com/gw811/archive/2012/10/19/2730258.html\">http://www.cnblogs.com/gw811/archive/2012/10/19/2730258.html</a></p>\n</blockquote>\n<h3 id=\"1-Heap-Size\"><a href=\"#1-Heap-Size\" class=\"headerlink\" title=\"1) Heap Size\"></a>1) Heap Size</h3><p>-Xmx —最大Heap Size，即上图的Total size（包括Eden+form+to，Tenured，不包含Perm，见上图），限制了年轻代和年老代的可分配最大值；</p>\n<p>-Xms —初始化分配的Heap Size</p>\n<p>生产环境中ms一般设置成跟mx相等，因为若ms不等于mx那么在某些场景下JVM可能需要对Heap Size进行频繁的扩展和收缩，增加处理时间；</p>\n<h3 id=\"2）New-Young-Generation-Size\"><a href=\"#2）New-Young-Generation-Size\" class=\"headerlink\" title=\"2）New/Young Generation Size\"></a>2）New/Young Generation Size</h3><p>-Xmn —最大年轻代大小，即上图中的Eden+S0+S1+Virtual</p>\n<p>-XX:NewSize —初始化年轻代大小，即上图中的Eden+S0+S1，在只设置了-Xmn不设置-XX:NewSize的情况下，NewSize等于mn。</p>\n<p>生产环境中一般只需设置-Xmn或者设置mn和NewSize相等，理由和HeapSize的设置一样，避免容量震荡消耗资源；</p>\n<h3 id=\"3）Old-Generation-Size-（Tenured）\"><a href=\"#3）Old-Generation-Size-（Tenured）\" class=\"headerlink\" title=\"3）Old Generation Size （Tenured）\"></a>3）Old Generation Size （Tenured）</h3><p>-XX:NewRatio — Old Size/New Size，通过年老代和年轻代的比例和Heap Size就可以算出年老代的大小。一般默认为8，若Heap Size为1024m，则 NewSize=HeapSize/(NewRatio+1)=114m，OldSize=HeapSize-NewSize=910m；</p>\n<p>注意：-Xmn的优先级比-XX:NewRatio高，若-Xmn已指定，则OldSize=HeapSize-NewSize，无需再按比例计算。生产环境中一般只需指定-Xmn就足够了。</p>\n<h3 id=\"4）Eden和S0、S1\"><a href=\"#4）Eden和S0、S1\" class=\"headerlink\" title=\"4）Eden和S0、S1\"></a>4）Eden和S0、S1</h3><p>-XX:SurvivorRatio — Eden/S0，即 Eden区和S0的比例，默认为8，若NewSize为114m，则S0=NewSize/(SurvivorRatio+2)=11.4m;</p>\n<p>S0==S1，S0、S1的职能是一模一样的，又叫做From space和To space，在每一次minor gc后角色会交换。</p>\n<p>注意：-XX类型的选项在不同的JDK版本或实现中定义可能有所区别，在近日的实践中发现，</p>\n<p>在Linux jdk_1_5_0_10_x86版本中，SurvivorRatio=(YoungSize/S0)，而Linux jdk_1_5_0_20_x64版本中，SurvivorRatio=(Eden/S0)</p>\n<p>所以，我们在实际的工程实践中还是应该用jmap -heap输出的jvm内存结构信息为准，不要想当然。</p>\n<h3 id=\"5）Permanent-Generation-Size\"><a href=\"#5）Permanent-Generation-Size\" class=\"headerlink\" title=\"5）Permanent Generation Size\"></a>5）Permanent Generation Size</h3><p>-XX:MaxPermSize —最大持久代大小，默认为64m；</p>\n<p>-XX:PermSize —初始化持久代大小，默认为16m；</p>\n<p>生产环境中一般设置MaxPermSize和PermSize相等，理由和HeapSize的设置一样，避免容量震荡消耗资源；</p>\n<p>当应用引用的类比较多或者应用了一些动态类生产技术时应该加大该区的值，一般256m对服务器程序都很足够了。</p>\n<h3 id=\"6）Thread-Stack-Size\"><a href=\"#6）Thread-Stack-Size\" class=\"headerlink\" title=\"6）Thread Stack Size\"></a>6）Thread Stack Size</h3><p>-Xss —线程堆栈大小，一般用于存放方法入口参数和返回值，以及原子类型的本地变量（即方法内部变量）；</p>\n<p>一般可设置为128k.</p>\n<h3 id=\"7）Direct-Memory-Size\"><a href=\"#7）Direct-Memory-Size\" class=\"headerlink\" title=\"7）Direct Memory Size\"></a>7）Direct Memory Size</h3><p>-XX:MaxDirectMemorySize —direct byte buffer用到的本地内存，在本blog的一篇《xsocket内存泄漏》文章中介绍过该参数的作用。默认跟mx相等，所以生产环境中一般不设置mx大于物理内存的一半。</p>\n<h3 id=\"GC过程\"><a href=\"#GC过程\" class=\"headerlink\" title=\"GC过程\"></a>GC过程</h3><p>在讲述GC过程前我先解释一下JVM的两个控制参数：</p>\n<p>-XX:TargetSurvivorRatio — Survivor Space最大使用率，若存放对象的总大小超过该值，将引起对象向Old区迁移；</p>\n<p>-XX:MaxTenuringThreshold — Young区对象的最大任期阀值，即可经历minor gc的次数，超过该次数的对象直接迁移到Old区；</p>\n<p>实际的TenuringThreshold由JVM通过Survivor Space的占用率和TargetSurvivorRatio动态计算，详情请查看参考资料。</p>\n<h3 id=\"引用计数算法\"><a href=\"#引用计数算法\" class=\"headerlink\" title=\"引用计数算法\"></a>引用计数算法</h3><p>　　很多教科书判断对象是否存活的算法是这样的：给对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加1；当引用失效时，计数器值就减1；任何时刻计数器都为0的对象就是不可能再被使用的。笔者面试过很多的应届生和一些有多年工作经验的开发人员，他们对于这个问题给予的都是这个答案。</p>\n<p>　　客观地说，引用计数算法（Reference Counting）的实现简单，判定效率也很高，在大部分情况下它都是一个不错的算法，也有一些比较著名的应用案例，例如微软的COM（Component Object Model）技术、使用ActionScript 3的FlashPlayer、Python语言以及在游戏脚本领域中被广泛应用的Squirrel中都使用了引用计数算法进行内存管理。但是，Java语言中没有选用引用计数算法来管理内存，其中最主要的原因是它很难解决对象之间的相互循环引用的问题。\n　　</p>\n<h3 id=\"根搜索算法\"><a href=\"#根搜索算法\" class=\"headerlink\" title=\"根搜索算法\"></a>根搜索算法</h3><p>　　在主流的商用程序语言中（Java和C#，甚至包括前面提到的古老的Lisp），都是使用根搜索算法（GC Roots Tracing）判定对象是否存活的。这个算法的基本思路就是通过一系列的名为“GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链（Reference Chain），当一个对象到GC Roots没有任何引用链相连（用图论的话来说就是从GC Roots到这个对象不可达）时，则证明此对象是不可用的。如图3-1所示，对象object 5、object 6、object7虽然互相有关联，但是它们到GC Roots是不可达的，所以它们将会被判定为是可回收的对象。</p>\n<p>　　在Java语言里，可作为GC Roots的对象包括下面几种：</p>\n<p>　　　　虚拟机栈（栈帧中的本地变量表）中的引用的对象。</p>\n<p>　　　　方法区中的类静态属性引用的对象。</p>\n<p>　　　　方法区中的常量引用的对象。</p>\n<p>　　　　本地方法栈中JNI（即一般说的Native方法）的引用的对象。\n　　　　</p>\n<h3 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h3><p>　　无论是通过引用计数算法判断对象的引用数量，还是通过根搜索算法判断对象的引用链是否可达，判定对象是否存活都与“引用”有关。在JDK 1.2之前，Java中的引用的定义很传统：如果reference类型的数据中存储的数值代表的是另外一块内存的起始地址，就称这块内存代表着一个引用。这种定义很纯粹，但是太过狭隘，一个对象在这种定义下只有被引用或者没有被引用两种状态，对于如何描述一些“食之无味，弃之可惜”的对象就显得无能为力。我们希望能描述这样一类对象：当内存空间还足够时，则能保留在内存之中；如果内存在进行垃圾收集后还是非常紧张，则可以抛弃这些对象。很多系统的缓存功能都符合这样的应用场景。</p>\n<p>　　在JDK 1.2之后，Java对引用的概念进行了扩充，将引用分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（WeakReference）、虚引用（Phantom Reference）四种，这四种引用强度依次逐渐减弱。</p>\n<p>　　强引用就是指在程序代码之中普遍存在的，类似“Object obj = new Object()”这类的引用，只要强引用还存在，垃圾收集器永远不会回收掉被引用的对象。</p>\n<p>　　软引用用来描述一些还有用，但并非必需的对象。对于软引用关联着的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中并进行第二次回收。如果这次回收还是没有足够的内存，才会抛出内存溢出异常。在JDK 1.2之后，提供了SoftReference类来实现软引用。</p>\n<p>　　弱引用也是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾收集发生之前。当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2之后，提供了WeakReference类来实现弱引用。</p>\n<p>　　虚引用也称为幽灵引用或者幻影引用，它是最弱的一种引用关系。一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的就是希望能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2之后，提供了PhantomReference类来实现虚引用。\n　　</p>\n"},{"title":"Java虚拟机的理解","date":"2016-05-29T08:59:58.000Z","_content":"\n## java虚拟机内存结构\n\n   java虚拟机规范规定的java虚拟机内存其实就是java虚拟机运行时数据区，其架构如下：\n  ![1](/uploads/7.jmm.png \"Java内存模型\")\n\n  其中方法区和堆是由所有线程共享的数据区，Java虚拟机栈，本地方法栈和程序计数器是线程隔离的数据区。\n\n1. 程序计数器：\n\n    是一块较小的内存空间，其作用可以看作是当前线程所执行的字节码的行号指示器，字节码解析器工作时通过改变程序计数器的值来选取下一条需要执行的字节码指令。程序的分支、循环、跳转、异常处理以及线程恢复等基础功能都是依赖程序计数器来完成。\n\n    Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间片来实现，在任何一个时刻，一个处理器只会执行一条线程指令，因此，为了确保线程切换之后能恢复到正确的执行位置，每条线程都需要一个独立的程序计数器，因此程序计数器是线程私有的内存。\n\n    程序计数器是java虚拟机中唯一一个没有规定任何内存溢出OutOfMemoryError的内存区域。\n\n2. java虚拟机栈：\n\n    Java虚拟机栈也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是java方法执行的内存模型：每个方法被执行时都会同时创建一个栈帧用于存放局部变量表、操作数栈、动态连接和方法出口等信息。每个方法被调用直至执行完成过程，就对应着一个栈帧在虚拟机中从入栈到出栈的过程。\n\n    Java虚拟机栈的局部变量表存放了编译器可知的8种java基本类型数据、对象引用(注意不是对象实例本身)、方法返回地址returnAddress。\n\n    Java虚拟机栈的局部变量表空间单位是槽(Slot)，其中64位长度的double和long类型会占用两个slot，其余的数据类型只占用一个slot。局部变量表所需内存空间在编译期间完成分配，当进入一个方法时，该方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。\n\n    Java虚拟机栈有两种异常状况：如果线程请求的栈深度大于虚拟机所允许的最大深度时，抛出StackOverflowError异常；如果虚拟机栈可以动态扩展，当扩展时无法申请到足够内存时会抛出OutOfMemoryError异常。\n\n3. 本地方法栈：\n\n    本地方法栈与java虚拟机栈作用非常类似，其区别是：java虚拟机栈是为虚拟机执行java方法服务，而本地方法栈是为虚拟机调用的操作系统本地方法服务。\n\n    Java虚拟机规范没有对本地方法栈的实现和数据结构做强制规定，Sun HotSpot虚拟机直接把java虚拟机栈和本地方法栈合二为一。\n\n    与java虚拟机栈类似，本地方法栈也会抛出StackOverflowError异常和OutOfMemoryError异常。\n\n4. 堆：\n\n    堆是java虚拟机所管理的内存区域中最大一块，java堆是被所有线程所共享的一块内存区域，在java虚拟机启动时创建，堆内存的唯一目的就是存放对象实例。几乎所有的对象实例都是在堆分配内存。\n\n    Java堆是垃圾收集器管理的主要区域，从垃圾回收的角度看，由于现在的垃圾收集器基本都采用的是分代收集算法，因此java堆还可以初步细分为新生代和年老代。\n\n    Java虚拟机规范规定，堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。在实现上即可以是固定大小的，也可以是可动态扩展的。如果在堆中没有内存完成实例分配，并且堆大小也无法在扩展时，将会抛出OutOfMemoryError异常。\n\n5. 方法区：\n\n    方法区与堆一样，是被各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。虽然java虚拟机规范把方法区描述为堆的一个逻辑部分，但是方法区却有一个别名叫Non-Heap(非堆)。\n\n    Sun HotSpot虚拟机把方法区叫永久代(Permanent Generation)，方法区中最重要的部分是运行时常量池。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面变量、符号引用、直接引用等，这些内容将在类加载后存放到方法区的运行时常量池中，另外在运行期间也可以将新的常量存放到常量池中，如String的intern()方法。\n\n    方法区和运行时常量池在无法满足内存分配时，也会抛出OutOfMemoryError异常。\n\n6. 直接内存：\n\n    直接内存并不是java虚拟机运行时数据区的一部分，也不是java虚拟机规范中定义的内存区域，但是在java开发中还是会使用到。\n\n    JDK1.4中新引入的NIO(new I/O)，引入了一种基于通道(Channel)和缓冲区(Buffer)的I/O方式，可以使用操作系统本地方法库直接分配堆外内存，然后通过一个存储在java堆里面的DirectByteBuffer对象作为堆外直接内存的引用进行操作，避免了java堆内存和本地直接内存间的数据拷贝，可以显著提高性能。\n\n    虽然直接内存并不直接受到java虚拟机内存影响，但是如果java虚拟机各个内存区域总和大于物理内存限制，从而导致直接内存不足，动态扩展时也会抛出OutOfMemoryError异常。\n\n    java虚拟机内存结构中的程序计数器、虚拟机栈和本地方法栈这三个区域随线程创建而生，随线程销毁而灭，因此这三个区域的内存分配和回收是确定的，java垃圾收集器重点关注的是java虚拟机的堆内存和方法区内存。\n\n\n## JVM内存Survivor space为什么要有From区和To区\n\n* Survivor的存在意义，就是减少被送到老年代的对象，进而减少Full GC的发生，提高JVM的效率。Survivor的预筛选保证，只有经历16次Minor GC还能在新生代中存活的对象，才会被送到老年代。\n![1](/uploads/1.png \"没有from和to区的情形\")\n\n* 刚刚新建的对象在Eden中，一旦Eden满了，触发一次Minor GC，Eden中的存活对象就会被移动到Survivor区。这样继续循环下去，下一次Eden满了的时候，问题来了，此时进行Minor GC，Eden和Survivor各有一些存活对象，如果此时把Eden区的存活对象硬放到Survivor区，很明显这两部分对象所占有的内存是不连续的，也就导致了内存碎片化。 如果有了from区和to区，永远有一个survivor space是空的，另一个非空的survivor space无碎片空间，保证了空间的连续性。\n\n* 将一些经常访问的对象通过内存移动组织在一起，从而维持尽可能多的内存空间，这种操作称为压缩。\n\n\n\n","source":"_posts/Java虚拟机的理解.md","raw":"---\ntitle: Java虚拟机的理解\ndate: 2016-05-29 16:59:58\ntags:\n- 面试\ncategories:\n- Java\n\n---\n\n## java虚拟机内存结构\n\n   java虚拟机规范规定的java虚拟机内存其实就是java虚拟机运行时数据区，其架构如下：\n  ![1](/uploads/7.jmm.png \"Java内存模型\")\n\n  其中方法区和堆是由所有线程共享的数据区，Java虚拟机栈，本地方法栈和程序计数器是线程隔离的数据区。\n\n1. 程序计数器：\n\n    是一块较小的内存空间，其作用可以看作是当前线程所执行的字节码的行号指示器，字节码解析器工作时通过改变程序计数器的值来选取下一条需要执行的字节码指令。程序的分支、循环、跳转、异常处理以及线程恢复等基础功能都是依赖程序计数器来完成。\n\n    Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间片来实现，在任何一个时刻，一个处理器只会执行一条线程指令，因此，为了确保线程切换之后能恢复到正确的执行位置，每条线程都需要一个独立的程序计数器，因此程序计数器是线程私有的内存。\n\n    程序计数器是java虚拟机中唯一一个没有规定任何内存溢出OutOfMemoryError的内存区域。\n\n2. java虚拟机栈：\n\n    Java虚拟机栈也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是java方法执行的内存模型：每个方法被执行时都会同时创建一个栈帧用于存放局部变量表、操作数栈、动态连接和方法出口等信息。每个方法被调用直至执行完成过程，就对应着一个栈帧在虚拟机中从入栈到出栈的过程。\n\n    Java虚拟机栈的局部变量表存放了编译器可知的8种java基本类型数据、对象引用(注意不是对象实例本身)、方法返回地址returnAddress。\n\n    Java虚拟机栈的局部变量表空间单位是槽(Slot)，其中64位长度的double和long类型会占用两个slot，其余的数据类型只占用一个slot。局部变量表所需内存空间在编译期间完成分配，当进入一个方法时，该方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。\n\n    Java虚拟机栈有两种异常状况：如果线程请求的栈深度大于虚拟机所允许的最大深度时，抛出StackOverflowError异常；如果虚拟机栈可以动态扩展，当扩展时无法申请到足够内存时会抛出OutOfMemoryError异常。\n\n3. 本地方法栈：\n\n    本地方法栈与java虚拟机栈作用非常类似，其区别是：java虚拟机栈是为虚拟机执行java方法服务，而本地方法栈是为虚拟机调用的操作系统本地方法服务。\n\n    Java虚拟机规范没有对本地方法栈的实现和数据结构做强制规定，Sun HotSpot虚拟机直接把java虚拟机栈和本地方法栈合二为一。\n\n    与java虚拟机栈类似，本地方法栈也会抛出StackOverflowError异常和OutOfMemoryError异常。\n\n4. 堆：\n\n    堆是java虚拟机所管理的内存区域中最大一块，java堆是被所有线程所共享的一块内存区域，在java虚拟机启动时创建，堆内存的唯一目的就是存放对象实例。几乎所有的对象实例都是在堆分配内存。\n\n    Java堆是垃圾收集器管理的主要区域，从垃圾回收的角度看，由于现在的垃圾收集器基本都采用的是分代收集算法，因此java堆还可以初步细分为新生代和年老代。\n\n    Java虚拟机规范规定，堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。在实现上即可以是固定大小的，也可以是可动态扩展的。如果在堆中没有内存完成实例分配，并且堆大小也无法在扩展时，将会抛出OutOfMemoryError异常。\n\n5. 方法区：\n\n    方法区与堆一样，是被各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。虽然java虚拟机规范把方法区描述为堆的一个逻辑部分，但是方法区却有一个别名叫Non-Heap(非堆)。\n\n    Sun HotSpot虚拟机把方法区叫永久代(Permanent Generation)，方法区中最重要的部分是运行时常量池。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面变量、符号引用、直接引用等，这些内容将在类加载后存放到方法区的运行时常量池中，另外在运行期间也可以将新的常量存放到常量池中，如String的intern()方法。\n\n    方法区和运行时常量池在无法满足内存分配时，也会抛出OutOfMemoryError异常。\n\n6. 直接内存：\n\n    直接内存并不是java虚拟机运行时数据区的一部分，也不是java虚拟机规范中定义的内存区域，但是在java开发中还是会使用到。\n\n    JDK1.4中新引入的NIO(new I/O)，引入了一种基于通道(Channel)和缓冲区(Buffer)的I/O方式，可以使用操作系统本地方法库直接分配堆外内存，然后通过一个存储在java堆里面的DirectByteBuffer对象作为堆外直接内存的引用进行操作，避免了java堆内存和本地直接内存间的数据拷贝，可以显著提高性能。\n\n    虽然直接内存并不直接受到java虚拟机内存影响，但是如果java虚拟机各个内存区域总和大于物理内存限制，从而导致直接内存不足，动态扩展时也会抛出OutOfMemoryError异常。\n\n    java虚拟机内存结构中的程序计数器、虚拟机栈和本地方法栈这三个区域随线程创建而生，随线程销毁而灭，因此这三个区域的内存分配和回收是确定的，java垃圾收集器重点关注的是java虚拟机的堆内存和方法区内存。\n\n\n## JVM内存Survivor space为什么要有From区和To区\n\n* Survivor的存在意义，就是减少被送到老年代的对象，进而减少Full GC的发生，提高JVM的效率。Survivor的预筛选保证，只有经历16次Minor GC还能在新生代中存活的对象，才会被送到老年代。\n![1](/uploads/1.png \"没有from和to区的情形\")\n\n* 刚刚新建的对象在Eden中，一旦Eden满了，触发一次Minor GC，Eden中的存活对象就会被移动到Survivor区。这样继续循环下去，下一次Eden满了的时候，问题来了，此时进行Minor GC，Eden和Survivor各有一些存活对象，如果此时把Eden区的存活对象硬放到Survivor区，很明显这两部分对象所占有的内存是不连续的，也就导致了内存碎片化。 如果有了from区和to区，永远有一个survivor space是空的，另一个非空的survivor space无碎片空间，保证了空间的连续性。\n\n* 将一些经常访问的对象通过内存移动组织在一起，从而维持尽可能多的内存空间，这种操作称为压缩。\n\n\n\n","slug":"Java虚拟机的理解","published":1,"updated":"2016-07-12T13:10:46.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixth000jbxbobex7tvw5","content":"<h2 id=\"java虚拟机内存结构\"><a href=\"#java虚拟机内存结构\" class=\"headerlink\" title=\"java虚拟机内存结构\"></a>java虚拟机内存结构</h2><p>   java虚拟机规范规定的java虚拟机内存其实就是java虚拟机运行时数据区，其架构如下：<br>  <img src=\"/uploads/7.jmm.png\" alt=\"1\" title=\"Java内存模型\"></p>\n<p>  其中方法区和堆是由所有线程共享的数据区，Java虚拟机栈，本地方法栈和程序计数器是线程隔离的数据区。</p>\n<ol>\n<li><p>程序计数器：</p>\n<p> 是一块较小的内存空间，其作用可以看作是当前线程所执行的字节码的行号指示器，字节码解析器工作时通过改变程序计数器的值来选取下一条需要执行的字节码指令。程序的分支、循环、跳转、异常处理以及线程恢复等基础功能都是依赖程序计数器来完成。</p>\n<p> Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间片来实现，在任何一个时刻，一个处理器只会执行一条线程指令，因此，为了确保线程切换之后能恢复到正确的执行位置，每条线程都需要一个独立的程序计数器，因此程序计数器是线程私有的内存。</p>\n<p> 程序计数器是java虚拟机中唯一一个没有规定任何内存溢出OutOfMemoryError的内存区域。</p>\n</li>\n<li><p>java虚拟机栈：</p>\n<p> Java虚拟机栈也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是java方法执行的内存模型：每个方法被执行时都会同时创建一个栈帧用于存放局部变量表、操作数栈、动态连接和方法出口等信息。每个方法被调用直至执行完成过程，就对应着一个栈帧在虚拟机中从入栈到出栈的过程。</p>\n<p> Java虚拟机栈的局部变量表存放了编译器可知的8种java基本类型数据、对象引用(注意不是对象实例本身)、方法返回地址returnAddress。</p>\n<p> Java虚拟机栈的局部变量表空间单位是槽(Slot)，其中64位长度的double和long类型会占用两个slot，其余的数据类型只占用一个slot。局部变量表所需内存空间在编译期间完成分配，当进入一个方法时，该方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p>\n<p> Java虚拟机栈有两种异常状况：如果线程请求的栈深度大于虚拟机所允许的最大深度时，抛出StackOverflowError异常；如果虚拟机栈可以动态扩展，当扩展时无法申请到足够内存时会抛出OutOfMemoryError异常。</p>\n</li>\n<li><p>本地方法栈：</p>\n<p> 本地方法栈与java虚拟机栈作用非常类似，其区别是：java虚拟机栈是为虚拟机执行java方法服务，而本地方法栈是为虚拟机调用的操作系统本地方法服务。</p>\n<p> Java虚拟机规范没有对本地方法栈的实现和数据结构做强制规定，Sun HotSpot虚拟机直接把java虚拟机栈和本地方法栈合二为一。</p>\n<p> 与java虚拟机栈类似，本地方法栈也会抛出StackOverflowError异常和OutOfMemoryError异常。</p>\n</li>\n<li><p>堆：</p>\n<p> 堆是java虚拟机所管理的内存区域中最大一块，java堆是被所有线程所共享的一块内存区域，在java虚拟机启动时创建，堆内存的唯一目的就是存放对象实例。几乎所有的对象实例都是在堆分配内存。</p>\n<p> Java堆是垃圾收集器管理的主要区域，从垃圾回收的角度看，由于现在的垃圾收集器基本都采用的是分代收集算法，因此java堆还可以初步细分为新生代和年老代。</p>\n<p> Java虚拟机规范规定，堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。在实现上即可以是固定大小的，也可以是可动态扩展的。如果在堆中没有内存完成实例分配，并且堆大小也无法在扩展时，将会抛出OutOfMemoryError异常。</p>\n</li>\n<li><p>方法区：</p>\n<p> 方法区与堆一样，是被各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。虽然java虚拟机规范把方法区描述为堆的一个逻辑部分，但是方法区却有一个别名叫Non-Heap(非堆)。</p>\n<p> Sun HotSpot虚拟机把方法区叫永久代(Permanent Generation)，方法区中最重要的部分是运行时常量池。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面变量、符号引用、直接引用等，这些内容将在类加载后存放到方法区的运行时常量池中，另外在运行期间也可以将新的常量存放到常量池中，如String的intern()方法。</p>\n<p> 方法区和运行时常量池在无法满足内存分配时，也会抛出OutOfMemoryError异常。</p>\n</li>\n<li><p>直接内存：</p>\n<p> 直接内存并不是java虚拟机运行时数据区的一部分，也不是java虚拟机规范中定义的内存区域，但是在java开发中还是会使用到。</p>\n<p> JDK1.4中新引入的NIO(new I/O)，引入了一种基于通道(Channel)和缓冲区(Buffer)的I/O方式，可以使用操作系统本地方法库直接分配堆外内存，然后通过一个存储在java堆里面的DirectByteBuffer对象作为堆外直接内存的引用进行操作，避免了java堆内存和本地直接内存间的数据拷贝，可以显著提高性能。</p>\n<p> 虽然直接内存并不直接受到java虚拟机内存影响，但是如果java虚拟机各个内存区域总和大于物理内存限制，从而导致直接内存不足，动态扩展时也会抛出OutOfMemoryError异常。</p>\n<p> java虚拟机内存结构中的程序计数器、虚拟机栈和本地方法栈这三个区域随线程创建而生，随线程销毁而灭，因此这三个区域的内存分配和回收是确定的，java垃圾收集器重点关注的是java虚拟机的堆内存和方法区内存。</p>\n</li>\n</ol>\n<h2 id=\"JVM内存Survivor-space为什么要有From区和To区\"><a href=\"#JVM内存Survivor-space为什么要有From区和To区\" class=\"headerlink\" title=\"JVM内存Survivor space为什么要有From区和To区\"></a>JVM内存Survivor space为什么要有From区和To区</h2><ul>\n<li><p>Survivor的存在意义，就是减少被送到老年代的对象，进而减少Full GC的发生，提高JVM的效率。Survivor的预筛选保证，只有经历16次Minor GC还能在新生代中存活的对象，才会被送到老年代。<br><img src=\"/uploads/1.png\" alt=\"1\" title=\"没有from和to区的情形\"></p>\n</li>\n<li><p>刚刚新建的对象在Eden中，一旦Eden满了，触发一次Minor GC，Eden中的存活对象就会被移动到Survivor区。这样继续循环下去，下一次Eden满了的时候，问题来了，此时进行Minor GC，Eden和Survivor各有一些存活对象，如果此时把Eden区的存活对象硬放到Survivor区，很明显这两部分对象所占有的内存是不连续的，也就导致了内存碎片化。 如果有了from区和to区，永远有一个survivor space是空的，另一个非空的survivor space无碎片空间，保证了空间的连续性。</p>\n</li>\n<li><p>将一些经常访问的对象通过内存移动组织在一起，从而维持尽可能多的内存空间，这种操作称为压缩。</p>\n</li>\n</ul>\n","excerpt":"","more":"<h2 id=\"java虚拟机内存结构\"><a href=\"#java虚拟机内存结构\" class=\"headerlink\" title=\"java虚拟机内存结构\"></a>java虚拟机内存结构</h2><p>   java虚拟机规范规定的java虚拟机内存其实就是java虚拟机运行时数据区，其架构如下：<br>  <img src=\"/uploads/7.jmm.png\" alt=\"1\" title=\"Java内存模型\"></p>\n<p>  其中方法区和堆是由所有线程共享的数据区，Java虚拟机栈，本地方法栈和程序计数器是线程隔离的数据区。</p>\n<ol>\n<li><p>程序计数器：</p>\n<p> 是一块较小的内存空间，其作用可以看作是当前线程所执行的字节码的行号指示器，字节码解析器工作时通过改变程序计数器的值来选取下一条需要执行的字节码指令。程序的分支、循环、跳转、异常处理以及线程恢复等基础功能都是依赖程序计数器来完成。</p>\n<p> Java虚拟机的多线程是通过线程轮流切换并分配处理器执行时间片来实现，在任何一个时刻，一个处理器只会执行一条线程指令，因此，为了确保线程切换之后能恢复到正确的执行位置，每条线程都需要一个独立的程序计数器，因此程序计数器是线程私有的内存。</p>\n<p> 程序计数器是java虚拟机中唯一一个没有规定任何内存溢出OutOfMemoryError的内存区域。</p>\n</li>\n<li><p>java虚拟机栈：</p>\n<p> Java虚拟机栈也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是java方法执行的内存模型：每个方法被执行时都会同时创建一个栈帧用于存放局部变量表、操作数栈、动态连接和方法出口等信息。每个方法被调用直至执行完成过程，就对应着一个栈帧在虚拟机中从入栈到出栈的过程。</p>\n<p> Java虚拟机栈的局部变量表存放了编译器可知的8种java基本类型数据、对象引用(注意不是对象实例本身)、方法返回地址returnAddress。</p>\n<p> Java虚拟机栈的局部变量表空间单位是槽(Slot)，其中64位长度的double和long类型会占用两个slot，其余的数据类型只占用一个slot。局部变量表所需内存空间在编译期间完成分配，当进入一个方法时，该方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。</p>\n<p> Java虚拟机栈有两种异常状况：如果线程请求的栈深度大于虚拟机所允许的最大深度时，抛出StackOverflowError异常；如果虚拟机栈可以动态扩展，当扩展时无法申请到足够内存时会抛出OutOfMemoryError异常。</p>\n</li>\n<li><p>本地方法栈：</p>\n<p> 本地方法栈与java虚拟机栈作用非常类似，其区别是：java虚拟机栈是为虚拟机执行java方法服务，而本地方法栈是为虚拟机调用的操作系统本地方法服务。</p>\n<p> Java虚拟机规范没有对本地方法栈的实现和数据结构做强制规定，Sun HotSpot虚拟机直接把java虚拟机栈和本地方法栈合二为一。</p>\n<p> 与java虚拟机栈类似，本地方法栈也会抛出StackOverflowError异常和OutOfMemoryError异常。</p>\n</li>\n<li><p>堆：</p>\n<p> 堆是java虚拟机所管理的内存区域中最大一块，java堆是被所有线程所共享的一块内存区域，在java虚拟机启动时创建，堆内存的唯一目的就是存放对象实例。几乎所有的对象实例都是在堆分配内存。</p>\n<p> Java堆是垃圾收集器管理的主要区域，从垃圾回收的角度看，由于现在的垃圾收集器基本都采用的是分代收集算法，因此java堆还可以初步细分为新生代和年老代。</p>\n<p> Java虚拟机规范规定，堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可。在实现上即可以是固定大小的，也可以是可动态扩展的。如果在堆中没有内存完成实例分配，并且堆大小也无法在扩展时，将会抛出OutOfMemoryError异常。</p>\n</li>\n<li><p>方法区：</p>\n<p> 方法区与堆一样，是被各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。虽然java虚拟机规范把方法区描述为堆的一个逻辑部分，但是方法区却有一个别名叫Non-Heap(非堆)。</p>\n<p> Sun HotSpot虚拟机把方法区叫永久代(Permanent Generation)，方法区中最重要的部分是运行时常量池。Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译期生成的各种字面变量、符号引用、直接引用等，这些内容将在类加载后存放到方法区的运行时常量池中，另外在运行期间也可以将新的常量存放到常量池中，如String的intern()方法。</p>\n<p> 方法区和运行时常量池在无法满足内存分配时，也会抛出OutOfMemoryError异常。</p>\n</li>\n<li><p>直接内存：</p>\n<p> 直接内存并不是java虚拟机运行时数据区的一部分，也不是java虚拟机规范中定义的内存区域，但是在java开发中还是会使用到。</p>\n<p> JDK1.4中新引入的NIO(new I/O)，引入了一种基于通道(Channel)和缓冲区(Buffer)的I/O方式，可以使用操作系统本地方法库直接分配堆外内存，然后通过一个存储在java堆里面的DirectByteBuffer对象作为堆外直接内存的引用进行操作，避免了java堆内存和本地直接内存间的数据拷贝，可以显著提高性能。</p>\n<p> 虽然直接内存并不直接受到java虚拟机内存影响，但是如果java虚拟机各个内存区域总和大于物理内存限制，从而导致直接内存不足，动态扩展时也会抛出OutOfMemoryError异常。</p>\n<p> java虚拟机内存结构中的程序计数器、虚拟机栈和本地方法栈这三个区域随线程创建而生，随线程销毁而灭，因此这三个区域的内存分配和回收是确定的，java垃圾收集器重点关注的是java虚拟机的堆内存和方法区内存。</p>\n</li>\n</ol>\n<h2 id=\"JVM内存Survivor-space为什么要有From区和To区\"><a href=\"#JVM内存Survivor-space为什么要有From区和To区\" class=\"headerlink\" title=\"JVM内存Survivor space为什么要有From区和To区\"></a>JVM内存Survivor space为什么要有From区和To区</h2><ul>\n<li><p>Survivor的存在意义，就是减少被送到老年代的对象，进而减少Full GC的发生，提高JVM的效率。Survivor的预筛选保证，只有经历16次Minor GC还能在新生代中存活的对象，才会被送到老年代。<br><img src=\"/uploads/1.png\" alt=\"1\" title=\"没有from和to区的情形\"></p>\n</li>\n<li><p>刚刚新建的对象在Eden中，一旦Eden满了，触发一次Minor GC，Eden中的存活对象就会被移动到Survivor区。这样继续循环下去，下一次Eden满了的时候，问题来了，此时进行Minor GC，Eden和Survivor各有一些存活对象，如果此时把Eden区的存活对象硬放到Survivor区，很明显这两部分对象所占有的内存是不连续的，也就导致了内存碎片化。 如果有了from区和to区，永远有一个survivor space是空的，另一个非空的survivor space无碎片空间，保证了空间的连续性。</p>\n</li>\n<li><p>将一些经常访问的对象通过内存移动组织在一起，从而维持尽可能多的内存空间，这种操作称为压缩。</p>\n</li>\n</ul>\n"},{"title":"maven-resources-plugin:2.6 or one of its dependencies could not be resolved","date":"2016-05-25T13:37:00.000Z","_content":"本猿想把maven默认仓库改成自己文件夹的时候不小心删掉了`` ~/.m2/repository ``里面所有的jar。当再次install时出现下面的错误。\n\n``` bash\n\tjinyaoyuan:maven jinyaoyuan$ mvn install\n\t[INFO] Scanning for projects...\n\t[INFO]                                                                         \n\t[INFO] ------------------------------------------------------------------------\n\t[INFO] Building hello-first SNAPSHOT-0.0.1\n\t[INFO] ------------------------------------------------------------------------\n\tDownloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/2.6/maven-resources-plugin-2.6.pom\n\t[INFO] ------------------------------------------------------------------------\n\t[INFO] BUILD FAILURE\n\t[INFO] ------------------------------------------------------------------------\n\t[INFO] Total time: 1.021 s\n\t[INFO] Finished at: 2016-05-25T12:20:48+08:00\n\t[INFO] Final Memory: 7M/155M\n\t[INFO] ------------------------------------------------------------------------\n\t[ERROR] Plugin org.apache.maven.plugins:maven-resources-plugin:2.6 or one of its dependencies could not be resolved: Failed to read artifact descriptor for org.apache.maven.plugins:maven-resources-plugin:jar:2.6: Could not transfer artifact org.apache.maven.plugins:maven-resources-plugin:pom:2.6 from/to central (https://repo.maven.apache.org/maven2): sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target -> [Help 1]\n\t[ERROR] \n\t[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n\t[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n\t[ERROR] \n\t[ERROR] For more information about the errors and possible solutions, please read the following articles:\n\t[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginResolutionException```\n看日志发现downloading不下来，以后是网络问题，直接访问链接发现可以访问，尼玛这是什么问题呢。找了很多blog，发现自己前段时间做cas时改了jre中lib库里的security里面的一个文件cacerts。然后恢复成原来的就OK了，简直神奇啊，那cacerts这个文件到底是干嘛的呢？这个文件是一个证书，有心的读者会看到上面的链接是https开头的，访问的时候客户端是需要这个cacerts文件授权滴。\n\t\n","source":"_posts/Maven.md","raw":"---\ntitle: maven-resources-plugin:2.6 or one of its dependencies could not be resolved\ndate: 2016-05-25 21:37:00\ntags:\n- maven\ncategories:\n- maven\n---\n本猿想把maven默认仓库改成自己文件夹的时候不小心删掉了`` ~/.m2/repository ``里面所有的jar。当再次install时出现下面的错误。\n\n``` bash\n\tjinyaoyuan:maven jinyaoyuan$ mvn install\n\t[INFO] Scanning for projects...\n\t[INFO]                                                                         \n\t[INFO] ------------------------------------------------------------------------\n\t[INFO] Building hello-first SNAPSHOT-0.0.1\n\t[INFO] ------------------------------------------------------------------------\n\tDownloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/2.6/maven-resources-plugin-2.6.pom\n\t[INFO] ------------------------------------------------------------------------\n\t[INFO] BUILD FAILURE\n\t[INFO] ------------------------------------------------------------------------\n\t[INFO] Total time: 1.021 s\n\t[INFO] Finished at: 2016-05-25T12:20:48+08:00\n\t[INFO] Final Memory: 7M/155M\n\t[INFO] ------------------------------------------------------------------------\n\t[ERROR] Plugin org.apache.maven.plugins:maven-resources-plugin:2.6 or one of its dependencies could not be resolved: Failed to read artifact descriptor for org.apache.maven.plugins:maven-resources-plugin:jar:2.6: Could not transfer artifact org.apache.maven.plugins:maven-resources-plugin:pom:2.6 from/to central (https://repo.maven.apache.org/maven2): sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target -> [Help 1]\n\t[ERROR] \n\t[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.\n\t[ERROR] Re-run Maven using the -X switch to enable full debug logging.\n\t[ERROR] \n\t[ERROR] For more information about the errors and possible solutions, please read the following articles:\n\t[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginResolutionException```\n看日志发现downloading不下来，以后是网络问题，直接访问链接发现可以访问，尼玛这是什么问题呢。找了很多blog，发现自己前段时间做cas时改了jre中lib库里的security里面的一个文件cacerts。然后恢复成原来的就OK了，简直神奇啊，那cacerts这个文件到底是干嘛的呢？这个文件是一个证书，有心的读者会看到上面的链接是https开头的，访问的时候客户端是需要这个cacerts文件授权滴。\n\t\n","slug":"Maven","published":1,"updated":"2016-05-26T05:40:54.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixtj000lbxbosdyrkb9r","content":"<p>本猿想把maven默认仓库改成自己文件夹的时候不小心删掉了<code>~/.m2/repository</code>里面所有的jar。当再次install时出现下面的错误。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jinyaoyuan:maven jinyaoyuan$ mvn install</span><br><span class=\"line\">[INFO] Scanning <span class=\"keyword\">for</span> projects...</span><br><span class=\"line\">[INFO]                                                                         </span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Building hello-first SNAPSHOT-0.0.1</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/2.6/maven-resources-plugin-2.6.pom</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD FAILURE</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time: 1.021 s</span><br><span class=\"line\">[INFO] Finished at: 2016-05-25T12:20:48+08:00</span><br><span class=\"line\">[INFO] Final Memory: 7M/155M</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[ERROR] Plugin org.apache.maven.plugins:maven-resources-plugin:2.6 or one of its dependencies could not be resolved: Failed to <span class=\"built_in\">read</span> artifact descriptor <span class=\"keyword\">for</span> org.apache.maven.plugins:maven-resources-plugin:jar:2.6: Could not transfer artifact org.apache.maven.plugins:maven-resources-plugin:pom:2.6 from/to central (https://repo.maven.apache.org/maven2): sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target -&gt; [Help 1]</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] To see the full stack trace of the errors, re-run Maven with the <span class=\"_\">-e</span> switch.</span><br><span class=\"line\">[ERROR] Re-run Maven using the -X switch to <span class=\"built_in\">enable</span> full debug logging.</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] For more information about the errors and possible solutions, please <span class=\"built_in\">read</span> the following articles:</span><br><span class=\"line\">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginResolutionException</span><br></pre></td></tr></table></figure>\n<p>看日志发现downloading不下来，以后是网络问题，直接访问链接发现可以访问，尼玛这是什么问题呢。找了很多blog，发现自己前段时间做cas时改了jre中lib库里的security里面的一个文件cacerts。然后恢复成原来的就OK了，简直神奇啊，那cacerts这个文件到底是干嘛的呢？这个文件是一个证书，有心的读者会看到上面的链接是https开头的，访问的时候客户端是需要这个cacerts文件授权滴。</p>\n","excerpt":"","more":"<p>本猿想把maven默认仓库改成自己文件夹的时候不小心删掉了<code>~/.m2/repository</code>里面所有的jar。当再次install时出现下面的错误。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jinyaoyuan:maven jinyaoyuan$ mvn install</span><br><span class=\"line\">[INFO] Scanning <span class=\"keyword\">for</span> projects...</span><br><span class=\"line\">[INFO]                                                                         </span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Building hello-first SNAPSHOT-0.0.1</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/plugins/maven-resources-plugin/2.6/maven-resources-plugin-2.6.pom</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD FAILURE</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time: 1.021 s</span><br><span class=\"line\">[INFO] Finished at: 2016-05-25T12:20:48+08:00</span><br><span class=\"line\">[INFO] Final Memory: 7M/155M</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[ERROR] Plugin org.apache.maven.plugins:maven-resources-plugin:2.6 or one of its dependencies could not be resolved: Failed to <span class=\"built_in\">read</span> artifact descriptor <span class=\"keyword\">for</span> org.apache.maven.plugins:maven-resources-plugin:jar:2.6: Could not transfer artifact org.apache.maven.plugins:maven-resources-plugin:pom:2.6 from/to central (https://repo.maven.apache.org/maven2): sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target -&gt; [Help 1]</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] To see the full stack trace of the errors, re-run Maven with the <span class=\"_\">-e</span> switch.</span><br><span class=\"line\">[ERROR] Re-run Maven using the -X switch to <span class=\"built_in\">enable</span> full debug logging.</span><br><span class=\"line\">[ERROR] </span><br><span class=\"line\">[ERROR] For more information about the errors and possible solutions, please <span class=\"built_in\">read</span> the following articles:</span><br><span class=\"line\">[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/PluginResolutionException</span><br></pre></td></tr></table></figure>\n<p>看日志发现downloading不下来，以后是网络问题，直接访问链接发现可以访问，尼玛这是什么问题呢。找了很多blog，发现自己前段时间做cas时改了jre中lib库里的security里面的一个文件cacerts。然后恢复成原来的就OK了，简直神奇啊，那cacerts这个文件到底是干嘛的呢？这个文件是一个证书，有心的读者会看到上面的链接是https开头的，访问的时候客户端是需要这个cacerts文件授权滴。</p>\n"},{"title":"MyBatis入门","date":"2016-06-23T07:35:40.000Z","_content":"\n### 配置\n[Mybatis在线使用文档](http://www.mybatis.org/mybatis-3/zh/getting-started.html \"使用文档\")\n#### settings\n\nuseColumnLabel\t使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。\n\nuseGeneratedKeys\t允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。\n\nmapUnderscoreToCamelCase\t是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。\n\n### sqlMap\n\n#### select\n resultType\t 从这条语句中返回的期望类型的类的完全限定名或别名。注意如果是集合情形，那应该是集合可以包含的类型，而不能是集合本身。使用 resultType 或 resultMap，但不能同时使用。\n \n#### resultMap\n\nconstructor - 类在实例化时,用来注入结果到构造方法中\n\tidArg - ID 参数;标记结果作为 ID 可以帮助提高整体效能\n\targ - 注入到构造方法的一个普通结果\nid – 一个 ID 结果;标记结果作为 ID 可以帮助提高整体效能\nresult – 注入到字段或 JavaBean 属性的普通结果\nassociation – 一个复杂的类型关联;许多结果将包成这种类型\n嵌入结果映射 – 结果映射自身的关联,或者参考一个\ncollection – 复杂类型的集\n嵌入结果映射 – 结果映射自身的集,或者参考一个\ndiscriminator – 使用结果值来决定使用哪个结果映射\n\tcase – 基于某些值的结果映射\n\t嵌入结果映射 – 这种情形结果也映射它本身,因此可以包含很多相同的\t元素,或者它可以参照一个外部的结果映射。\n \n#### 自动映射\n当自动映射查询结果时，MyBatis会获取sql返回的列名并在java类中查找相同名字的属性（忽略大小写）。 这意味着如果Mybatis发现了ID列和id属性，Mybatis会将ID的值赋给id。\n\n通常数据库列使用大写单词命名，单词间用下划线分隔；而java属性一般遵循驼峰命名法。 为了在这两种命名方式之间启用自动映射，需要将 mapUnderscoreToCamelCase设置为true。\n\n\n\n<resultMap id=\"authorResult\" type=\"Author\">\n  <result property=\"username\" column=\"author_username\"/>\n</resultMap>\nWith this result map both Blog and Author will be auto-mapped. But note that Author has an id property and there is a column named id in the ResultSet so Author's id will be filled with Blog's id, and that is not what you were expecting. So use the FULL option with caution.\n\nRegardless of the auto-mapping level configured you can enable or disable the automapping for an specific ResultMap by adding the attribute autoMapping to it:\n\n<resultMap id=\"userResultMap\" type=\"User\" autoMapping=\"false\">\n  <result property=\"password\" column=\"hashed_password\"/>\n</resultMap>\n#### 缓存\nMyBatis 包含一个非常强大的查询缓存特性,它可以非常方便地配置和定制。MyBatis 3 中的缓存实现的很多改进都已经实现了,使得它更加强大而且易于配置。\n\n默认情况下是没有开启缓存的,除了局部的 session 缓存,可以增强变现而且处理循环 依赖也是必须的。要开启二级缓存,你需要在你的 SQL 映射文件中添加一行:\n\n\t<cache/>\n字面上看就是这样。这个简单语句的效果如下:\n\n映射语句文件中的所有 select 语句将会被缓存。\n映射语句文件中的所有 insert,update 和 delete 语句会刷新缓存。\n缓存会使用 Least Recently Used(LRU,最近最少使用的)算法来收回。\n根据时间表(比如 no Flush Interval,没有刷新间隔), 缓存不会以任何时间顺序 来刷新。\n缓存会存储列表集合或对象(无论查询方法返回什么)的 1024 个引用。\n缓存会被视为是 read/write(可读/可写)的缓存,意味着对象检索不是共享的,而 且可以安全地被调用者修改,而不干扰其他调用者或线程所做的潜在修改。","source":"_posts/MyBatis入门.md","raw":"---\ntitle: MyBatis入门\ndate: 2016-06-23 15:35:40\ntags:\n- Mybatis\n- Java Web\ncategories:\n- Java\n\n---\n\n### 配置\n[Mybatis在线使用文档](http://www.mybatis.org/mybatis-3/zh/getting-started.html \"使用文档\")\n#### settings\n\nuseColumnLabel\t使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。\n\nuseGeneratedKeys\t允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。\n\nmapUnderscoreToCamelCase\t是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。\n\n### sqlMap\n\n#### select\n resultType\t 从这条语句中返回的期望类型的类的完全限定名或别名。注意如果是集合情形，那应该是集合可以包含的类型，而不能是集合本身。使用 resultType 或 resultMap，但不能同时使用。\n \n#### resultMap\n\nconstructor - 类在实例化时,用来注入结果到构造方法中\n\tidArg - ID 参数;标记结果作为 ID 可以帮助提高整体效能\n\targ - 注入到构造方法的一个普通结果\nid – 一个 ID 结果;标记结果作为 ID 可以帮助提高整体效能\nresult – 注入到字段或 JavaBean 属性的普通结果\nassociation – 一个复杂的类型关联;许多结果将包成这种类型\n嵌入结果映射 – 结果映射自身的关联,或者参考一个\ncollection – 复杂类型的集\n嵌入结果映射 – 结果映射自身的集,或者参考一个\ndiscriminator – 使用结果值来决定使用哪个结果映射\n\tcase – 基于某些值的结果映射\n\t嵌入结果映射 – 这种情形结果也映射它本身,因此可以包含很多相同的\t元素,或者它可以参照一个外部的结果映射。\n \n#### 自动映射\n当自动映射查询结果时，MyBatis会获取sql返回的列名并在java类中查找相同名字的属性（忽略大小写）。 这意味着如果Mybatis发现了ID列和id属性，Mybatis会将ID的值赋给id。\n\n通常数据库列使用大写单词命名，单词间用下划线分隔；而java属性一般遵循驼峰命名法。 为了在这两种命名方式之间启用自动映射，需要将 mapUnderscoreToCamelCase设置为true。\n\n\n\n<resultMap id=\"authorResult\" type=\"Author\">\n  <result property=\"username\" column=\"author_username\"/>\n</resultMap>\nWith this result map both Blog and Author will be auto-mapped. But note that Author has an id property and there is a column named id in the ResultSet so Author's id will be filled with Blog's id, and that is not what you were expecting. So use the FULL option with caution.\n\nRegardless of the auto-mapping level configured you can enable or disable the automapping for an specific ResultMap by adding the attribute autoMapping to it:\n\n<resultMap id=\"userResultMap\" type=\"User\" autoMapping=\"false\">\n  <result property=\"password\" column=\"hashed_password\"/>\n</resultMap>\n#### 缓存\nMyBatis 包含一个非常强大的查询缓存特性,它可以非常方便地配置和定制。MyBatis 3 中的缓存实现的很多改进都已经实现了,使得它更加强大而且易于配置。\n\n默认情况下是没有开启缓存的,除了局部的 session 缓存,可以增强变现而且处理循环 依赖也是必须的。要开启二级缓存,你需要在你的 SQL 映射文件中添加一行:\n\n\t<cache/>\n字面上看就是这样。这个简单语句的效果如下:\n\n映射语句文件中的所有 select 语句将会被缓存。\n映射语句文件中的所有 insert,update 和 delete 语句会刷新缓存。\n缓存会使用 Least Recently Used(LRU,最近最少使用的)算法来收回。\n根据时间表(比如 no Flush Interval,没有刷新间隔), 缓存不会以任何时间顺序 来刷新。\n缓存会存储列表集合或对象(无论查询方法返回什么)的 1024 个引用。\n缓存会被视为是 read/write(可读/可写)的缓存,意味着对象检索不是共享的,而 且可以安全地被调用者修改,而不干扰其他调用者或线程所做的潜在修改。","slug":"MyBatis入门","published":1,"updated":"2016-07-08T04:27:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixtm000pbxbo3n1axj18","content":"<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p><a href=\"http://www.mybatis.org/mybatis-3/zh/getting-started.html\" title=\"使用文档\" target=\"_blank\" rel=\"external\">Mybatis在线使用文档</a></p>\n<h4 id=\"settings\"><a href=\"#settings\" class=\"headerlink\" title=\"settings\"></a>settings</h4><p>useColumnLabel    使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。</p>\n<p>useGeneratedKeys    允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。</p>\n<p>mapUnderscoreToCamelCase    是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。</p>\n<h3 id=\"sqlMap\"><a href=\"#sqlMap\" class=\"headerlink\" title=\"sqlMap\"></a>sqlMap</h3><h4 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h4><p> resultType     从这条语句中返回的期望类型的类的完全限定名或别名。注意如果是集合情形，那应该是集合可以包含的类型，而不能是集合本身。使用 resultType 或 resultMap，但不能同时使用。</p>\n<h4 id=\"resultMap\"><a href=\"#resultMap\" class=\"headerlink\" title=\"resultMap\"></a>resultMap</h4><p>constructor - 类在实例化时,用来注入结果到构造方法中<br>    idArg - ID 参数;标记结果作为 ID 可以帮助提高整体效能<br>    arg - 注入到构造方法的一个普通结果<br>id – 一个 ID 结果;标记结果作为 ID 可以帮助提高整体效能<br>result – 注入到字段或 JavaBean 属性的普通结果<br>association – 一个复杂的类型关联;许多结果将包成这种类型<br>嵌入结果映射 – 结果映射自身的关联,或者参考一个<br>collection – 复杂类型的集<br>嵌入结果映射 – 结果映射自身的集,或者参考一个<br>discriminator – 使用结果值来决定使用哪个结果映射<br>    case – 基于某些值的结果映射<br>    嵌入结果映射 – 这种情形结果也映射它本身,因此可以包含很多相同的    元素,或者它可以参照一个外部的结果映射。</p>\n<h4 id=\"自动映射\"><a href=\"#自动映射\" class=\"headerlink\" title=\"自动映射\"></a>自动映射</h4><p>当自动映射查询结果时，MyBatis会获取sql返回的列名并在java类中查找相同名字的属性（忽略大小写）。 这意味着如果Mybatis发现了ID列和id属性，Mybatis会将ID的值赋给id。</p>\n<p>通常数据库列使用大写单词命名，单词间用下划线分隔；而java属性一般遵循驼峰命名法。 为了在这两种命名方式之间启用自动映射，需要将 mapUnderscoreToCamelCase设置为true。</p>\n<p><resultmap id=\"authorResult\" type=\"Author\"><br>  <result property=\"username\" column=\"author_username\"><br></result></resultmap><br>With this result map both Blog and Author will be auto-mapped. But note that Author has an id property and there is a column named id in the ResultSet so Author’s id will be filled with Blog’s id, and that is not what you were expecting. So use the FULL option with caution.</p>\n<p>Regardless of the auto-mapping level configured you can enable or disable the automapping for an specific ResultMap by adding the attribute autoMapping to it:</p>\n<p><resultmap id=\"userResultMap\" type=\"User\" automapping=\"false\"><br>  <result property=\"password\" column=\"hashed_password\"><br></result></resultmap></p>\n<h4 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h4><p>MyBatis 包含一个非常强大的查询缓存特性,它可以非常方便地配置和定制。MyBatis 3 中的缓存实现的很多改进都已经实现了,使得它更加强大而且易于配置。</p>\n<p>默认情况下是没有开启缓存的,除了局部的 session 缓存,可以增强变现而且处理循环 依赖也是必须的。要开启二级缓存,你需要在你的 SQL 映射文件中添加一行:</p>\n<pre><code>&lt;cache/&gt;\n</code></pre><p>字面上看就是这样。这个简单语句的效果如下:</p>\n<p>映射语句文件中的所有 select 语句将会被缓存。<br>映射语句文件中的所有 insert,update 和 delete 语句会刷新缓存。<br>缓存会使用 Least Recently Used(LRU,最近最少使用的)算法来收回。<br>根据时间表(比如 no Flush Interval,没有刷新间隔), 缓存不会以任何时间顺序 来刷新。<br>缓存会存储列表集合或对象(无论查询方法返回什么)的 1024 个引用。<br>缓存会被视为是 read/write(可读/可写)的缓存,意味着对象检索不是共享的,而 且可以安全地被调用者修改,而不干扰其他调用者或线程所做的潜在修改。</p>\n","excerpt":"","more":"<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p><a href=\"http://www.mybatis.org/mybatis-3/zh/getting-started.html\" title=\"使用文档\">Mybatis在线使用文档</a></p>\n<h4 id=\"settings\"><a href=\"#settings\" class=\"headerlink\" title=\"settings\"></a>settings</h4><p>useColumnLabel    使用列标签代替列名。不同的驱动在这方面会有不同的表现， 具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果。</p>\n<p>useGeneratedKeys    允许 JDBC 支持自动生成主键，需要驱动兼容。 如果设置为 true 则这个设置强制使用自动生成主键，尽管一些驱动不能兼容但仍可正常工作（比如 Derby）。</p>\n<p>mapUnderscoreToCamelCase    是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射。</p>\n<h3 id=\"sqlMap\"><a href=\"#sqlMap\" class=\"headerlink\" title=\"sqlMap\"></a>sqlMap</h3><h4 id=\"select\"><a href=\"#select\" class=\"headerlink\" title=\"select\"></a>select</h4><p> resultType     从这条语句中返回的期望类型的类的完全限定名或别名。注意如果是集合情形，那应该是集合可以包含的类型，而不能是集合本身。使用 resultType 或 resultMap，但不能同时使用。</p>\n<h4 id=\"resultMap\"><a href=\"#resultMap\" class=\"headerlink\" title=\"resultMap\"></a>resultMap</h4><p>constructor - 类在实例化时,用来注入结果到构造方法中<br>    idArg - ID 参数;标记结果作为 ID 可以帮助提高整体效能<br>    arg - 注入到构造方法的一个普通结果<br>id – 一个 ID 结果;标记结果作为 ID 可以帮助提高整体效能<br>result – 注入到字段或 JavaBean 属性的普通结果<br>association – 一个复杂的类型关联;许多结果将包成这种类型<br>嵌入结果映射 – 结果映射自身的关联,或者参考一个<br>collection – 复杂类型的集<br>嵌入结果映射 – 结果映射自身的集,或者参考一个<br>discriminator – 使用结果值来决定使用哪个结果映射<br>    case – 基于某些值的结果映射<br>    嵌入结果映射 – 这种情形结果也映射它本身,因此可以包含很多相同的    元素,或者它可以参照一个外部的结果映射。</p>\n<h4 id=\"自动映射\"><a href=\"#自动映射\" class=\"headerlink\" title=\"自动映射\"></a>自动映射</h4><p>当自动映射查询结果时，MyBatis会获取sql返回的列名并在java类中查找相同名字的属性（忽略大小写）。 这意味着如果Mybatis发现了ID列和id属性，Mybatis会将ID的值赋给id。</p>\n<p>通常数据库列使用大写单词命名，单词间用下划线分隔；而java属性一般遵循驼峰命名法。 为了在这两种命名方式之间启用自动映射，需要将 mapUnderscoreToCamelCase设置为true。</p>\n<p><resultMap id=\"authorResult\" type=\"Author\"><br>  <result property=\"username\" column=\"author_username\"/><br></resultMap><br>With this result map both Blog and Author will be auto-mapped. But note that Author has an id property and there is a column named id in the ResultSet so Author’s id will be filled with Blog’s id, and that is not what you were expecting. So use the FULL option with caution.</p>\n<p>Regardless of the auto-mapping level configured you can enable or disable the automapping for an specific ResultMap by adding the attribute autoMapping to it:</p>\n<p><resultMap id=\"userResultMap\" type=\"User\" autoMapping=\"false\"><br>  <result property=\"password\" column=\"hashed_password\"/><br></resultMap></p>\n<h4 id=\"缓存\"><a href=\"#缓存\" class=\"headerlink\" title=\"缓存\"></a>缓存</h4><p>MyBatis 包含一个非常强大的查询缓存特性,它可以非常方便地配置和定制。MyBatis 3 中的缓存实现的很多改进都已经实现了,使得它更加强大而且易于配置。</p>\n<p>默认情况下是没有开启缓存的,除了局部的 session 缓存,可以增强变现而且处理循环 依赖也是必须的。要开启二级缓存,你需要在你的 SQL 映射文件中添加一行:</p>\n<pre><code>&lt;cache/&gt;\n</code></pre><p>字面上看就是这样。这个简单语句的效果如下:</p>\n<p>映射语句文件中的所有 select 语句将会被缓存。<br>映射语句文件中的所有 insert,update 和 delete 语句会刷新缓存。<br>缓存会使用 Least Recently Used(LRU,最近最少使用的)算法来收回。<br>根据时间表(比如 no Flush Interval,没有刷新间隔), 缓存不会以任何时间顺序 来刷新。<br>缓存会存储列表集合或对象(无论查询方法返回什么)的 1024 个引用。<br>缓存会被视为是 read/write(可读/可写)的缓存,意味着对象检索不是共享的,而 且可以安全地被调用者修改,而不干扰其他调用者或线程所做的潜在修改。</p>\n"},{"title":"Java面试常见问题总结","date":"2016-07-03T08:39:15.000Z","_content":"\n\n![](/uploads/interview/1.jpg \"\")\n\n1. 自我介绍\n\t让对方在最短的时间里了解你的教育背景，实习经历，工作经验，兴趣爱好，职业规划，性格特征，以及你的优势等等\n2. 项目\n   项目简要介绍，你的主要工作，主要技术，难点，解决方案，心得体会\n3. 运行时多态的解释：a.运行时多态是指程序中定义的引用变量所指向的具体类型和b.通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；\n\t```java\n\tclass Father{\n\t     void say(){\n\t     \tSystem.out.println(\"father\");\n\t     }\n\t}\n\t\n\tclass Son extends Father{\n\t  void say(){\n\t  \tSystem.out.println(\"son\");\n\t  }\n\t  void run(){\n\t    ...;\n\t  }\n\t}\n\t\n\tFather son=new Son();\n\tson.run();//编译出错\n\t```\n\t\n![](/uploads/interview/2.jpg \"\")\n![](/uploads/interview/3.jpg \"\")\n![](/uploads/interview/4.jpg \"\")\n![](/uploads/interview/5.jpg \"\")\n![](/uploads/interview/6.jpg \"\")\n![](/uploads/interview/7.jpg \"\")\n![](/uploads/interview/8.jpg \"\")\n![](/uploads/interview/9.jpg \"\")\n![](/uploads/interview/10.jpg \"\")\n![](/uploads/interview/11.jpg \"\")\n![](/uploads/interview/12.jpg \"\")\n![](/uploads/interview/13.jpg \"\")\n![](/uploads/interview/14.jpg \"\")\n![](/uploads/interview/15.jpg \"\")\n![](/uploads/interview/16.jpg \"\")\n![](/uploads/interview/17.jpg \"\")\n![](/uploads/interview/18.jpg \"\")\n![](/uploads/interview/19.jpg \"\")\n![](/uploads/interview/20.jpg \"\")\n![](/uploads/interview/21.jpg \"\")\n![](/uploads/interview/22.jpg \"\")\n![](/uploads/interview/23.jpg \"\")\n![](/uploads/interview/24.jpg \"\")\n![](/uploads/interview/25.jpg \"\")\n\n\n4. TCP的三次握手和四次挥手的补充\n   三次握手\n\t\t* 第一次握手：建立连接时，客户端A发送SYN包（SYN=j）到服务器B，并进入SYN_SEND状态，等待服务器B确认。\n\t\t* 第二次握手：服务器B收到SYN包，必须确认客户A的SYN（ACK=j+1），同时自己也发送一个SYN包（SYN=k），即SYN+ACK包，此时服务器B进入SYN_RECV状态。\n\t\t* 第三次握手：客户端A收到服务器B的SYN＋ACK包，向服务器B发送确认包ACK（ACK=k+1），此包发送完毕，客户端A和服务器B进入ESTABLISHED状态，完成三次握手。\n完成三次握手，客户端与服务器开始传送数据。\n        确认号：其数值等于发送方的发送序号 +1(即接收方期望接收的下一个序列号)。\n   四次挥手\n\t\t* 客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送。 \n\t\t* 服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。 \n\t\t* 服务器B关闭与客户端A的连接，发送一个FIN给客户端A。 \n\t\t* 客户端A发回ACK报文确认，并将确认序号设置为收到序号加1。 \n\n\tCLOSE_WAIT\n\t  > 发起TCP连接关闭的一方称为client，被动关闭的一方称为server。被动关闭的server收到FIN后，但未发出ACK的TCP状态是CLOSE_WAIT。出现这种状况一般都是由于server端代码的问题，如果你的服务器上出现大量CLOSE_WAIT，应该要考虑检查代码。\n   \n   TIME_WAIT\n\t  > 根据TCP协议定义的3次握手断开连接规定,发起socket主动关闭的一方 socket将进入TIME_WAIT状态。TIME_WAIT状态将持续2个MSL(Max Segment Lifetime),在Windows下默认为4分钟，即240秒。TIME_WAIT状态下的socket不能被回收使用. 具体现象是对于一个处理大量短连接的服务器,如果是由服务器主动关闭客户端的连接，将导致服务器端存在大量的处于TIME_WAIT状态的socket， 甚至比处于Established状态下的socket多的多,严重影响服务器的处理能力，甚至耗尽可用的socket，停止服务。\n\n5. 为什么需要TIME_WAIT？\n   > TIME_WAIT是TCP协议用以保证被重新分配的socket不会受到之前残留的延迟重发报文影响的机制,是必要的逻辑保证。\n6. 主动发起关闭连接的操作的一方将达到TIME_WAIT状态，而且这个状态要保持Maximum Segment Lifetime的两倍时间。为什么要这样做而不是直接进入CLOSED状态？\n\n\t原因有二：\n\t> 一、保证TCP协议的全双工连接能够可靠关闭\n\t> 二、保证这次连接的重复数据段从网络中消失\n\n\t先说第一点，如果Client直接CLOSED了，那么由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，此时由于Client已经CLOSED了，就找不到与重发的FIN对应的连接，最后Server就会收到RST而不是ACK，Server就会以为是连接错误把问题报告给高层。这样的情况虽然不会造成数据丢失，但是却导致TCP协议不符合可靠连接的要求。所以，Client不是直接进入CLOSED，而是要保持TIME_WAIT，当再次收到FIN的时候，能够保证对方收到ACK，最后正确的关闭连接。\n\n\t再说第二点，如果Client直接CLOSED，然后又再向Server发起一个新连接，我们不能保证这个新连接与刚关闭的连接的端口号是不同的。也就是说有可能新连接和老连接的端口号是相同的。一般来说不会发生什么问题，但是还是有特殊情况出现：假设新连接和已经关闭的老连接端口号是一样的，如果前一次连接的某些数据仍然滞留在网络中，这些延迟数据在建立新连接之后才到达Server，由于新连接和老连接的端口号是一样的，又因为TCP协议判断不同连接的依据是socket pair，于是，TCP协议就认为那个延迟的数据是属于新连接的，这样就和真正的新连接的数据包发生混淆了。所以TCP连接还要在TIME_WAIT状态等待2倍MSL，这样可以保证本次连接的所有数据都从网络中消失。\n\t[参考文献:TCP的三次握手和四次挥手](http://www.cnblogs.com/Jessy/p/3535612.html \"参考文献:TCP的三次握手和四次挥手\")\n \n![](/uploads/interview/26.jpg \"\")\n![](/uploads/interview/27.jpg \"\")\n![](/uploads/interview/28.jpg \"\")\n\t\n4. java类加载过程：\n\t首先是加载：\n\n    这一块虚拟机要完成3件事：\n\n        通过一个类的全限定名来获取定义此类的二进制字节流。\n\n        将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n\n        在java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。 \n    然后是链接（验证，准备，解释），初始化\n 检验的目的：确保class文件的字节流信息符合jvm的口味，不会让jvm感到不舒服。假如class文件是由纯粹的java代码编译过来的，自然不会出现类似于数组越界、跳转到不存在的代码块等不健康的问题，因为一旦出现这种现象，编译器就会拒绝编译了。但是，跟之前说的一样，Class文件流不一定是从java源码编译过来的，也可能是从网络或者其他地方过来的，甚至你可以自己用16进制写，假如jvm不对这些数据进行校验的话，可能一些有害的字节流会让jvm完全崩溃。\n\n检验主要经历几个步骤：文件格式验证->元数据验证->字节码验证->符号引用验证 \n用Class.forName(String className);来加载类的时候，也会执行初始化动作。注意:ClassLoader的loadClass(String className);方法只会加载并编译某类，并不会对其执行初始化。\n\n8. Java序列化和transient\n\n\t\n\n拦截器是基于java的反射机制的，而过滤器是基于函数回调。　　\n拦截器不依赖与servlet容器，过滤器依赖与servlet容器。　　\n拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。　\n拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。\n在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。\n拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。\n\n#### 有关return和finally\n```java\npackage jinyuanyao.com;\n\n/**\n * Hello world!\n */\npublic class App {\n    static String result = \"\";\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n\n        System.out.println(method(1));\n//        the output is 2\n        method(0);\n        System.out.print(result);\n//        the output is 2334\n    }\n\n    public static String method(int i) {\n        try {\n            if (i == 1) {\n                throw new Exception();\n            }\n        } catch (Exception e) {\n            result += \"2\";\n            return result;\n\n        } finally {\n            result += \"3\";\n        }\n        result += \"4\";\n        return \"\";\n\n\n    }\n\n\n}\n\n```\n总结：\n1、不管有木有出现异常，finally块中代码都会执行；\n2、当try和catch中有return时，finally仍然会执行；\n3、finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，管finally中的代码怎么样，返回的值都不会改变，任然是之前保存的值），所以函数返回值是在finally执行前确定的；\n4、finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。\n","source":"_posts/Java面试常见问题总结.md","raw":"---\ntitle: Java面试常见问题总结\ndate: 2016-07-03 16:39:15\ntags:\n- 面试\ncategories:\n- Java\n\n---\n\n\n![](/uploads/interview/1.jpg \"\")\n\n1. 自我介绍\n\t让对方在最短的时间里了解你的教育背景，实习经历，工作经验，兴趣爱好，职业规划，性格特征，以及你的优势等等\n2. 项目\n   项目简要介绍，你的主要工作，主要技术，难点，解决方案，心得体会\n3. 运行时多态的解释：a.运行时多态是指程序中定义的引用变量所指向的具体类型和b.通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误；\n\t```java\n\tclass Father{\n\t     void say(){\n\t     \tSystem.out.println(\"father\");\n\t     }\n\t}\n\t\n\tclass Son extends Father{\n\t  void say(){\n\t  \tSystem.out.println(\"son\");\n\t  }\n\t  void run(){\n\t    ...;\n\t  }\n\t}\n\t\n\tFather son=new Son();\n\tson.run();//编译出错\n\t```\n\t\n![](/uploads/interview/2.jpg \"\")\n![](/uploads/interview/3.jpg \"\")\n![](/uploads/interview/4.jpg \"\")\n![](/uploads/interview/5.jpg \"\")\n![](/uploads/interview/6.jpg \"\")\n![](/uploads/interview/7.jpg \"\")\n![](/uploads/interview/8.jpg \"\")\n![](/uploads/interview/9.jpg \"\")\n![](/uploads/interview/10.jpg \"\")\n![](/uploads/interview/11.jpg \"\")\n![](/uploads/interview/12.jpg \"\")\n![](/uploads/interview/13.jpg \"\")\n![](/uploads/interview/14.jpg \"\")\n![](/uploads/interview/15.jpg \"\")\n![](/uploads/interview/16.jpg \"\")\n![](/uploads/interview/17.jpg \"\")\n![](/uploads/interview/18.jpg \"\")\n![](/uploads/interview/19.jpg \"\")\n![](/uploads/interview/20.jpg \"\")\n![](/uploads/interview/21.jpg \"\")\n![](/uploads/interview/22.jpg \"\")\n![](/uploads/interview/23.jpg \"\")\n![](/uploads/interview/24.jpg \"\")\n![](/uploads/interview/25.jpg \"\")\n\n\n4. TCP的三次握手和四次挥手的补充\n   三次握手\n\t\t* 第一次握手：建立连接时，客户端A发送SYN包（SYN=j）到服务器B，并进入SYN_SEND状态，等待服务器B确认。\n\t\t* 第二次握手：服务器B收到SYN包，必须确认客户A的SYN（ACK=j+1），同时自己也发送一个SYN包（SYN=k），即SYN+ACK包，此时服务器B进入SYN_RECV状态。\n\t\t* 第三次握手：客户端A收到服务器B的SYN＋ACK包，向服务器B发送确认包ACK（ACK=k+1），此包发送完毕，客户端A和服务器B进入ESTABLISHED状态，完成三次握手。\n完成三次握手，客户端与服务器开始传送数据。\n        确认号：其数值等于发送方的发送序号 +1(即接收方期望接收的下一个序列号)。\n   四次挥手\n\t\t* 客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送。 \n\t\t* 服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。 \n\t\t* 服务器B关闭与客户端A的连接，发送一个FIN给客户端A。 \n\t\t* 客户端A发回ACK报文确认，并将确认序号设置为收到序号加1。 \n\n\tCLOSE_WAIT\n\t  > 发起TCP连接关闭的一方称为client，被动关闭的一方称为server。被动关闭的server收到FIN后，但未发出ACK的TCP状态是CLOSE_WAIT。出现这种状况一般都是由于server端代码的问题，如果你的服务器上出现大量CLOSE_WAIT，应该要考虑检查代码。\n   \n   TIME_WAIT\n\t  > 根据TCP协议定义的3次握手断开连接规定,发起socket主动关闭的一方 socket将进入TIME_WAIT状态。TIME_WAIT状态将持续2个MSL(Max Segment Lifetime),在Windows下默认为4分钟，即240秒。TIME_WAIT状态下的socket不能被回收使用. 具体现象是对于一个处理大量短连接的服务器,如果是由服务器主动关闭客户端的连接，将导致服务器端存在大量的处于TIME_WAIT状态的socket， 甚至比处于Established状态下的socket多的多,严重影响服务器的处理能力，甚至耗尽可用的socket，停止服务。\n\n5. 为什么需要TIME_WAIT？\n   > TIME_WAIT是TCP协议用以保证被重新分配的socket不会受到之前残留的延迟重发报文影响的机制,是必要的逻辑保证。\n6. 主动发起关闭连接的操作的一方将达到TIME_WAIT状态，而且这个状态要保持Maximum Segment Lifetime的两倍时间。为什么要这样做而不是直接进入CLOSED状态？\n\n\t原因有二：\n\t> 一、保证TCP协议的全双工连接能够可靠关闭\n\t> 二、保证这次连接的重复数据段从网络中消失\n\n\t先说第一点，如果Client直接CLOSED了，那么由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，此时由于Client已经CLOSED了，就找不到与重发的FIN对应的连接，最后Server就会收到RST而不是ACK，Server就会以为是连接错误把问题报告给高层。这样的情况虽然不会造成数据丢失，但是却导致TCP协议不符合可靠连接的要求。所以，Client不是直接进入CLOSED，而是要保持TIME_WAIT，当再次收到FIN的时候，能够保证对方收到ACK，最后正确的关闭连接。\n\n\t再说第二点，如果Client直接CLOSED，然后又再向Server发起一个新连接，我们不能保证这个新连接与刚关闭的连接的端口号是不同的。也就是说有可能新连接和老连接的端口号是相同的。一般来说不会发生什么问题，但是还是有特殊情况出现：假设新连接和已经关闭的老连接端口号是一样的，如果前一次连接的某些数据仍然滞留在网络中，这些延迟数据在建立新连接之后才到达Server，由于新连接和老连接的端口号是一样的，又因为TCP协议判断不同连接的依据是socket pair，于是，TCP协议就认为那个延迟的数据是属于新连接的，这样就和真正的新连接的数据包发生混淆了。所以TCP连接还要在TIME_WAIT状态等待2倍MSL，这样可以保证本次连接的所有数据都从网络中消失。\n\t[参考文献:TCP的三次握手和四次挥手](http://www.cnblogs.com/Jessy/p/3535612.html \"参考文献:TCP的三次握手和四次挥手\")\n \n![](/uploads/interview/26.jpg \"\")\n![](/uploads/interview/27.jpg \"\")\n![](/uploads/interview/28.jpg \"\")\n\t\n4. java类加载过程：\n\t首先是加载：\n\n    这一块虚拟机要完成3件事：\n\n        通过一个类的全限定名来获取定义此类的二进制字节流。\n\n        将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n\n        在java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。 \n    然后是链接（验证，准备，解释），初始化\n 检验的目的：确保class文件的字节流信息符合jvm的口味，不会让jvm感到不舒服。假如class文件是由纯粹的java代码编译过来的，自然不会出现类似于数组越界、跳转到不存在的代码块等不健康的问题，因为一旦出现这种现象，编译器就会拒绝编译了。但是，跟之前说的一样，Class文件流不一定是从java源码编译过来的，也可能是从网络或者其他地方过来的，甚至你可以自己用16进制写，假如jvm不对这些数据进行校验的话，可能一些有害的字节流会让jvm完全崩溃。\n\n检验主要经历几个步骤：文件格式验证->元数据验证->字节码验证->符号引用验证 \n用Class.forName(String className);来加载类的时候，也会执行初始化动作。注意:ClassLoader的loadClass(String className);方法只会加载并编译某类，并不会对其执行初始化。\n\n8. Java序列化和transient\n\n\t\n\n拦截器是基于java的反射机制的，而过滤器是基于函数回调。　　\n拦截器不依赖与servlet容器，过滤器依赖与servlet容器。　　\n拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。　\n拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。\n在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。\n拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。\n\n#### 有关return和finally\n```java\npackage jinyuanyao.com;\n\n/**\n * Hello world!\n */\npublic class App {\n    static String result = \"\";\n\n    public static void main(String[] args) {\n        System.out.println(\"Hello World!\");\n\n        System.out.println(method(1));\n//        the output is 2\n        method(0);\n        System.out.print(result);\n//        the output is 2334\n    }\n\n    public static String method(int i) {\n        try {\n            if (i == 1) {\n                throw new Exception();\n            }\n        } catch (Exception e) {\n            result += \"2\";\n            return result;\n\n        } finally {\n            result += \"3\";\n        }\n        result += \"4\";\n        return \"\";\n\n\n    }\n\n\n}\n\n```\n总结：\n1、不管有木有出现异常，finally块中代码都会执行；\n2、当try和catch中有return时，finally仍然会执行；\n3、finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，管finally中的代码怎么样，返回的值都不会改变，任然是之前保存的值），所以函数返回值是在finally执行前确定的；\n4、finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。\n","slug":"Java面试常见问题总结","published":1,"updated":"2016-08-15T01:31:26.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixto000sbxbokwzhl992","content":"<p><img src=\"/uploads/interview/1.jpg\" alt=\"\"></p>\n<ol>\n<li>自我介绍<br> 让对方在最短的时间里了解你的教育背景，实习经历，工作经验，兴趣爱好，职业规划，性格特征，以及你的优势等等</li>\n<li>项目<br>项目简要介绍，你的主要工作，主要技术，难点，解决方案，心得体会</li>\n<li>运行时多态的解释：a.运行时多态是指程序中定义的引用变量所指向的具体类型和b.通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误； <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     \tSystem.out.println(<span class=\"string\">\"father\"</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  \tSystem.out.println(<span class=\"string\">\"son\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ...;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Father son=<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">son.run();<span class=\"comment\">//编译出错</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"/uploads/interview/2.jpg\" alt=\"\"><br><img src=\"/uploads/interview/3.jpg\" alt=\"\"><br><img src=\"/uploads/interview/4.jpg\" alt=\"\"><br><img src=\"/uploads/interview/5.jpg\" alt=\"\"><br><img src=\"/uploads/interview/6.jpg\" alt=\"\"><br><img src=\"/uploads/interview/7.jpg\" alt=\"\"><br><img src=\"/uploads/interview/8.jpg\" alt=\"\"><br><img src=\"/uploads/interview/9.jpg\" alt=\"\"><br><img src=\"/uploads/interview/10.jpg\" alt=\"\"><br><img src=\"/uploads/interview/11.jpg\" alt=\"\"><br><img src=\"/uploads/interview/12.jpg\" alt=\"\"><br><img src=\"/uploads/interview/13.jpg\" alt=\"\"><br><img src=\"/uploads/interview/14.jpg\" alt=\"\"><br><img src=\"/uploads/interview/15.jpg\" alt=\"\"><br><img src=\"/uploads/interview/16.jpg\" alt=\"\"><br><img src=\"/uploads/interview/17.jpg\" alt=\"\"><br><img src=\"/uploads/interview/18.jpg\" alt=\"\"><br><img src=\"/uploads/interview/19.jpg\" alt=\"\"><br><img src=\"/uploads/interview/20.jpg\" alt=\"\"><br><img src=\"/uploads/interview/21.jpg\" alt=\"\"><br><img src=\"/uploads/interview/22.jpg\" alt=\"\"><br><img src=\"/uploads/interview/23.jpg\" alt=\"\"><br><img src=\"/uploads/interview/24.jpg\" alt=\"\"><br><img src=\"/uploads/interview/25.jpg\" alt=\"\"></p>\n<ol>\n<li><p>TCP的三次握手和四次挥手的补充<br>三次握手</p>\n<pre><code>* 第一次握手：建立连接时，客户端A发送SYN包（SYN=j）到服务器B，并进入SYN_SEND状态，等待服务器B确认。\n* 第二次握手：服务器B收到SYN包，必须确认客户A的SYN（ACK=j+1），同时自己也发送一个SYN包（SYN=k），即SYN+ACK包，此时服务器B进入SYN_RECV状态。\n* 第三次握手：客户端A收到服务器B的SYN＋ACK包，向服务器B发送确认包ACK（ACK=k+1），此包发送完毕，客户端A和服务器B进入ESTABLISHED状态，完成三次握手。\n</code></pre><p>完成三次握手，客户端与服务器开始传送数据。</p>\n<pre><code>确认号：其数值等于发送方的发送序号 +1(即接收方期望接收的下一个序列号)。\n</code></pre><p>四次挥手</p>\n<pre><code>* 客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送。 \n* 服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。 \n* 服务器B关闭与客户端A的连接，发送一个FIN给客户端A。 \n* 客户端A发回ACK报文确认，并将确认序号设置为收到序号加1。 \n</code></pre><p> CLOSE_WAIT</p>\n<blockquote>\n<p>发起TCP连接关闭的一方称为client，被动关闭的一方称为server。被动关闭的server收到FIN后，但未发出ACK的TCP状态是CLOSE_WAIT。出现这种状况一般都是由于server端代码的问题，如果你的服务器上出现大量CLOSE_WAIT，应该要考虑检查代码。</p>\n</blockquote>\n<p>TIME_WAIT</p>\n<blockquote>\n<p>根据TCP协议定义的3次握手断开连接规定,发起socket主动关闭的一方 socket将进入TIME_WAIT状态。TIME_WAIT状态将持续2个MSL(Max Segment Lifetime),在Windows下默认为4分钟，即240秒。TIME_WAIT状态下的socket不能被回收使用. 具体现象是对于一个处理大量短连接的服务器,如果是由服务器主动关闭客户端的连接，将导致服务器端存在大量的处于TIME_WAIT状态的socket， 甚至比处于Established状态下的socket多的多,严重影响服务器的处理能力，甚至耗尽可用的socket，停止服务。</p>\n</blockquote>\n</li>\n<li><p>为什么需要TIME_WAIT？</p>\n<blockquote>\n<p>TIME_WAIT是TCP协议用以保证被重新分配的socket不会受到之前残留的延迟重发报文影响的机制,是必要的逻辑保证。</p>\n</blockquote>\n</li>\n<li><p>主动发起关闭连接的操作的一方将达到TIME_WAIT状态，而且这个状态要保持Maximum Segment Lifetime的两倍时间。为什么要这样做而不是直接进入CLOSED状态？</p>\n<p> 原因有二：</p>\n<blockquote>\n<p>一、保证TCP协议的全双工连接能够可靠关闭<br>二、保证这次连接的重复数据段从网络中消失</p>\n</blockquote>\n<p> 先说第一点，如果Client直接CLOSED了，那么由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，此时由于Client已经CLOSED了，就找不到与重发的FIN对应的连接，最后Server就会收到RST而不是ACK，Server就会以为是连接错误把问题报告给高层。这样的情况虽然不会造成数据丢失，但是却导致TCP协议不符合可靠连接的要求。所以，Client不是直接进入CLOSED，而是要保持TIME_WAIT，当再次收到FIN的时候，能够保证对方收到ACK，最后正确的关闭连接。</p>\n<p> 再说第二点，如果Client直接CLOSED，然后又再向Server发起一个新连接，我们不能保证这个新连接与刚关闭的连接的端口号是不同的。也就是说有可能新连接和老连接的端口号是相同的。一般来说不会发生什么问题，但是还是有特殊情况出现：假设新连接和已经关闭的老连接端口号是一样的，如果前一次连接的某些数据仍然滞留在网络中，这些延迟数据在建立新连接之后才到达Server，由于新连接和老连接的端口号是一样的，又因为TCP协议判断不同连接的依据是socket pair，于是，TCP协议就认为那个延迟的数据是属于新连接的，这样就和真正的新连接的数据包发生混淆了。所以TCP连接还要在TIME_WAIT状态等待2倍MSL，这样可以保证本次连接的所有数据都从网络中消失。<br> <a href=\"http://www.cnblogs.com/Jessy/p/3535612.html\" title=\"参考文献:TCP的三次握手和四次挥手\" target=\"_blank\" rel=\"external\">参考文献:TCP的三次握手和四次挥手</a></p>\n</li>\n</ol>\n<p><img src=\"/uploads/interview/26.jpg\" alt=\"\"><br><img src=\"/uploads/interview/27.jpg\" alt=\"\"><br><img src=\"/uploads/interview/28.jpg\" alt=\"\"></p>\n<ol>\n<li><p>java类加载过程：<br> 首先是加载：</p>\n<p> 这一块虚拟机要完成3件事：</p>\n<pre><code>通过一个类的全限定名来获取定义此类的二进制字节流。\n\n将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n\n在java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。 \n</code></pre><p> 然后是链接（验证，准备，解释），初始化<br>检验的目的：确保class文件的字节流信息符合jvm的口味，不会让jvm感到不舒服。假如class文件是由纯粹的java代码编译过来的，自然不会出现类似于数组越界、跳转到不存在的代码块等不健康的问题，因为一旦出现这种现象，编译器就会拒绝编译了。但是，跟之前说的一样，Class文件流不一定是从java源码编译过来的，也可能是从网络或者其他地方过来的，甚至你可以自己用16进制写，假如jvm不对这些数据进行校验的话，可能一些有害的字节流会让jvm完全崩溃。</p>\n</li>\n</ol>\n<p>检验主要经历几个步骤：文件格式验证-&gt;元数据验证-&gt;字节码验证-&gt;符号引用验证<br>用Class.forName(String className);来加载类的时候，也会执行初始化动作。注意:ClassLoader的loadClass(String className);方法只会加载并编译某类，并不会对其执行初始化。</p>\n<ol>\n<li>Java序列化和transient</li>\n</ol>\n<p>拦截器是基于java的反射机制的，而过滤器是基于函数回调。　　<br>拦截器不依赖与servlet容器，过滤器依赖与servlet容器。　　<br>拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。　<br>拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。<br>在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。<br>拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。</p>\n<h4 id=\"有关return和finally\"><a href=\"#有关return和finally\" class=\"headerlink\" title=\"有关return和finally\"></a>有关return和finally</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> jinyuanyao.com;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Hello world!</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> String result = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(method(<span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"comment\">//        the output is 2</span></span><br><span class=\"line\">        method(<span class=\"number\">0</span>);</span><br><span class=\"line\">        System.out.print(result);</span><br><span class=\"line\"><span class=\"comment\">//        the output is 2334</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">method</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            result += <span class=\"string\">\"2\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            result += <span class=\"string\">\"3\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result += <span class=\"string\">\"4\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总结：<br>1、不管有木有出现异常，finally块中代码都会执行；<br>2、当try和catch中有return时，finally仍然会执行；<br>3、finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，管finally中的代码怎么样，返回的值都不会改变，任然是之前保存的值），所以函数返回值是在finally执行前确定的；<br>4、finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。</p>\n","excerpt":"","more":"<p><img src=\"/uploads/interview/1.jpg\" alt=\"\"></p>\n<ol>\n<li>自我介绍<br> 让对方在最短的时间里了解你的教育背景，实习经历，工作经验，兴趣爱好，职业规划，性格特征，以及你的优势等等</li>\n<li>项目<br>项目简要介绍，你的主要工作，主要技术，难点，解决方案，心得体会</li>\n<li>运行时多态的解释：a.运行时多态是指程序中定义的引用变量所指向的具体类型和b.通过该引用变量发出的方法调用在编程时并不确定，而是在程序运行期间才确定，即一个引用变量倒底会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在由程序运行期间才能决定。当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误； <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">     <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">     \tSystem.out.println(<span class=\"string\">\"father\"</span>);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title\">Father</span></span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">say</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">  \tSystem.out.println(<span class=\"string\">\"son\"</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    ...;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Father son=<span class=\"keyword\">new</span> Son();</span><br><span class=\"line\">son.run();<span class=\"comment\">//编译出错</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"/uploads/interview/2.jpg\" alt=\"\"><br><img src=\"/uploads/interview/3.jpg\" alt=\"\"><br><img src=\"/uploads/interview/4.jpg\" alt=\"\"><br><img src=\"/uploads/interview/5.jpg\" alt=\"\"><br><img src=\"/uploads/interview/6.jpg\" alt=\"\"><br><img src=\"/uploads/interview/7.jpg\" alt=\"\"><br><img src=\"/uploads/interview/8.jpg\" alt=\"\"><br><img src=\"/uploads/interview/9.jpg\" alt=\"\"><br><img src=\"/uploads/interview/10.jpg\" alt=\"\"><br><img src=\"/uploads/interview/11.jpg\" alt=\"\"><br><img src=\"/uploads/interview/12.jpg\" alt=\"\"><br><img src=\"/uploads/interview/13.jpg\" alt=\"\"><br><img src=\"/uploads/interview/14.jpg\" alt=\"\"><br><img src=\"/uploads/interview/15.jpg\" alt=\"\"><br><img src=\"/uploads/interview/16.jpg\" alt=\"\"><br><img src=\"/uploads/interview/17.jpg\" alt=\"\"><br><img src=\"/uploads/interview/18.jpg\" alt=\"\"><br><img src=\"/uploads/interview/19.jpg\" alt=\"\"><br><img src=\"/uploads/interview/20.jpg\" alt=\"\"><br><img src=\"/uploads/interview/21.jpg\" alt=\"\"><br><img src=\"/uploads/interview/22.jpg\" alt=\"\"><br><img src=\"/uploads/interview/23.jpg\" alt=\"\"><br><img src=\"/uploads/interview/24.jpg\" alt=\"\"><br><img src=\"/uploads/interview/25.jpg\" alt=\"\"></p>\n<ol>\n<li><p>TCP的三次握手和四次挥手的补充<br>三次握手</p>\n<pre><code>* 第一次握手：建立连接时，客户端A发送SYN包（SYN=j）到服务器B，并进入SYN_SEND状态，等待服务器B确认。\n* 第二次握手：服务器B收到SYN包，必须确认客户A的SYN（ACK=j+1），同时自己也发送一个SYN包（SYN=k），即SYN+ACK包，此时服务器B进入SYN_RECV状态。\n* 第三次握手：客户端A收到服务器B的SYN＋ACK包，向服务器B发送确认包ACK（ACK=k+1），此包发送完毕，客户端A和服务器B进入ESTABLISHED状态，完成三次握手。\n</code></pre><p>完成三次握手，客户端与服务器开始传送数据。</p>\n<pre><code>确认号：其数值等于发送方的发送序号 +1(即接收方期望接收的下一个序列号)。\n</code></pre><p>四次挥手</p>\n<pre><code>* 客户端A发送一个FIN，用来关闭客户A到服务器B的数据传送。 \n* 服务器B收到这个FIN，它发回一个ACK，确认序号为收到的序号加1。和SYN一样，一个FIN将占用一个序号。 \n* 服务器B关闭与客户端A的连接，发送一个FIN给客户端A。 \n* 客户端A发回ACK报文确认，并将确认序号设置为收到序号加1。 \n</code></pre><p> CLOSE_WAIT</p>\n<blockquote>\n<p>发起TCP连接关闭的一方称为client，被动关闭的一方称为server。被动关闭的server收到FIN后，但未发出ACK的TCP状态是CLOSE_WAIT。出现这种状况一般都是由于server端代码的问题，如果你的服务器上出现大量CLOSE_WAIT，应该要考虑检查代码。</p>\n</blockquote>\n<p>TIME_WAIT</p>\n<blockquote>\n<p>根据TCP协议定义的3次握手断开连接规定,发起socket主动关闭的一方 socket将进入TIME_WAIT状态。TIME_WAIT状态将持续2个MSL(Max Segment Lifetime),在Windows下默认为4分钟，即240秒。TIME_WAIT状态下的socket不能被回收使用. 具体现象是对于一个处理大量短连接的服务器,如果是由服务器主动关闭客户端的连接，将导致服务器端存在大量的处于TIME_WAIT状态的socket， 甚至比处于Established状态下的socket多的多,严重影响服务器的处理能力，甚至耗尽可用的socket，停止服务。</p>\n</blockquote>\n</li>\n<li><p>为什么需要TIME_WAIT？</p>\n<blockquote>\n<p>TIME_WAIT是TCP协议用以保证被重新分配的socket不会受到之前残留的延迟重发报文影响的机制,是必要的逻辑保证。</p>\n</blockquote>\n</li>\n<li><p>主动发起关闭连接的操作的一方将达到TIME_WAIT状态，而且这个状态要保持Maximum Segment Lifetime的两倍时间。为什么要这样做而不是直接进入CLOSED状态？</p>\n<p> 原因有二：</p>\n<blockquote>\n<p>一、保证TCP协议的全双工连接能够可靠关闭<br>二、保证这次连接的重复数据段从网络中消失</p>\n</blockquote>\n<p> 先说第一点，如果Client直接CLOSED了，那么由于IP协议的不可靠性或者是其它网络原因，导致Server没有收到Client最后回复的ACK。那么Server就会在超时之后继续发送FIN，此时由于Client已经CLOSED了，就找不到与重发的FIN对应的连接，最后Server就会收到RST而不是ACK，Server就会以为是连接错误把问题报告给高层。这样的情况虽然不会造成数据丢失，但是却导致TCP协议不符合可靠连接的要求。所以，Client不是直接进入CLOSED，而是要保持TIME_WAIT，当再次收到FIN的时候，能够保证对方收到ACK，最后正确的关闭连接。</p>\n<p> 再说第二点，如果Client直接CLOSED，然后又再向Server发起一个新连接，我们不能保证这个新连接与刚关闭的连接的端口号是不同的。也就是说有可能新连接和老连接的端口号是相同的。一般来说不会发生什么问题，但是还是有特殊情况出现：假设新连接和已经关闭的老连接端口号是一样的，如果前一次连接的某些数据仍然滞留在网络中，这些延迟数据在建立新连接之后才到达Server，由于新连接和老连接的端口号是一样的，又因为TCP协议判断不同连接的依据是socket pair，于是，TCP协议就认为那个延迟的数据是属于新连接的，这样就和真正的新连接的数据包发生混淆了。所以TCP连接还要在TIME_WAIT状态等待2倍MSL，这样可以保证本次连接的所有数据都从网络中消失。<br> <a href=\"http://www.cnblogs.com/Jessy/p/3535612.html\" title=\"参考文献:TCP的三次握手和四次挥手\">参考文献:TCP的三次握手和四次挥手</a></p>\n</li>\n</ol>\n<p><img src=\"/uploads/interview/26.jpg\" alt=\"\"><br><img src=\"/uploads/interview/27.jpg\" alt=\"\"><br><img src=\"/uploads/interview/28.jpg\" alt=\"\"></p>\n<ol>\n<li><p>java类加载过程：<br> 首先是加载：</p>\n<p> 这一块虚拟机要完成3件事：</p>\n<pre><code>通过一个类的全限定名来获取定义此类的二进制字节流。\n\n将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n\n在java堆中生成一个代表这个类的java.lang.Class对象，作为方法区这些数据的访问入口。 \n</code></pre><p> 然后是链接（验证，准备，解释），初始化<br>检验的目的：确保class文件的字节流信息符合jvm的口味，不会让jvm感到不舒服。假如class文件是由纯粹的java代码编译过来的，自然不会出现类似于数组越界、跳转到不存在的代码块等不健康的问题，因为一旦出现这种现象，编译器就会拒绝编译了。但是，跟之前说的一样，Class文件流不一定是从java源码编译过来的，也可能是从网络或者其他地方过来的，甚至你可以自己用16进制写，假如jvm不对这些数据进行校验的话，可能一些有害的字节流会让jvm完全崩溃。</p>\n</li>\n</ol>\n<p>检验主要经历几个步骤：文件格式验证-&gt;元数据验证-&gt;字节码验证-&gt;符号引用验证<br>用Class.forName(String className);来加载类的时候，也会执行初始化动作。注意:ClassLoader的loadClass(String className);方法只会加载并编译某类，并不会对其执行初始化。</p>\n<ol>\n<li>Java序列化和transient</li>\n</ol>\n<p>拦截器是基于java的反射机制的，而过滤器是基于函数回调。　　<br>拦截器不依赖与servlet容器，过滤器依赖与servlet容器。　　<br>拦截器只能对action请求起作用，而过滤器则可以对几乎所有的请求起作用。　<br>拦截器可以访问action上下文、值栈里的对象，而过滤器不能访问。<br>在action的生命周期中，拦截器可以多次被调用，而过滤器只能在容器初始化时被调用一次。<br>拦截器可以获取IOC容器中的各个bean，而过滤器就不行，这点很重要，在拦截器里注入一个service，可以调用业务逻辑。</p>\n<h4 id=\"有关return和finally\"><a href=\"#有关return和finally\" class=\"headerlink\" title=\"有关return和finally\"></a>有关return和finally</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> jinyuanyao.com;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span><br><span class=\"line\"> * Hello world!</span><br><span class=\"line\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">App</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> String result = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Hello World!\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(method(<span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"comment\">//        the output is 2</span></span><br><span class=\"line\">        method(<span class=\"number\">0</span>);</span><br><span class=\"line\">        System.out.print(result);</span><br><span class=\"line\"><span class=\"comment\">//        the output is 2334</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> String <span class=\"title\">method</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (i == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            result += <span class=\"string\">\"2\"</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> result;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            result += <span class=\"string\">\"3\"</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        result += <span class=\"string\">\"4\"</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>总结：<br>1、不管有木有出现异常，finally块中代码都会执行；<br>2、当try和catch中有return时，finally仍然会执行；<br>3、finally是在return后面的表达式运算后执行的（此时并没有返回运算后的值，而是先把要返回的值保存起来，管finally中的代码怎么样，返回的值都不会改变，任然是之前保存的值），所以函数返回值是在finally执行前确定的；<br>4、finally中最好不要包含return，否则程序会提前退出，返回值不是try或catch中保存的返回值。</p>\n"},{"title":"Spring AOP相关内容","date":"2016-05-31T08:12:55.000Z","_content":"\n","source":"_posts/Spring-AOP相关内容.md","raw":"---\ntitle: Spring AOP相关内容\ndate: 2016-05-31 16:12:55\ntags:\n- Spring\ncategories:\n- Java\n\n---\n\n","slug":"Spring-AOP相关内容","published":1,"updated":"2016-05-31T08:14:03.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixtr000wbxboeofhhpq1","content":"","excerpt":"","more":""},{"title":"Spring IOC相关内容","date":"2016-05-30T05:02:07.000Z","_content":"\n### BeanFactory和ApplicationContext\n\n* BeanFactory在初始化容器时并未实例化Bean,而是在第一次访问才实例化目标，ApplicationContext在初始化应用上下文时就实例化了所有单实例的Bean。\n* ApplicationContext:XMlApplicationContext(ClassPathXmlApplicationContext、FileSystemApplicationContext)\nAnnotationConfigApplicationContext\nWebApplicationContext.\n\n\n\n### Bean的相关知识点\n\n##### 1.Bean的作用域\n* singleton:当一个bean的作用域为singleton, 那么Spring IoC容器中只会存在一个共享的bean实例，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。\n\n\t注意：Singleton作用域是Spring中的缺省作用域。要在XML中将bean定义成singleton，可以这样配置： \n\n<bean id=\"empServiceImpl\" class=\"cn.csdn.service.EmpServiceImpl\" scope=\"singleton\">\n\n* prototype：一个bean定义对应多个对象实例。Prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建一个新的bean实例。根据经验，对有状态的bean应该使用prototype作用域，而对无状态的bean则应该使用singleton作用域。\n\n* request：在一次HTTP请求中，一个bean定义对应一个实例；即每次HTTP请求将会有各自的bean实例， 它们依据某个bean定义创建而成。该作用域仅在基于web的Spring ApplicationContext情形下有效。\n\n\t考虑下面bean定义：\n\t\n\t\t<bean id=\"loginAction\" class=cn.csdn.LoginAction\" scope=\"request\"/>\n\n\t针对每次HTTP请求，Spring容器会根据loginAction bean定义创建一个全新的LoginAction bean实例， 且该loginAction bean实例仅在当前HTTP request内有效，因此可以根据需要放心的更改所建实例的内部状态， 而其他请求中根据loginAction bean定义创建的实例，将不会看到这些特定于某个请求的状态变化。 当处理请求结束，request作用域的bean实例将被销毁。\n\n* session：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。\n\n\t考虑下面bean定义：\n\n\t\t<bean id=\"userPreferences\" class=\"com.foo.UserPreferences\" scope=\"session\"/>\n\n\t针对某个HTTP Session，Spring容器会根据userPreferences bean定义创建一个全新的userPreferences bean实例， 且该userPreferences bean仅在当前HTTP Session内有效。 与request作用域一样，你可以根据需要放心的更改所创建实例的内部状态，而别的HTTP Session中根据userPreferences创建的实例， 将不会看到这些特定于某个HTTP Session的状态变化。 当HTTP Session最终被废弃的时候，在该HTTP Session作用域内的bean也会被废弃掉。\n\n* global session：在一个全局的HTTP Session中，一个bean定义对应一个实例。典型情况下，仅在使用portlet context的时候有效。该作用域仅在基于web的Spring ApplicationContext情形下有效。\n\n\t考虑下面bean定义：\n\n\t\t<bean id=\"userPreferences\" class=\"com.foo.UserPreferences\" scope=\"globalSession\"/>\n\n\tglobal session作用域类似于标准的HTTP Session作用域，不过它仅仅在基于portlet的web应用中才有意义。Portlet规范定义了全局Session的概念，它被所有构成某个portlet web应用的各种不同的portlet所共享。在global session作用域中定义的bean被限定于全局portlet Session的生命周期范围内。\n\n\t请注意：假如你在编写一个标准的基于Servlet的web应用，并且定义了一个或多个具有global session作用域的bean，系统会使用标准的HTTP Session作用域，并且不会引起任何错误。\n\n##### 2.Bean的命名\n\n* Spring配置文件中不能出现两个相同的id的Bean，但是可以出现两个相同name的Bean,如果有多个相同name的Bean，通过getBean(BeanName)将返回最后申明的那个Bean.\n* ![Bean的命名](/uploads/2.jpg \"Bean的命名\")\n\n##### 3.Bean的注入方式\n* Bean的注入方式: 1. 属性注入 2.构造函数注入（注意参数的顺序和类型） \n* ref属性：bean,local,parent\n\n##### 4.Bean的自动装配\n* ![过滤表达式](/uploads/5.spring.jpg \"过滤表达式\")\n\n##### 5.注解\n\n* Component、Service、Controller、Repository、Import、Configuration、Bean、Autowired、ImportResource、PostConstruct、PreDestory\n\n##### 6.过滤表达式\n\n* ![过滤表达式](/uploads/3.spring.jpg \"过滤表达式\")\n\n##### 7.Bean的配置方式有哪几种\n* 基于xml的配置\n* 基于注解的配置\n* 基于Java类的配置\n![Bean不同配置方式的比较](/uploads/2.spring.jpg \"Bean不同配置方式的比较\")\n![Bean不同配置方式的适用场合](/uploads/4.spring.jpg \"Bean不同配置方式的适用场合\")\n","source":"_posts/Spring-IOC相关内容.md","raw":"---\ntitle: Spring IOC相关内容\ndate: 2016-05-30 13:02:07\ntags:\n- Spring\ncategories:\n- Java\n\n---\n\n### BeanFactory和ApplicationContext\n\n* BeanFactory在初始化容器时并未实例化Bean,而是在第一次访问才实例化目标，ApplicationContext在初始化应用上下文时就实例化了所有单实例的Bean。\n* ApplicationContext:XMlApplicationContext(ClassPathXmlApplicationContext、FileSystemApplicationContext)\nAnnotationConfigApplicationContext\nWebApplicationContext.\n\n\n\n### Bean的相关知识点\n\n##### 1.Bean的作用域\n* singleton:当一个bean的作用域为singleton, 那么Spring IoC容器中只会存在一个共享的bean实例，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。\n\n\t注意：Singleton作用域是Spring中的缺省作用域。要在XML中将bean定义成singleton，可以这样配置： \n\n<bean id=\"empServiceImpl\" class=\"cn.csdn.service.EmpServiceImpl\" scope=\"singleton\">\n\n* prototype：一个bean定义对应多个对象实例。Prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建一个新的bean实例。根据经验，对有状态的bean应该使用prototype作用域，而对无状态的bean则应该使用singleton作用域。\n\n* request：在一次HTTP请求中，一个bean定义对应一个实例；即每次HTTP请求将会有各自的bean实例， 它们依据某个bean定义创建而成。该作用域仅在基于web的Spring ApplicationContext情形下有效。\n\n\t考虑下面bean定义：\n\t\n\t\t<bean id=\"loginAction\" class=cn.csdn.LoginAction\" scope=\"request\"/>\n\n\t针对每次HTTP请求，Spring容器会根据loginAction bean定义创建一个全新的LoginAction bean实例， 且该loginAction bean实例仅在当前HTTP request内有效，因此可以根据需要放心的更改所建实例的内部状态， 而其他请求中根据loginAction bean定义创建的实例，将不会看到这些特定于某个请求的状态变化。 当处理请求结束，request作用域的bean实例将被销毁。\n\n* session：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。\n\n\t考虑下面bean定义：\n\n\t\t<bean id=\"userPreferences\" class=\"com.foo.UserPreferences\" scope=\"session\"/>\n\n\t针对某个HTTP Session，Spring容器会根据userPreferences bean定义创建一个全新的userPreferences bean实例， 且该userPreferences bean仅在当前HTTP Session内有效。 与request作用域一样，你可以根据需要放心的更改所创建实例的内部状态，而别的HTTP Session中根据userPreferences创建的实例， 将不会看到这些特定于某个HTTP Session的状态变化。 当HTTP Session最终被废弃的时候，在该HTTP Session作用域内的bean也会被废弃掉。\n\n* global session：在一个全局的HTTP Session中，一个bean定义对应一个实例。典型情况下，仅在使用portlet context的时候有效。该作用域仅在基于web的Spring ApplicationContext情形下有效。\n\n\t考虑下面bean定义：\n\n\t\t<bean id=\"userPreferences\" class=\"com.foo.UserPreferences\" scope=\"globalSession\"/>\n\n\tglobal session作用域类似于标准的HTTP Session作用域，不过它仅仅在基于portlet的web应用中才有意义。Portlet规范定义了全局Session的概念，它被所有构成某个portlet web应用的各种不同的portlet所共享。在global session作用域中定义的bean被限定于全局portlet Session的生命周期范围内。\n\n\t请注意：假如你在编写一个标准的基于Servlet的web应用，并且定义了一个或多个具有global session作用域的bean，系统会使用标准的HTTP Session作用域，并且不会引起任何错误。\n\n##### 2.Bean的命名\n\n* Spring配置文件中不能出现两个相同的id的Bean，但是可以出现两个相同name的Bean,如果有多个相同name的Bean，通过getBean(BeanName)将返回最后申明的那个Bean.\n* ![Bean的命名](/uploads/2.jpg \"Bean的命名\")\n\n##### 3.Bean的注入方式\n* Bean的注入方式: 1. 属性注入 2.构造函数注入（注意参数的顺序和类型） \n* ref属性：bean,local,parent\n\n##### 4.Bean的自动装配\n* ![过滤表达式](/uploads/5.spring.jpg \"过滤表达式\")\n\n##### 5.注解\n\n* Component、Service、Controller、Repository、Import、Configuration、Bean、Autowired、ImportResource、PostConstruct、PreDestory\n\n##### 6.过滤表达式\n\n* ![过滤表达式](/uploads/3.spring.jpg \"过滤表达式\")\n\n##### 7.Bean的配置方式有哪几种\n* 基于xml的配置\n* 基于注解的配置\n* 基于Java类的配置\n![Bean不同配置方式的比较](/uploads/2.spring.jpg \"Bean不同配置方式的比较\")\n![Bean不同配置方式的适用场合](/uploads/4.spring.jpg \"Bean不同配置方式的适用场合\")\n","slug":"Spring-IOC相关内容","published":1,"updated":"2016-06-01T02:44:20.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixtt000zbxboe9x3okeq","content":"<h3 id=\"BeanFactory和ApplicationContext\"><a href=\"#BeanFactory和ApplicationContext\" class=\"headerlink\" title=\"BeanFactory和ApplicationContext\"></a>BeanFactory和ApplicationContext</h3><ul>\n<li>BeanFactory在初始化容器时并未实例化Bean,而是在第一次访问才实例化目标，ApplicationContext在初始化应用上下文时就实例化了所有单实例的Bean。</li>\n<li>ApplicationContext:XMlApplicationContext(ClassPathXmlApplicationContext、FileSystemApplicationContext)<br>AnnotationConfigApplicationContext<br>WebApplicationContext.</li>\n</ul>\n<h3 id=\"Bean的相关知识点\"><a href=\"#Bean的相关知识点\" class=\"headerlink\" title=\"Bean的相关知识点\"></a>Bean的相关知识点</h3><h5 id=\"1-Bean的作用域\"><a href=\"#1-Bean的作用域\" class=\"headerlink\" title=\"1.Bean的作用域\"></a>1.Bean的作用域</h5><ul>\n<li><p>singleton:当一个bean的作用域为singleton, 那么Spring IoC容器中只会存在一个共享的bean实例，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。</p>\n<p>  注意：Singleton作用域是Spring中的缺省作用域。要在XML中将bean定义成singleton，可以这样配置： </p>\n</li>\n</ul>\n<bean id=\"empServiceImpl\" class=\"cn.csdn.service.EmpServiceImpl\" scope=\"singleton\">\n\n<ul>\n<li><p>prototype：一个bean定义对应多个对象实例。Prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建一个新的bean实例。根据经验，对有状态的bean应该使用prototype作用域，而对无状态的bean则应该使用singleton作用域。</p>\n</li>\n<li><p>request：在一次HTTP请求中，一个bean定义对应一个实例；即每次HTTP请求将会有各自的bean实例， 它们依据某个bean定义创建而成。该作用域仅在基于web的Spring ApplicationContext情形下有效。</p>\n<p>  考虑下面bean定义：</p>\n<pre><code>&lt;bean id=&quot;loginAction&quot; class=cn.csdn.LoginAction&quot; scope=&quot;request&quot;/&gt;\n</code></pre><p>  针对每次HTTP请求，Spring容器会根据loginAction bean定义创建一个全新的LoginAction bean实例， 且该loginAction bean实例仅在当前HTTP request内有效，因此可以根据需要放心的更改所建实例的内部状态， 而其他请求中根据loginAction bean定义创建的实例，将不会看到这些特定于某个请求的状态变化。 当处理请求结束，request作用域的bean实例将被销毁。</p>\n</li>\n<li><p>session：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</p>\n<p>  考虑下面bean定义：</p>\n<pre><code>&lt;bean id=&quot;userPreferences&quot; class=&quot;com.foo.UserPreferences&quot; scope=&quot;session&quot;/&gt;\n</code></pre><p>  针对某个HTTP Session，Spring容器会根据userPreferences bean定义创建一个全新的userPreferences bean实例， 且该userPreferences bean仅在当前HTTP Session内有效。 与request作用域一样，你可以根据需要放心的更改所创建实例的内部状态，而别的HTTP Session中根据userPreferences创建的实例， 将不会看到这些特定于某个HTTP Session的状态变化。 当HTTP Session最终被废弃的时候，在该HTTP Session作用域内的bean也会被废弃掉。</p>\n</li>\n<li><p>global session：在一个全局的HTTP Session中，一个bean定义对应一个实例。典型情况下，仅在使用portlet context的时候有效。该作用域仅在基于web的Spring ApplicationContext情形下有效。</p>\n<p>  考虑下面bean定义：</p>\n<pre><code>&lt;bean id=&quot;userPreferences&quot; class=&quot;com.foo.UserPreferences&quot; scope=&quot;globalSession&quot;/&gt;\n</code></pre><p>  global session作用域类似于标准的HTTP Session作用域，不过它仅仅在基于portlet的web应用中才有意义。Portlet规范定义了全局Session的概念，它被所有构成某个portlet web应用的各种不同的portlet所共享。在global session作用域中定义的bean被限定于全局portlet Session的生命周期范围内。</p>\n<p>  请注意：假如你在编写一个标准的基于Servlet的web应用，并且定义了一个或多个具有global session作用域的bean，系统会使用标准的HTTP Session作用域，并且不会引起任何错误。</p>\n</li>\n</ul>\n<h5 id=\"2-Bean的命名\"><a href=\"#2-Bean的命名\" class=\"headerlink\" title=\"2.Bean的命名\"></a>2.Bean的命名</h5><ul>\n<li>Spring配置文件中不能出现两个相同的id的Bean，但是可以出现两个相同name的Bean,如果有多个相同name的Bean，通过getBean(BeanName)将返回最后申明的那个Bean.</li>\n<li><img src=\"/uploads/2.jpg\" alt=\"Bean的命名\" title=\"Bean的命名\"></li>\n</ul>\n<h5 id=\"3-Bean的注入方式\"><a href=\"#3-Bean的注入方式\" class=\"headerlink\" title=\"3.Bean的注入方式\"></a>3.Bean的注入方式</h5><ul>\n<li>Bean的注入方式: 1. 属性注入 2.构造函数注入（注意参数的顺序和类型） </li>\n<li>ref属性：bean,local,parent</li>\n</ul>\n<h5 id=\"4-Bean的自动装配\"><a href=\"#4-Bean的自动装配\" class=\"headerlink\" title=\"4.Bean的自动装配\"></a>4.Bean的自动装配</h5><ul>\n<li><img src=\"/uploads/5.spring.jpg\" alt=\"过滤表达式\" title=\"过滤表达式\"></li>\n</ul>\n<h5 id=\"5-注解\"><a href=\"#5-注解\" class=\"headerlink\" title=\"5.注解\"></a>5.注解</h5><ul>\n<li>Component、Service、Controller、Repository、Import、Configuration、Bean、Autowired、ImportResource、PostConstruct、PreDestory</li>\n</ul>\n<h5 id=\"6-过滤表达式\"><a href=\"#6-过滤表达式\" class=\"headerlink\" title=\"6.过滤表达式\"></a>6.过滤表达式</h5><ul>\n<li><img src=\"/uploads/3.spring.jpg\" alt=\"过滤表达式\" title=\"过滤表达式\"></li>\n</ul>\n<h5 id=\"7-Bean的配置方式有哪几种\"><a href=\"#7-Bean的配置方式有哪几种\" class=\"headerlink\" title=\"7.Bean的配置方式有哪几种\"></a>7.Bean的配置方式有哪几种</h5><ul>\n<li>基于xml的配置</li>\n<li>基于注解的配置</li>\n<li>基于Java类的配置<br><img src=\"/uploads/2.spring.jpg\" alt=\"Bean不同配置方式的比较\" title=\"Bean不同配置方式的比较\"><br><img src=\"/uploads/4.spring.jpg\" alt=\"Bean不同配置方式的适用场合\" title=\"Bean不同配置方式的适用场合\"></li>\n</ul>\n</bean>","excerpt":"","more":"<h3 id=\"BeanFactory和ApplicationContext\"><a href=\"#BeanFactory和ApplicationContext\" class=\"headerlink\" title=\"BeanFactory和ApplicationContext\"></a>BeanFactory和ApplicationContext</h3><ul>\n<li>BeanFactory在初始化容器时并未实例化Bean,而是在第一次访问才实例化目标，ApplicationContext在初始化应用上下文时就实例化了所有单实例的Bean。</li>\n<li>ApplicationContext:XMlApplicationContext(ClassPathXmlApplicationContext、FileSystemApplicationContext)<br>AnnotationConfigApplicationContext<br>WebApplicationContext.</li>\n</ul>\n<h3 id=\"Bean的相关知识点\"><a href=\"#Bean的相关知识点\" class=\"headerlink\" title=\"Bean的相关知识点\"></a>Bean的相关知识点</h3><h5 id=\"1-Bean的作用域\"><a href=\"#1-Bean的作用域\" class=\"headerlink\" title=\"1.Bean的作用域\"></a>1.Bean的作用域</h5><ul>\n<li><p>singleton:当一个bean的作用域为singleton, 那么Spring IoC容器中只会存在一个共享的bean实例，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。</p>\n<p>  注意：Singleton作用域是Spring中的缺省作用域。要在XML中将bean定义成singleton，可以这样配置： </p>\n</li>\n</ul>\n<bean id=\"empServiceImpl\" class=\"cn.csdn.service.EmpServiceImpl\" scope=\"singleton\">\n\n<ul>\n<li><p>prototype：一个bean定义对应多个对象实例。Prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建一个新的bean实例。根据经验，对有状态的bean应该使用prototype作用域，而对无状态的bean则应该使用singleton作用域。</p>\n</li>\n<li><p>request：在一次HTTP请求中，一个bean定义对应一个实例；即每次HTTP请求将会有各自的bean实例， 它们依据某个bean定义创建而成。该作用域仅在基于web的Spring ApplicationContext情形下有效。</p>\n<p>  考虑下面bean定义：</p>\n<pre><code>&lt;bean id=&quot;loginAction&quot; class=cn.csdn.LoginAction&quot; scope=&quot;request&quot;/&gt;\n</code></pre><p>  针对每次HTTP请求，Spring容器会根据loginAction bean定义创建一个全新的LoginAction bean实例， 且该loginAction bean实例仅在当前HTTP request内有效，因此可以根据需要放心的更改所建实例的内部状态， 而其他请求中根据loginAction bean定义创建的实例，将不会看到这些特定于某个请求的状态变化。 当处理请求结束，request作用域的bean实例将被销毁。</p>\n</li>\n<li><p>session：在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。</p>\n<p>  考虑下面bean定义：</p>\n<pre><code>&lt;bean id=&quot;userPreferences&quot; class=&quot;com.foo.UserPreferences&quot; scope=&quot;session&quot;/&gt;\n</code></pre><p>  针对某个HTTP Session，Spring容器会根据userPreferences bean定义创建一个全新的userPreferences bean实例， 且该userPreferences bean仅在当前HTTP Session内有效。 与request作用域一样，你可以根据需要放心的更改所创建实例的内部状态，而别的HTTP Session中根据userPreferences创建的实例， 将不会看到这些特定于某个HTTP Session的状态变化。 当HTTP Session最终被废弃的时候，在该HTTP Session作用域内的bean也会被废弃掉。</p>\n</li>\n<li><p>global session：在一个全局的HTTP Session中，一个bean定义对应一个实例。典型情况下，仅在使用portlet context的时候有效。该作用域仅在基于web的Spring ApplicationContext情形下有效。</p>\n<p>  考虑下面bean定义：</p>\n<pre><code>&lt;bean id=&quot;userPreferences&quot; class=&quot;com.foo.UserPreferences&quot; scope=&quot;globalSession&quot;/&gt;\n</code></pre><p>  global session作用域类似于标准的HTTP Session作用域，不过它仅仅在基于portlet的web应用中才有意义。Portlet规范定义了全局Session的概念，它被所有构成某个portlet web应用的各种不同的portlet所共享。在global session作用域中定义的bean被限定于全局portlet Session的生命周期范围内。</p>\n<p>  请注意：假如你在编写一个标准的基于Servlet的web应用，并且定义了一个或多个具有global session作用域的bean，系统会使用标准的HTTP Session作用域，并且不会引起任何错误。</p>\n</li>\n</ul>\n<h5 id=\"2-Bean的命名\"><a href=\"#2-Bean的命名\" class=\"headerlink\" title=\"2.Bean的命名\"></a>2.Bean的命名</h5><ul>\n<li>Spring配置文件中不能出现两个相同的id的Bean，但是可以出现两个相同name的Bean,如果有多个相同name的Bean，通过getBean(BeanName)将返回最后申明的那个Bean.</li>\n<li><img src=\"/uploads/2.jpg\" alt=\"Bean的命名\" title=\"Bean的命名\"></li>\n</ul>\n<h5 id=\"3-Bean的注入方式\"><a href=\"#3-Bean的注入方式\" class=\"headerlink\" title=\"3.Bean的注入方式\"></a>3.Bean的注入方式</h5><ul>\n<li>Bean的注入方式: 1. 属性注入 2.构造函数注入（注意参数的顺序和类型） </li>\n<li>ref属性：bean,local,parent</li>\n</ul>\n<h5 id=\"4-Bean的自动装配\"><a href=\"#4-Bean的自动装配\" class=\"headerlink\" title=\"4.Bean的自动装配\"></a>4.Bean的自动装配</h5><ul>\n<li><img src=\"/uploads/5.spring.jpg\" alt=\"过滤表达式\" title=\"过滤表达式\"></li>\n</ul>\n<h5 id=\"5-注解\"><a href=\"#5-注解\" class=\"headerlink\" title=\"5.注解\"></a>5.注解</h5><ul>\n<li>Component、Service、Controller、Repository、Import、Configuration、Bean、Autowired、ImportResource、PostConstruct、PreDestory</li>\n</ul>\n<h5 id=\"6-过滤表达式\"><a href=\"#6-过滤表达式\" class=\"headerlink\" title=\"6.过滤表达式\"></a>6.过滤表达式</h5><ul>\n<li><img src=\"/uploads/3.spring.jpg\" alt=\"过滤表达式\" title=\"过滤表达式\"></li>\n</ul>\n<h5 id=\"7-Bean的配置方式有哪几种\"><a href=\"#7-Bean的配置方式有哪几种\" class=\"headerlink\" title=\"7.Bean的配置方式有哪几种\"></a>7.Bean的配置方式有哪几种</h5><ul>\n<li>基于xml的配置</li>\n<li>基于注解的配置</li>\n<li>基于Java类的配置<br><img src=\"/uploads/2.spring.jpg\" alt=\"Bean不同配置方式的比较\" title=\"Bean不同配置方式的比较\"><br><img src=\"/uploads/4.spring.jpg\" alt=\"Bean不同配置方式的适用场合\" title=\"Bean不同配置方式的适用场合\"></li>\n</ul>\n"},{"title":"Zookeeper Leader选举算法","date":"2016-07-03T05:16:28.000Z","_content":"","source":"_posts/Zookeeper-Leader选举算法.md","raw":"---\ntitle: Zookeeper Leader选举算法\ndate: 2016-07-03 13:16:28\ntags:\n---\n","slug":"Zookeeper-Leader选举算法","published":1,"updated":"2016-07-03T05:16:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixtv0012bxbo09r8vwg3","content":"","excerpt":"","more":""},{"title":"String池化及intern方法的作用","date":"2016-05-28T11:16:57.000Z","_content":"## String池化\n>String池 ：String是不可改变的，为了提高效率Java引用了字符串池的概念，例如new String(\"abc\");首先会在String池中创建一个对象“abc”，因为有NEW的存在所以会分配地址空间copy String池的内容。当出现的String对象在String池中不存在时即在String池中创建该对象。\n\n字符串对象的创建方式有两种如下:\n\n\tString s1 = new String(\"\");//第一种不会入池\n\t\n\tString s2 = \"\";//第二种看情况而定(等号右边如果是常量则入池,非常量则不入池)\n\n例:\n\n\tString s3 = \"a\" + \"b\"; //\"a\"是常量,\"b\"是常量,常量+常量=常量,所以会入池.\n\n\tString s4 = s1 + \"b\";   //s1是变量,\"b\"是常量,变量+常量!=常量,所以不会入池.\n\n一旦入池的话,就会先查找池中有无此对象.如果有此对象,则让对象引用指向此对象;如果无此对象,则先创建此对象,再让对象引用指向此对象.\n\n## intern()\n\n> 存在于.class文件中的常量池，在运行期被JVM装载，并且可以扩充。String的intern()方法就是扩充常量池的一个方法；当一个String实例str调用intern()方法时，Java查找常量池中是否有相同Unicode的字符串常量，如果有，则返回其的引用，如果没有，则在常量池中增加一个Unicode等于str的字符串并返回它的引用；\n\n例3：\n\n    String s0= “kvill”;  \n    String s1=new String(”kvill”);  \n    String s2=new String(“kvill”);  \n    System.out.println( s0==s1 );  \n    System.out.println( “**********” );  \n    s1.intern();  \n    s2=s2.intern(); //把常量池中“kvill”的引用赋给s2  \n    System.out.println( s0==s1);  \n    System.out.println( s0==s1.intern() );  \n    System.out.println( s0==s2 );  \n\n结果为：\n\n    false  \n    **********  \n    false //虽然执行了s1.intern(),但它的返回值没有赋给s1  \n    true //说明s1.intern()返回的是常量池中”kvill”的引用  \n    true  \n\n最后我再破除一个错误的理解：\n\n有人说，\"使用String.intern()方法则可以将一个String类的保存到一个全局String表中，如果具有相同值的Unicode字符串已经在这个表中，那么该方法返回表中已有字符串的地址，如果在表中没有相同值的字符串，则将自己的地址注册到表中\"。如果我把他说的这个全局的String表理解为常量池的话，他的最后一句话，“**如果在表中没有相同值的字符串，则将自己的地址注册到表中**”是错的：\n\n看例4：\n\n    String s1=new String(\"kvill\");  \n    String s2=s1.intern();  \n    System.out.println( s1==s1.intern() );  \n    System.out.println( s1+\" \"+s2 );  \n    System.out.println( s2==s1.intern() );  \n\n结果：\n\n    false \n    kvill kvill  \n    true  \n\n在这个类中我们没有声名一个”kvill”常量，所以常量池中一开始是没有”kvill”的，当我们调用s1.intern()后就在常量池中新添加了一个”kvill”常量，原来的不在常量池中的”kvill”仍然存在，也就不是“将自己的地址注册到常量池中”了。\n","source":"_posts/String池化及intern方法的作用.md","raw":"---\ntitle: String池化及intern方法的作用\ndate: 2016-05-28 19:16:57\ntags:\n- 面试\ncategories:\n- Java\n\n---\n## String池化\n>String池 ：String是不可改变的，为了提高效率Java引用了字符串池的概念，例如new String(\"abc\");首先会在String池中创建一个对象“abc”，因为有NEW的存在所以会分配地址空间copy String池的内容。当出现的String对象在String池中不存在时即在String池中创建该对象。\n\n字符串对象的创建方式有两种如下:\n\n\tString s1 = new String(\"\");//第一种不会入池\n\t\n\tString s2 = \"\";//第二种看情况而定(等号右边如果是常量则入池,非常量则不入池)\n\n例:\n\n\tString s3 = \"a\" + \"b\"; //\"a\"是常量,\"b\"是常量,常量+常量=常量,所以会入池.\n\n\tString s4 = s1 + \"b\";   //s1是变量,\"b\"是常量,变量+常量!=常量,所以不会入池.\n\n一旦入池的话,就会先查找池中有无此对象.如果有此对象,则让对象引用指向此对象;如果无此对象,则先创建此对象,再让对象引用指向此对象.\n\n## intern()\n\n> 存在于.class文件中的常量池，在运行期被JVM装载，并且可以扩充。String的intern()方法就是扩充常量池的一个方法；当一个String实例str调用intern()方法时，Java查找常量池中是否有相同Unicode的字符串常量，如果有，则返回其的引用，如果没有，则在常量池中增加一个Unicode等于str的字符串并返回它的引用；\n\n例3：\n\n    String s0= “kvill”;  \n    String s1=new String(”kvill”);  \n    String s2=new String(“kvill”);  \n    System.out.println( s0==s1 );  \n    System.out.println( “**********” );  \n    s1.intern();  \n    s2=s2.intern(); //把常量池中“kvill”的引用赋给s2  \n    System.out.println( s0==s1);  \n    System.out.println( s0==s1.intern() );  \n    System.out.println( s0==s2 );  \n\n结果为：\n\n    false  \n    **********  \n    false //虽然执行了s1.intern(),但它的返回值没有赋给s1  \n    true //说明s1.intern()返回的是常量池中”kvill”的引用  \n    true  \n\n最后我再破除一个错误的理解：\n\n有人说，\"使用String.intern()方法则可以将一个String类的保存到一个全局String表中，如果具有相同值的Unicode字符串已经在这个表中，那么该方法返回表中已有字符串的地址，如果在表中没有相同值的字符串，则将自己的地址注册到表中\"。如果我把他说的这个全局的String表理解为常量池的话，他的最后一句话，“**如果在表中没有相同值的字符串，则将自己的地址注册到表中**”是错的：\n\n看例4：\n\n    String s1=new String(\"kvill\");  \n    String s2=s1.intern();  \n    System.out.println( s1==s1.intern() );  \n    System.out.println( s1+\" \"+s2 );  \n    System.out.println( s2==s1.intern() );  \n\n结果：\n\n    false \n    kvill kvill  \n    true  \n\n在这个类中我们没有声名一个”kvill”常量，所以常量池中一开始是没有”kvill”的，当我们调用s1.intern()后就在常量池中新添加了一个”kvill”常量，原来的不在常量池中的”kvill”仍然存在，也就不是“将自己的地址注册到常量池中”了。\n","slug":"String池化及intern方法的作用","published":1,"updated":"2016-05-28T11:48:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixtz0015bxboas0masaw","content":"<h2 id=\"String池化\"><a href=\"#String池化\" class=\"headerlink\" title=\"String池化\"></a>String池化</h2><blockquote>\n<p>String池 ：String是不可改变的，为了提高效率Java引用了字符串池的概念，例如new String(“abc”);首先会在String池中创建一个对象“abc”，因为有NEW的存在所以会分配地址空间copy String池的内容。当出现的String对象在String池中不存在时即在String池中创建该对象。</p>\n</blockquote>\n<p>字符串对象的创建方式有两种如下:</p>\n<pre><code>String s1 = new String(&quot;&quot;);//第一种不会入池\n\nString s2 = &quot;&quot;;//第二种看情况而定(等号右边如果是常量则入池,非常量则不入池)\n</code></pre><p>例:</p>\n<pre><code>String s3 = &quot;a&quot; + &quot;b&quot;; //&quot;a&quot;是常量,&quot;b&quot;是常量,常量+常量=常量,所以会入池.\n\nString s4 = s1 + &quot;b&quot;;   //s1是变量,&quot;b&quot;是常量,变量+常量!=常量,所以不会入池.\n</code></pre><p>一旦入池的话,就会先查找池中有无此对象.如果有此对象,则让对象引用指向此对象;如果无此对象,则先创建此对象,再让对象引用指向此对象.</p>\n<h2 id=\"intern\"><a href=\"#intern\" class=\"headerlink\" title=\"intern()\"></a>intern()</h2><blockquote>\n<p>存在于.class文件中的常量池，在运行期被JVM装载，并且可以扩充。String的intern()方法就是扩充常量池的一个方法；当一个String实例str调用intern()方法时，Java查找常量池中是否有相同Unicode的字符串常量，如果有，则返回其的引用，如果没有，则在常量池中增加一个Unicode等于str的字符串并返回它的引用；</p>\n</blockquote>\n<p>例3：</p>\n<pre><code>String s0= “kvill”;  \nString s1=new String(”kvill”);  \nString s2=new String(“kvill”);  \nSystem.out.println( s0==s1 );  \nSystem.out.println( “**********” );  \ns1.intern();  \ns2=s2.intern(); //把常量池中“kvill”的引用赋给s2  \nSystem.out.println( s0==s1);  \nSystem.out.println( s0==s1.intern() );  \nSystem.out.println( s0==s2 );  \n</code></pre><p>结果为：</p>\n<pre><code>false  \n**********  \nfalse //虽然执行了s1.intern(),但它的返回值没有赋给s1  \ntrue //说明s1.intern()返回的是常量池中”kvill”的引用  \ntrue  \n</code></pre><p>最后我再破除一个错误的理解：</p>\n<p>有人说，”使用String.intern()方法则可以将一个String类的保存到一个全局String表中，如果具有相同值的Unicode字符串已经在这个表中，那么该方法返回表中已有字符串的地址，如果在表中没有相同值的字符串，则将自己的地址注册到表中”。如果我把他说的这个全局的String表理解为常量池的话，他的最后一句话，“<strong>如果在表中没有相同值的字符串，则将自己的地址注册到表中</strong>”是错的：</p>\n<p>看例4：</p>\n<pre><code>String s1=new String(&quot;kvill&quot;);  \nString s2=s1.intern();  \nSystem.out.println( s1==s1.intern() );  \nSystem.out.println( s1+&quot; &quot;+s2 );  \nSystem.out.println( s2==s1.intern() );  \n</code></pre><p>结果：</p>\n<pre><code>false \nkvill kvill  \ntrue  \n</code></pre><p>在这个类中我们没有声名一个”kvill”常量，所以常量池中一开始是没有”kvill”的，当我们调用s1.intern()后就在常量池中新添加了一个”kvill”常量，原来的不在常量池中的”kvill”仍然存在，也就不是“将自己的地址注册到常量池中”了。</p>\n","excerpt":"","more":"<h2 id=\"String池化\"><a href=\"#String池化\" class=\"headerlink\" title=\"String池化\"></a>String池化</h2><blockquote>\n<p>String池 ：String是不可改变的，为了提高效率Java引用了字符串池的概念，例如new String(“abc”);首先会在String池中创建一个对象“abc”，因为有NEW的存在所以会分配地址空间copy String池的内容。当出现的String对象在String池中不存在时即在String池中创建该对象。</p>\n</blockquote>\n<p>字符串对象的创建方式有两种如下:</p>\n<pre><code>String s1 = new String(&quot;&quot;);//第一种不会入池\n\nString s2 = &quot;&quot;;//第二种看情况而定(等号右边如果是常量则入池,非常量则不入池)\n</code></pre><p>例:</p>\n<pre><code>String s3 = &quot;a&quot; + &quot;b&quot;; //&quot;a&quot;是常量,&quot;b&quot;是常量,常量+常量=常量,所以会入池.\n\nString s4 = s1 + &quot;b&quot;;   //s1是变量,&quot;b&quot;是常量,变量+常量!=常量,所以不会入池.\n</code></pre><p>一旦入池的话,就会先查找池中有无此对象.如果有此对象,则让对象引用指向此对象;如果无此对象,则先创建此对象,再让对象引用指向此对象.</p>\n<h2 id=\"intern\"><a href=\"#intern\" class=\"headerlink\" title=\"intern()\"></a>intern()</h2><blockquote>\n<p>存在于.class文件中的常量池，在运行期被JVM装载，并且可以扩充。String的intern()方法就是扩充常量池的一个方法；当一个String实例str调用intern()方法时，Java查找常量池中是否有相同Unicode的字符串常量，如果有，则返回其的引用，如果没有，则在常量池中增加一个Unicode等于str的字符串并返回它的引用；</p>\n</blockquote>\n<p>例3：</p>\n<pre><code>String s0= “kvill”;  \nString s1=new String(”kvill”);  \nString s2=new String(“kvill”);  \nSystem.out.println( s0==s1 );  \nSystem.out.println( “**********” );  \ns1.intern();  \ns2=s2.intern(); //把常量池中“kvill”的引用赋给s2  \nSystem.out.println( s0==s1);  \nSystem.out.println( s0==s1.intern() );  \nSystem.out.println( s0==s2 );  \n</code></pre><p>结果为：</p>\n<pre><code>false  \n**********  \nfalse //虽然执行了s1.intern(),但它的返回值没有赋给s1  \ntrue //说明s1.intern()返回的是常量池中”kvill”的引用  \ntrue  \n</code></pre><p>最后我再破除一个错误的理解：</p>\n<p>有人说，”使用String.intern()方法则可以将一个String类的保存到一个全局String表中，如果具有相同值的Unicode字符串已经在这个表中，那么该方法返回表中已有字符串的地址，如果在表中没有相同值的字符串，则将自己的地址注册到表中”。如果我把他说的这个全局的String表理解为常量池的话，他的最后一句话，“<strong>如果在表中没有相同值的字符串，则将自己的地址注册到表中</strong>”是错的：</p>\n<p>看例4：</p>\n<pre><code>String s1=new String(&quot;kvill&quot;);  \nString s2=s1.intern();  \nSystem.out.println( s1==s1.intern() );  \nSystem.out.println( s1+&quot; &quot;+s2 );  \nSystem.out.println( s2==s1.intern() );  \n</code></pre><p>结果：</p>\n<pre><code>false \nkvill kvill  \ntrue  \n</code></pre><p>在这个类中我们没有声名一个”kvill”常量，所以常量池中一开始是没有”kvill”的，当我们调用s1.intern()后就在常量池中新添加了一个”kvill”常量，原来的不在常量池中的”kvill”仍然存在，也就不是“将自己的地址注册到常量池中”了。</p>\n"},{"title":"mongoDB搭建与配置","date":"2016-06-12T06:17:06.000Z","_content":"\n### 下载及安装\n\n1.1 在下面的地址选择适合自己的系统下载：\n[MongDB下载官网](https://www.mongodb.com/download-center?jmp=docs&_ga=1.240239499.942098647.1465695750#community )\n1.2 将zip文件解压放到盘符的根目录（如C：或D：），为了方便建议文件夹命名尽量简短如（d:\\mongodb)\n1.3 创建数据库文件的存放位置，比如d:/mongodb/data/db。启动mongodb服务之前需要必须创建数据库文件的存放文件夹，否则命令不会自动创建，而且不能启动成功。\n1.4 打开cmd（windows键+r输入cmd）命令行，进入D:\\mongodb\\bin目录（如图先输入d:进入d盘然后输入cd d:\\mongodb\\bin），\n输入如下的命令启动mongodb服务：\n\n\tD:/mongodb/bin>mongod --dbpath D:\\mongodb\\data\\db\n\n\n### 安装服务\n2.1 在d:\\mongodb\\data下新建文件夹log（存放日志文件）并且新建文件mongodb.log\n![文件夹相对位置](/uploads/6.mongo.png \"文件夹相对位置\") \n2.2 进入：D:/mongodb/bin输入\n\n\tmongod -dbpath \"d:\\mongodb\\data\\db\" -logpath \"d:\\mongodb\\data\\log\\mongodb.log\" -install -serviceName \"MongoDB\"（这里必须以管理员身份运行）\n\n此时服务已经安装成功，运行\n\n\t>net start mongodb   (开启服务)\n\n\t>net stop mongodb   (关闭服务)\n\n2.3 删除MongoDB Service\n\n\tmongod -dbpath \"d:\\mongodb\\data\\db\" -logpath \"d:\\mongodb\\data\\log\\mongodb.log\" -remove -serviceName \"MongoDB\";\n\n### 基本操作\n以下命令都是要进入mongodb shell才能操作，cmd进入：D:/mongodb/bin输入下mongo\n\n3.1 新建数据库RealTimeClass\n\n\tuse RealTimeClass;\n\t\n3.2 新建用户并给与权限\n\t\n\tdb.createUser({\"user\":\"root\",\"pwd\":\"123456\",\"roles\":[{role:\"dbOwner\",db:\"RealTimeClass\"}]});\n\t\n注意一点，帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)。\n\n```bash\n\n> use admin\nswitched to db admin\n> db.createUser(\n...   {\n...     user: \"root\",\n...     pwd: \"123456\",\n...     roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ]\n...   }\n... )\nSuccessfully added user: {\n    \"user\" : \"dba\",\n    \"roles\" : [\n        {\n            \"role\" : \"userAdminAnyDatabase\",\n            \"db\" : \"admin\"\n        }\n    ]\n}\n\n```\n","source":"_posts/mongoDB搭建与配置.md","raw":"---\ntitle: mongoDB搭建与配置\ndate: 2016-06-12 14:17:06\ntags:\n- MongoDB\ncategories:\n- 数据库\n\n---\n\n### 下载及安装\n\n1.1 在下面的地址选择适合自己的系统下载：\n[MongDB下载官网](https://www.mongodb.com/download-center?jmp=docs&_ga=1.240239499.942098647.1465695750#community )\n1.2 将zip文件解压放到盘符的根目录（如C：或D：），为了方便建议文件夹命名尽量简短如（d:\\mongodb)\n1.3 创建数据库文件的存放位置，比如d:/mongodb/data/db。启动mongodb服务之前需要必须创建数据库文件的存放文件夹，否则命令不会自动创建，而且不能启动成功。\n1.4 打开cmd（windows键+r输入cmd）命令行，进入D:\\mongodb\\bin目录（如图先输入d:进入d盘然后输入cd d:\\mongodb\\bin），\n输入如下的命令启动mongodb服务：\n\n\tD:/mongodb/bin>mongod --dbpath D:\\mongodb\\data\\db\n\n\n### 安装服务\n2.1 在d:\\mongodb\\data下新建文件夹log（存放日志文件）并且新建文件mongodb.log\n![文件夹相对位置](/uploads/6.mongo.png \"文件夹相对位置\") \n2.2 进入：D:/mongodb/bin输入\n\n\tmongod -dbpath \"d:\\mongodb\\data\\db\" -logpath \"d:\\mongodb\\data\\log\\mongodb.log\" -install -serviceName \"MongoDB\"（这里必须以管理员身份运行）\n\n此时服务已经安装成功，运行\n\n\t>net start mongodb   (开启服务)\n\n\t>net stop mongodb   (关闭服务)\n\n2.3 删除MongoDB Service\n\n\tmongod -dbpath \"d:\\mongodb\\data\\db\" -logpath \"d:\\mongodb\\data\\log\\mongodb.log\" -remove -serviceName \"MongoDB\";\n\n### 基本操作\n以下命令都是要进入mongodb shell才能操作，cmd进入：D:/mongodb/bin输入下mongo\n\n3.1 新建数据库RealTimeClass\n\n\tuse RealTimeClass;\n\t\n3.2 新建用户并给与权限\n\t\n\tdb.createUser({\"user\":\"root\",\"pwd\":\"123456\",\"roles\":[{role:\"dbOwner\",db:\"RealTimeClass\"}]});\n\t\n注意一点，帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)。\n\n```bash\n\n> use admin\nswitched to db admin\n> db.createUser(\n...   {\n...     user: \"root\",\n...     pwd: \"123456\",\n...     roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ]\n...   }\n... )\nSuccessfully added user: {\n    \"user\" : \"dba\",\n    \"roles\" : [\n        {\n            \"role\" : \"userAdminAnyDatabase\",\n            \"db\" : \"admin\"\n        }\n    ]\n}\n\n```\n","slug":"mongoDB搭建与配置","published":1,"updated":"2016-06-12T07:55:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixu20018bxbojeg9udj0","content":"<h3 id=\"下载及安装\"><a href=\"#下载及安装\" class=\"headerlink\" title=\"下载及安装\"></a>下载及安装</h3><p>1.1 在下面的地址选择适合自己的系统下载：<br><a href=\"https://www.mongodb.com/download-center?jmp=docs&amp;_ga=1.240239499.942098647.1465695750#community\" target=\"_blank\" rel=\"external\">MongDB下载官网</a><br>1.2 将zip文件解压放到盘符的根目录（如C：或D：），为了方便建议文件夹命名尽量简短如（d:\\mongodb)<br>1.3 创建数据库文件的存放位置，比如d:/mongodb/data/db。启动mongodb服务之前需要必须创建数据库文件的存放文件夹，否则命令不会自动创建，而且不能启动成功。<br>1.4 打开cmd（windows键+r输入cmd）命令行，进入D:\\mongodb\\bin目录（如图先输入d:进入d盘然后输入cd d:\\mongodb\\bin），<br>输入如下的命令启动mongodb服务：</p>\n<pre><code>D:/mongodb/bin&gt;mongod --dbpath D:\\mongodb\\data\\db\n</code></pre><h3 id=\"安装服务\"><a href=\"#安装服务\" class=\"headerlink\" title=\"安装服务\"></a>安装服务</h3><p>2.1 在d:\\mongodb\\data下新建文件夹log（存放日志文件）并且新建文件mongodb.log<br><img src=\"/uploads/6.mongo.png\" alt=\"文件夹相对位置\" title=\"文件夹相对位置\"><br>2.2 进入：D:/mongodb/bin输入</p>\n<pre><code>mongod -dbpath &quot;d:\\mongodb\\data\\db&quot; -logpath &quot;d:\\mongodb\\data\\log\\mongodb.log&quot; -install -serviceName &quot;MongoDB&quot;（这里必须以管理员身份运行）\n</code></pre><p>此时服务已经安装成功，运行</p>\n<pre><code>&gt;net start mongodb   (开启服务)\n\n&gt;net stop mongodb   (关闭服务)\n</code></pre><p>2.3 删除MongoDB Service</p>\n<pre><code>mongod -dbpath &quot;d:\\mongodb\\data\\db&quot; -logpath &quot;d:\\mongodb\\data\\log\\mongodb.log&quot; -remove -serviceName &quot;MongoDB&quot;;\n</code></pre><h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><p>以下命令都是要进入mongodb shell才能操作，cmd进入：D:/mongodb/bin输入下mongo</p>\n<p>3.1 新建数据库RealTimeClass</p>\n<pre><code>use RealTimeClass;\n</code></pre><p>3.2 新建用户并给与权限</p>\n<pre><code>db.createUser({&quot;user&quot;:&quot;root&quot;,&quot;pwd&quot;:&quot;123456&quot;,&quot;roles&quot;:[{role:&quot;dbOwner&quot;,db:&quot;RealTimeClass&quot;}]});\n</code></pre><p>注意一点，帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt; use admin</span><br><span class=\"line\">switched to db admin</span><br><span class=\"line\">&gt; db.createUser(</span><br><span class=\"line\">...   &#123;</span><br><span class=\"line\">...     user: <span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">...     <span class=\"built_in\">pwd</span>: <span class=\"string\">\"123456\"</span>,</span><br><span class=\"line\">...     roles: [ &#123; role: <span class=\"string\">\"userAdminAnyDatabase\"</span>, db: <span class=\"string\">\"admin\"</span> &#125; ]</span><br><span class=\"line\">...   &#125;</span><br><span class=\"line\">... )</span><br><span class=\"line\">Successfully added user: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"user\"</span> : <span class=\"string\">\"dba\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"roles\"</span> : [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"role\"</span> : <span class=\"string\">\"userAdminAnyDatabase\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"db\"</span> : <span class=\"string\">\"admin\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","excerpt":"","more":"<h3 id=\"下载及安装\"><a href=\"#下载及安装\" class=\"headerlink\" title=\"下载及安装\"></a>下载及安装</h3><p>1.1 在下面的地址选择适合自己的系统下载：<br><a href=\"https://www.mongodb.com/download-center?jmp=docs&amp;_ga=1.240239499.942098647.1465695750#community\">MongDB下载官网</a><br>1.2 将zip文件解压放到盘符的根目录（如C：或D：），为了方便建议文件夹命名尽量简短如（d:\\mongodb)<br>1.3 创建数据库文件的存放位置，比如d:/mongodb/data/db。启动mongodb服务之前需要必须创建数据库文件的存放文件夹，否则命令不会自动创建，而且不能启动成功。<br>1.4 打开cmd（windows键+r输入cmd）命令行，进入D:\\mongodb\\bin目录（如图先输入d:进入d盘然后输入cd d:\\mongodb\\bin），<br>输入如下的命令启动mongodb服务：</p>\n<pre><code>D:/mongodb/bin&gt;mongod --dbpath D:\\mongodb\\data\\db\n</code></pre><h3 id=\"安装服务\"><a href=\"#安装服务\" class=\"headerlink\" title=\"安装服务\"></a>安装服务</h3><p>2.1 在d:\\mongodb\\data下新建文件夹log（存放日志文件）并且新建文件mongodb.log<br><img src=\"/uploads/6.mongo.png\" alt=\"文件夹相对位置\" title=\"文件夹相对位置\"><br>2.2 进入：D:/mongodb/bin输入</p>\n<pre><code>mongod -dbpath &quot;d:\\mongodb\\data\\db&quot; -logpath &quot;d:\\mongodb\\data\\log\\mongodb.log&quot; -install -serviceName &quot;MongoDB&quot;（这里必须以管理员身份运行）\n</code></pre><p>此时服务已经安装成功，运行</p>\n<pre><code>&gt;net start mongodb   (开启服务)\n\n&gt;net stop mongodb   (关闭服务)\n</code></pre><p>2.3 删除MongoDB Service</p>\n<pre><code>mongod -dbpath &quot;d:\\mongodb\\data\\db&quot; -logpath &quot;d:\\mongodb\\data\\log\\mongodb.log&quot; -remove -serviceName &quot;MongoDB&quot;;\n</code></pre><h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><p>以下命令都是要进入mongodb shell才能操作，cmd进入：D:/mongodb/bin输入下mongo</p>\n<p>3.1 新建数据库RealTimeClass</p>\n<pre><code>use RealTimeClass;\n</code></pre><p>3.2 新建用户并给与权限</p>\n<pre><code>db.createUser({&quot;user&quot;:&quot;root&quot;,&quot;pwd&quot;:&quot;123456&quot;,&quot;roles&quot;:[{role:&quot;dbOwner&quot;,db:&quot;RealTimeClass&quot;}]});\n</code></pre><p>注意一点，帐号是跟着库走的，所以在指定库里授权，必须也在指定库里验证(auth)。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt; use admin</span><br><span class=\"line\">switched to db admin</span><br><span class=\"line\">&gt; db.createUser(</span><br><span class=\"line\">...   &#123;</span><br><span class=\"line\">...     user: <span class=\"string\">\"root\"</span>,</span><br><span class=\"line\">...     <span class=\"built_in\">pwd</span>: <span class=\"string\">\"123456\"</span>,</span><br><span class=\"line\">...     roles: [ &#123; role: <span class=\"string\">\"userAdminAnyDatabase\"</span>, db: <span class=\"string\">\"admin\"</span> &#125; ]</span><br><span class=\"line\">...   &#125;</span><br><span class=\"line\">... )</span><br><span class=\"line\">Successfully added user: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"user\"</span> : <span class=\"string\">\"dba\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"roles\"</span> : [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"string\">\"role\"</span> : <span class=\"string\">\"userAdminAnyDatabase\"</span>,</span><br><span class=\"line\">            <span class=\"string\">\"db\"</span> : <span class=\"string\">\"admin\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"单例模式你不一定懂","date":"2016-06-27T10:30:11.000Z","_content":"\n### 常见单例模式\n\n首先我们来看看常见的单例模式都哪些实现方式：\n\n#### 饿汉式：\n \n ```java\n public class Singleton{\n \tprivate static Singleton singleton=new Singleton();\n \t\n \tprivate Singleton(){}\n \t\n \tpublic static Singleton getInstance(){\n \t\treturn singleton;\n \t}\n \n }\n ```\n 饿汉式中singleton在java虚拟机加载字节码的时候就已经被分配了空间所以就不存在线程安全问题。\n \n#### 懒汉式（延迟加载）\n \n##### 实现方式一\n ```java\n public class Singleton{\n  private static Singleton singleton=null;\n  \n  private Singleton(){}\n  \n  public synchronized static Singleton getInstance(){\n     if(singleton==null){\n     \tsingleton=new Singleton();\n     }\n  \t return singleton;\n  }\n }\n ```\n 方式一虽然不存在线程安全问题，但是同步是在整个方法上进行的，效率低下，其实只需要第一次创建实例的时候需要同步，创建成功后就不需要再同步了。\n##### 实现方式二\n\n\t```java\n\t public class Singleton{\n  \t\tprivate volatile static Singleton singleton=null;\n  \n  \t\tprivate Singleton(){}\n  \n  \t\tpublic static Singleton getInstance(){\n   \t\t  if(singleton==null){\n     \t\tsynchronized(Singleton.class){\n     \t\t\tif(singleton==null){\n     \t\t    \tsingleton=new Singleton();\n     \t\t\t}    \t\n     \t\t}     \t\n    \t }\n  \t\t return singleton;\n  \t\t}\n \t\t}\n\n\t```\n要注意的一点是一定要volatile,当一个线程对singleton进行分配空间，初始化，调用构造函数的时候是在自己的线程工作栈中，其他线程是看不到这个过程的，Java虚拟机一切都是按引用的值复制的.向主存储区同步其实就是把线程工作存储区的这个已经构造好的对象有压缩堆地址值COPY给主存储区的那个变量。不加volatile，有可能发生另一个线程会获取到还没有实例化的singleton引用。\n参考文献：\n[Double-checked Locking (DCL) and how to fix it](http://www.javamex.com/tutorials/double_checked_locking_fixing.shtml \"Double-checked Locking (DCL) and how to fix it\")\n\n\n##### 实现方式三\n\n利用内部内延迟加载的特性。内部类也是个单独的Class文件，只有用到的时候才会动态加载\n\t```java\n\tpublic class Singleton{\n\t\tprivate Singleton(){}\n\t\t\n\t\tpublic static class InnerClass{\n\t\t\tstatic Singleton instance=new Singleton();\n\t\t}\t\t\t\t\n\t\tpublic static Singleton getInstance(){\n\t\t return InnerClass.instance;\n\t\t}\n\t}\n\n\t```\n##### 实现方式三\n静态方法块\n\t```java\n\tpublic class Singleton{\n\t\tprivate Singleton(){}\t\t\n\t\tprivate static final Singleton instance=null;\n\t\t static{\n\t\t\tinstance=new Singleton();\n\t\t}\t\t\t\t\n\t\tpublic static Singleton getInstance(){\n\t\t return instance;\n\t\t}\n\t}\n\t```\n\n\t\n\n","source":"_posts/单利模式你不一定懂.md","raw":"---\ntitle: 单例模式你不一定懂\ndate: 2016-06-27 18:30:11\ntags:\n- 设计模式\ncategories:\n- Java\n\n---\n\n### 常见单例模式\n\n首先我们来看看常见的单例模式都哪些实现方式：\n\n#### 饿汉式：\n \n ```java\n public class Singleton{\n \tprivate static Singleton singleton=new Singleton();\n \t\n \tprivate Singleton(){}\n \t\n \tpublic static Singleton getInstance(){\n \t\treturn singleton;\n \t}\n \n }\n ```\n 饿汉式中singleton在java虚拟机加载字节码的时候就已经被分配了空间所以就不存在线程安全问题。\n \n#### 懒汉式（延迟加载）\n \n##### 实现方式一\n ```java\n public class Singleton{\n  private static Singleton singleton=null;\n  \n  private Singleton(){}\n  \n  public synchronized static Singleton getInstance(){\n     if(singleton==null){\n     \tsingleton=new Singleton();\n     }\n  \t return singleton;\n  }\n }\n ```\n 方式一虽然不存在线程安全问题，但是同步是在整个方法上进行的，效率低下，其实只需要第一次创建实例的时候需要同步，创建成功后就不需要再同步了。\n##### 实现方式二\n\n\t```java\n\t public class Singleton{\n  \t\tprivate volatile static Singleton singleton=null;\n  \n  \t\tprivate Singleton(){}\n  \n  \t\tpublic static Singleton getInstance(){\n   \t\t  if(singleton==null){\n     \t\tsynchronized(Singleton.class){\n     \t\t\tif(singleton==null){\n     \t\t    \tsingleton=new Singleton();\n     \t\t\t}    \t\n     \t\t}     \t\n    \t }\n  \t\t return singleton;\n  \t\t}\n \t\t}\n\n\t```\n要注意的一点是一定要volatile,当一个线程对singleton进行分配空间，初始化，调用构造函数的时候是在自己的线程工作栈中，其他线程是看不到这个过程的，Java虚拟机一切都是按引用的值复制的.向主存储区同步其实就是把线程工作存储区的这个已经构造好的对象有压缩堆地址值COPY给主存储区的那个变量。不加volatile，有可能发生另一个线程会获取到还没有实例化的singleton引用。\n参考文献：\n[Double-checked Locking (DCL) and how to fix it](http://www.javamex.com/tutorials/double_checked_locking_fixing.shtml \"Double-checked Locking (DCL) and how to fix it\")\n\n\n##### 实现方式三\n\n利用内部内延迟加载的特性。内部类也是个单独的Class文件，只有用到的时候才会动态加载\n\t```java\n\tpublic class Singleton{\n\t\tprivate Singleton(){}\n\t\t\n\t\tpublic static class InnerClass{\n\t\t\tstatic Singleton instance=new Singleton();\n\t\t}\t\t\t\t\n\t\tpublic static Singleton getInstance(){\n\t\t return InnerClass.instance;\n\t\t}\n\t}\n\n\t```\n##### 实现方式三\n静态方法块\n\t```java\n\tpublic class Singleton{\n\t\tprivate Singleton(){}\t\t\n\t\tprivate static final Singleton instance=null;\n\t\t static{\n\t\t\tinstance=new Singleton();\n\t\t}\t\t\t\t\n\t\tpublic static Singleton getInstance(){\n\t\t return instance;\n\t\t}\n\t}\n\t```\n\n\t\n\n","slug":"单利模式你不一定懂","published":1,"updated":"2016-06-28T05:04:37.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixu4001bbxboeypgokda","content":"<h3 id=\"常见单例模式\"><a href=\"#常见单例模式\" class=\"headerlink\" title=\"常见单例模式\"></a>常见单例模式</h3><p>首先我们来看看常见的单例模式都哪些实现方式：</p>\n<h4 id=\"饿汉式：\"><a href=\"#饿汉式：\" class=\"headerlink\" title=\"饿汉式：\"></a>饿汉式：</h4> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 饿汉式中singleton在java虚拟机加载字节码的时候就已经被分配了空间所以就不存在线程安全问题。</p>\n<h4 id=\"懒汉式（延迟加载）\"><a href=\"#懒汉式（延迟加载）\" class=\"headerlink\" title=\"懒汉式（延迟加载）\"></a>懒汉式（延迟加载）</h4><h5 id=\"实现方式一\"><a href=\"#实现方式一\" class=\"headerlink\" title=\"实现方式一\"></a>实现方式一</h5> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(singleton==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    \tsingleton=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> \t <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 方式一虽然不存在线程安全问题，但是同步是在整个方法上进行的，效率低下，其实只需要第一次创建实例的时候需要同步，创建成功后就不需要再同步了。</p>\n<h5 id=\"实现方式二\"><a href=\"#实现方式二\" class=\"headerlink\" title=\"实现方式二\"></a>实现方式二</h5><pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton singleton=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"> \t\t  <span class=\"keyword\">if</span>(singleton==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">   \t\t<span class=\"keyword\">synchronized</span>(Singleton.class)&#123;</span><br><span class=\"line\">   \t\t\t<span class=\"keyword\">if</span>(singleton==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">   \t\t    \tsingleton=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">   \t\t\t&#125;    \t</span><br><span class=\"line\">   \t\t&#125;     \t</span><br><span class=\"line\">  \t &#125;</span><br><span class=\"line\">\t\t <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>要注意的一点是一定要volatile,当一个线程对singleton进行分配空间，初始化，调用构造函数的时候是在自己的线程工作栈中，其他线程是看不到这个过程的，Java虚拟机一切都是按引用的值复制的.向主存储区同步其实就是把线程工作存储区的这个已经构造好的对象有压缩堆地址值COPY给主存储区的那个变量。不加volatile，有可能发生另一个线程会获取到还没有实例化的singleton引用。<br>参考文献：<br><a href=\"http://www.javamex.com/tutorials/double_checked_locking_fixing.shtml\" title=\"Double-checked Locking (DCL) and how to fix it\" target=\"_blank\" rel=\"external\">Double-checked Locking (DCL) and how to fix it</a></p>\n<h5 id=\"实现方式三\"><a href=\"#实现方式三\" class=\"headerlink\" title=\"实现方式三\"></a>实现方式三</h5><p>利用内部内延迟加载的特性。内部类也是个单独的Class文件，只有用到的时候才会动态加载<br>    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">static</span> Singleton instance=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t&#125;\t\t\t\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">return</span> InnerClass.instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"实现方式三-1\"><a href=\"#实现方式三-1\" class=\"headerlink\" title=\"实现方式三\"></a>实现方式三</h5><p>静态方法块<br>    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton instance=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">\t\tinstance=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t&#125;\t\t\t\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","excerpt":"","more":"<h3 id=\"常见单例模式\"><a href=\"#常见单例模式\" class=\"headerlink\" title=\"常见单例模式\"></a>常见单例模式</h3><p>首先我们来看看常见的单例模式都哪些实现方式：</p>\n<h4 id=\"饿汉式：\"><a href=\"#饿汉式：\" class=\"headerlink\" title=\"饿汉式：\"></a>饿汉式：</h4> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 饿汉式中singleton在java虚拟机加载字节码的时候就已经被分配了空间所以就不存在线程安全问题。</p>\n<h4 id=\"懒汉式（延迟加载）\"><a href=\"#懒汉式（延迟加载）\" class=\"headerlink\" title=\"懒汉式（延迟加载）\"></a>懒汉式（延迟加载）</h4><h5 id=\"实现方式一\"><a href=\"#实现方式一\" class=\"headerlink\" title=\"实现方式一\"></a>实现方式一</h5> <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Singleton singleton=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(singleton==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">    \tsingleton=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> \t <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p> 方式一虽然不存在线程安全问题，但是同步是在整个方法上进行的，效率低下，其实只需要第一次创建实例的时候需要同步，创建成功后就不需要再同步了。</p>\n<h5 id=\"实现方式二\"><a href=\"#实现方式二\" class=\"headerlink\" title=\"实现方式二\"></a>实现方式二</h5><pre><code><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> Singleton singleton=<span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\"> \t\t  <span class=\"keyword\">if</span>(singleton==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">   \t\t<span class=\"keyword\">synchronized</span>(Singleton.class)&#123;</span><br><span class=\"line\">   \t\t\t<span class=\"keyword\">if</span>(singleton==<span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">   \t\t    \tsingleton=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">   \t\t\t&#125;    \t</span><br><span class=\"line\">   \t\t&#125;     \t</span><br><span class=\"line\">  \t &#125;</span><br><span class=\"line\">\t\t <span class=\"keyword\">return</span> singleton;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n</code></pre><p>要注意的一点是一定要volatile,当一个线程对singleton进行分配空间，初始化，调用构造函数的时候是在自己的线程工作栈中，其他线程是看不到这个过程的，Java虚拟机一切都是按引用的值复制的.向主存储区同步其实就是把线程工作存储区的这个已经构造好的对象有压缩堆地址值COPY给主存储区的那个变量。不加volatile，有可能发生另一个线程会获取到还没有实例化的singleton引用。<br>参考文献：<br><a href=\"http://www.javamex.com/tutorials/double_checked_locking_fixing.shtml\" title=\"Double-checked Locking (DCL) and how to fix it\">Double-checked Locking (DCL) and how to fix it</a></p>\n<h5 id=\"实现方式三\"><a href=\"#实现方式三\" class=\"headerlink\" title=\"实现方式三\"></a>实现方式三</h5><p>利用内部内延迟加载的特性。内部类也是个单独的Class文件，只有用到的时候才会动态加载<br>    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">InnerClass</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">static</span> Singleton instance=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t&#125;\t\t\t\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">return</span> InnerClass.instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h5 id=\"实现方式三-1\"><a href=\"#实现方式三-1\" class=\"headerlink\" title=\"实现方式三\"></a>实现方式三</h5><p>静态方法块<br>    <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Singleton</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">Singleton</span><span class=\"params\">()</span></span>&#123;&#125;\t\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Singleton instance=<span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">\t\tinstance=<span class=\"keyword\">new</span> Singleton();</span><br><span class=\"line\">\t&#125;\t\t\t\t</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Singleton <span class=\"title\">getInstance</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t <span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"在线课堂搭建注意事项","date":"2016-06-13T00:22:09.000Z","_content":"\n### RealTimeClassRoom修改的文件\n\n将服务器环境搭建好之后需要修改以下几个文件：\n* property.properties\n```bash\n\t//mysql链接，如果是远程数据库，修改为远程数据库的链接和端口\n\tmysql.url=jdbc\\:mysql\\://127.0.0.1\\:3307/zzkt_ofbiz?&useUnicode\\=true&characterEncoding\\=utf-8&autoReconnect\\=true\n\tmysql.drivername=com.mysql.jdbc.Driver\n\tmysql.username=root\n\tmysql.password=****\n\tmysql2.url=jdbc\\:mysql\\://127.0.0.1\\:3307/ofbiz?&useUnicode\\=true&characterEncoding\\=utf-8&autoReconnect\\=true\n\tmysql2.username=root\n\tmysql2.password=****\n\t//mongo的url也需要更改，用远程的也可以\n\tmongo.url=115.28.233.32\n\tmongo.port=27017\n\tmongo.dbname=RealTimeClass\n\tUseRecordCollectionName=UserOPRecord\n\tmongo.username=root\n\tmongo.password=123456\n\tmongo.maxconn=5000\n\tmongo.minconn=100\n\tclass.aheadoftime=30\n```\n* platform.properties\n```bash\n\t//修改为服务器所在域名加上端口号\n\tDOMAIN=http\\://sso.zzkt.com\\:8080\n\t//不用修改\n\tPLAT_APP_NAME=eduportal/\n\t//不用修改\n\tPLAT_PHOTO_NAME=app/\n\t//修改为服务器所在域名\n\tCERTIFICATION_SERVER=sso.zzkt.com\n```\n* aodianyun.properties\n```bash\n//修改为自己奥点运平台的参数\nAODIANYUN_LIST_URL=http\\://openapi.aodianyun.com/v2/VOD.GetVodList\nACCESS_ID=\nACCESS_KEY=\nAPPNAME=sskt\nPUBLISH_URL=\nPLAY_URL=\n```\n* web.xml\n```xml\n<filter>\n\t\t<filter-name>CASFilter</filter-name>\n\t\t<!-- <filter-class>org.jasig.cas.client.authentication.AuthenticationFilter</filter-class> -->\n\t\t<filter-class>cn.edu.pku.ss.casfilter.AuthenticationFilterWithExcludeUrl</filter-class>\n\t\t<init-param>\n\t\t\t<param-name>casServerLoginUrl</param-name>\n\t\t<param-value>http://sso.zzkt.com:8080/cas/login</param-value> \n\t\t\t<!-- <param-value>http://online.sunhopeww.com:8080/cas/login</param-value> -->\n\t\t\t<!--这里的server是服务端的IP -->\n\t\t</init-param>\n\t\t<init-param>\n\t\t\t<!--本程序所在的URL -->\n\t\t\t<param-name>serverName</param-name>\n\t\t\t <param-value>http://sso.zzkt.com:8080</param-value> \n\t\t\t <!-- <param-value>http://online.sunhopeww.com:8080</param-value> -->\n\t\t</init-param>\n\t\t<init-param>\n\t\t\t<param-name>exclusions</param-name>\n\t\t\t<param-value>/register/checkUsername.action,/search/famousCourseSearch.action,/studentUCenter/studentUCenter.action,/teacherUCenter/teacherUCenter.action,/register/doRegister.action,/register/register.action,/index/queryIndex.action,/iframe/queryIframeCourse.action,/courseShow/getCourse.action,/studentCourseManage/chooseCourseForWS.action,/sskt_logout/sskt_logout.action,/courseManage/approveCourse.action,/liveshow/apiLiveShowAction.action,/apicourse/getCourseInforByID.action,/apicourse/getCourseInforByTeacherID.action,/apicourse/getUnderWayCourseInfor.action,/yitiku/loginYiTiKu.action,/apicourse/getCourseListByCatagory.action,/apicourse/getCourseInforByProductID.action,/apiteacher/applyCourseAction.action,/user/getAllClassesInfoByTeacherID.action,/user/getAllStudentInfoByGradeIDAndClassID.action,/user/getAllStudentInfoByTeacherID.action</param-value>\n\t\t</init-param>\n\t</filter>\t\n\t\t<!-- 该过滤器负责对Ticket的校验工作，必须启用它 -->\n\t<filter>\n\t\t<filter-name>CAS Validation Filter</filter-name>\n\t\t<filter-class>\n\t\t\torg.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter\n\t\t</filter-class>\n\t\t<init-param>\n\t\t\t<param-name>casServerUrlPrefix</param-name>\n\t\t\t<param-value>http://sso.zzkt.com:8080/cas</param-value>\n\t\t\t<!-- <param-value>http://online.sunhopeww.com:8080/cas</param-value> -->\n\t\t</init-param>\n\t\t<init-param>\n\t\t\t<param-name>serverName</param-name>\n\t\t\t <param-value>http://sso.zzkt.com:8080</param-value> \n\t\t  <!-- <param-value>http://online.sunhopeww.com:8080</param-value> -->\n\t\t</init-param>\n\t</filter>\n\t<filter-mapping>\n\t\t<filter-name>CAS Validation Filter</filter-name>\n\t\t<url-pattern>*.action</url-pattern>\n\t</filter-mapping>\n```\n\n* webroot/static-new/js/ownjs/course-detail.js\n\t```js\n\t//未登录点击购买课程按钮\n\t$(\"#notLoginPurchase\").click(function(){\n\t\tvar courseId = $(\"#courseId\").val();\n\t\talert(\"请您先登录\");\n\twindow.location.href='http://sso.zzkt.com:8080/cas/login?service=http://sso.zzkt.com:8080/RealTimeClassRoom/courseShow/getCourse.action?courseId='+courseId+'&&pamCasLoginId=1';\n\t//\twindow.location.href='http://online.sunhopeww.com:8080/cas/login?service=http://online.sunhopeww.com:8080/RealTimeClassRoom/courseShow/getCourse.action?courseId='+courseId+'&&pamCasLoginId=1';\n\t});\n\t```\n\t\n### CAS要修改的文件\n* web-inf/depolyerConfigContext.xml\n```xml\n\t<bean id=\"primaryAuthenticationHandler\"\n          class=\"org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler\">\n        <property name=\"dataSource\" ref=\"dataSource\"></property>\n\t\t\t\t<property name=\"sql\" value=\"select password from sskt_user where userId=?\"></property>\n\t\t\t\t <property name=\"passwordEncoder\" ref=\"passwordEncoder\"/>\n    </bean>\n\t<bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n\t   <property name=\"driverClassName\"><value>com.mysql.jdbc.Driver</value></property>\n\t   <property name=\"url\"><value>jdbc:mysql://127.0.0.1:3307/zzkt_ofbiz</value></property>\n\t   <property name=\"username\"><value>root</value></property>\n\t   <property name=\"password\"><value>mysql123</value></property>\n</bean>\n```\n* /cas/WEB-INF/view/jsp/default/ui/casLogoutView.jsp\n```jsp\nfunction doSomeLogout(){\n\t//getLabelsGet(\"http://121.42.149.42:6301/logout\");\n\tgetLabelsGet(\"http://sso.zzkt.com:8080/RealTimeClassRoom/sskt_logout/sskt_logout.action\");\t\n\t//getLabelsGet(\"http://121.42.149.42:6300/logout\");\n}\n```","source":"_posts/在线课堂搭建注意事项.md","raw":"---\ntitle: 在线课堂搭建注意事项\ndate: 2016-06-13 08:22:09\ntags:\n- SSH\ncategories:\n- Java\n\n---\n\n### RealTimeClassRoom修改的文件\n\n将服务器环境搭建好之后需要修改以下几个文件：\n* property.properties\n```bash\n\t//mysql链接，如果是远程数据库，修改为远程数据库的链接和端口\n\tmysql.url=jdbc\\:mysql\\://127.0.0.1\\:3307/zzkt_ofbiz?&useUnicode\\=true&characterEncoding\\=utf-8&autoReconnect\\=true\n\tmysql.drivername=com.mysql.jdbc.Driver\n\tmysql.username=root\n\tmysql.password=****\n\tmysql2.url=jdbc\\:mysql\\://127.0.0.1\\:3307/ofbiz?&useUnicode\\=true&characterEncoding\\=utf-8&autoReconnect\\=true\n\tmysql2.username=root\n\tmysql2.password=****\n\t//mongo的url也需要更改，用远程的也可以\n\tmongo.url=115.28.233.32\n\tmongo.port=27017\n\tmongo.dbname=RealTimeClass\n\tUseRecordCollectionName=UserOPRecord\n\tmongo.username=root\n\tmongo.password=123456\n\tmongo.maxconn=5000\n\tmongo.minconn=100\n\tclass.aheadoftime=30\n```\n* platform.properties\n```bash\n\t//修改为服务器所在域名加上端口号\n\tDOMAIN=http\\://sso.zzkt.com\\:8080\n\t//不用修改\n\tPLAT_APP_NAME=eduportal/\n\t//不用修改\n\tPLAT_PHOTO_NAME=app/\n\t//修改为服务器所在域名\n\tCERTIFICATION_SERVER=sso.zzkt.com\n```\n* aodianyun.properties\n```bash\n//修改为自己奥点运平台的参数\nAODIANYUN_LIST_URL=http\\://openapi.aodianyun.com/v2/VOD.GetVodList\nACCESS_ID=\nACCESS_KEY=\nAPPNAME=sskt\nPUBLISH_URL=\nPLAY_URL=\n```\n* web.xml\n```xml\n<filter>\n\t\t<filter-name>CASFilter</filter-name>\n\t\t<!-- <filter-class>org.jasig.cas.client.authentication.AuthenticationFilter</filter-class> -->\n\t\t<filter-class>cn.edu.pku.ss.casfilter.AuthenticationFilterWithExcludeUrl</filter-class>\n\t\t<init-param>\n\t\t\t<param-name>casServerLoginUrl</param-name>\n\t\t<param-value>http://sso.zzkt.com:8080/cas/login</param-value> \n\t\t\t<!-- <param-value>http://online.sunhopeww.com:8080/cas/login</param-value> -->\n\t\t\t<!--这里的server是服务端的IP -->\n\t\t</init-param>\n\t\t<init-param>\n\t\t\t<!--本程序所在的URL -->\n\t\t\t<param-name>serverName</param-name>\n\t\t\t <param-value>http://sso.zzkt.com:8080</param-value> \n\t\t\t <!-- <param-value>http://online.sunhopeww.com:8080</param-value> -->\n\t\t</init-param>\n\t\t<init-param>\n\t\t\t<param-name>exclusions</param-name>\n\t\t\t<param-value>/register/checkUsername.action,/search/famousCourseSearch.action,/studentUCenter/studentUCenter.action,/teacherUCenter/teacherUCenter.action,/register/doRegister.action,/register/register.action,/index/queryIndex.action,/iframe/queryIframeCourse.action,/courseShow/getCourse.action,/studentCourseManage/chooseCourseForWS.action,/sskt_logout/sskt_logout.action,/courseManage/approveCourse.action,/liveshow/apiLiveShowAction.action,/apicourse/getCourseInforByID.action,/apicourse/getCourseInforByTeacherID.action,/apicourse/getUnderWayCourseInfor.action,/yitiku/loginYiTiKu.action,/apicourse/getCourseListByCatagory.action,/apicourse/getCourseInforByProductID.action,/apiteacher/applyCourseAction.action,/user/getAllClassesInfoByTeacherID.action,/user/getAllStudentInfoByGradeIDAndClassID.action,/user/getAllStudentInfoByTeacherID.action</param-value>\n\t\t</init-param>\n\t</filter>\t\n\t\t<!-- 该过滤器负责对Ticket的校验工作，必须启用它 -->\n\t<filter>\n\t\t<filter-name>CAS Validation Filter</filter-name>\n\t\t<filter-class>\n\t\t\torg.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter\n\t\t</filter-class>\n\t\t<init-param>\n\t\t\t<param-name>casServerUrlPrefix</param-name>\n\t\t\t<param-value>http://sso.zzkt.com:8080/cas</param-value>\n\t\t\t<!-- <param-value>http://online.sunhopeww.com:8080/cas</param-value> -->\n\t\t</init-param>\n\t\t<init-param>\n\t\t\t<param-name>serverName</param-name>\n\t\t\t <param-value>http://sso.zzkt.com:8080</param-value> \n\t\t  <!-- <param-value>http://online.sunhopeww.com:8080</param-value> -->\n\t\t</init-param>\n\t</filter>\n\t<filter-mapping>\n\t\t<filter-name>CAS Validation Filter</filter-name>\n\t\t<url-pattern>*.action</url-pattern>\n\t</filter-mapping>\n```\n\n* webroot/static-new/js/ownjs/course-detail.js\n\t```js\n\t//未登录点击购买课程按钮\n\t$(\"#notLoginPurchase\").click(function(){\n\t\tvar courseId = $(\"#courseId\").val();\n\t\talert(\"请您先登录\");\n\twindow.location.href='http://sso.zzkt.com:8080/cas/login?service=http://sso.zzkt.com:8080/RealTimeClassRoom/courseShow/getCourse.action?courseId='+courseId+'&&pamCasLoginId=1';\n\t//\twindow.location.href='http://online.sunhopeww.com:8080/cas/login?service=http://online.sunhopeww.com:8080/RealTimeClassRoom/courseShow/getCourse.action?courseId='+courseId+'&&pamCasLoginId=1';\n\t});\n\t```\n\t\n### CAS要修改的文件\n* web-inf/depolyerConfigContext.xml\n```xml\n\t<bean id=\"primaryAuthenticationHandler\"\n          class=\"org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler\">\n        <property name=\"dataSource\" ref=\"dataSource\"></property>\n\t\t\t\t<property name=\"sql\" value=\"select password from sskt_user where userId=?\"></property>\n\t\t\t\t <property name=\"passwordEncoder\" ref=\"passwordEncoder\"/>\n    </bean>\n\t<bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\">\n\t   <property name=\"driverClassName\"><value>com.mysql.jdbc.Driver</value></property>\n\t   <property name=\"url\"><value>jdbc:mysql://127.0.0.1:3307/zzkt_ofbiz</value></property>\n\t   <property name=\"username\"><value>root</value></property>\n\t   <property name=\"password\"><value>mysql123</value></property>\n</bean>\n```\n* /cas/WEB-INF/view/jsp/default/ui/casLogoutView.jsp\n```jsp\nfunction doSomeLogout(){\n\t//getLabelsGet(\"http://121.42.149.42:6301/logout\");\n\tgetLabelsGet(\"http://sso.zzkt.com:8080/RealTimeClassRoom/sskt_logout/sskt_logout.action\");\t\n\t//getLabelsGet(\"http://121.42.149.42:6300/logout\");\n}\n```","slug":"在线课堂搭建注意事项","published":1,"updated":"2016-06-13T00:59:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixua001fbxbo4p41lopn","content":"<h3 id=\"RealTimeClassRoom修改的文件\"><a href=\"#RealTimeClassRoom修改的文件\" class=\"headerlink\" title=\"RealTimeClassRoom修改的文件\"></a>RealTimeClassRoom修改的文件</h3><p>将服务器环境搭建好之后需要修改以下几个文件：</p>\n<ul>\n<li><p>property.properties</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//mysql链接，如果是远程数据库，修改为远程数据库的链接和端口</span><br><span class=\"line\">mysql.url=jdbc\\:mysql\\://127.0.0.1\\:3307/zzkt_ofbiz?&amp;useUnicode\\=<span class=\"literal\">true</span>&amp;characterEncoding\\=utf-8&amp;autoReconnect\\=<span class=\"literal\">true</span></span><br><span class=\"line\">mysql.drivername=com.mysql.jdbc.Driver</span><br><span class=\"line\">mysql.username=root</span><br><span class=\"line\">mysql.password=****</span><br><span class=\"line\">mysql2.url=jdbc\\:mysql\\://127.0.0.1\\:3307/ofbiz?&amp;useUnicode\\=<span class=\"literal\">true</span>&amp;characterEncoding\\=utf-8&amp;autoReconnect\\=<span class=\"literal\">true</span></span><br><span class=\"line\">mysql2.username=root</span><br><span class=\"line\">mysql2.password=****</span><br><span class=\"line\">//mongo的url也需要更改，用远程的也可以</span><br><span class=\"line\">mongo.url=115.28.233.32</span><br><span class=\"line\">mongo.port=27017</span><br><span class=\"line\">mongo.dbname=RealTimeClass</span><br><span class=\"line\">UseRecordCollectionName=UserOPRecord</span><br><span class=\"line\">mongo.username=root</span><br><span class=\"line\">mongo.password=123456</span><br><span class=\"line\">mongo.maxconn=5000</span><br><span class=\"line\">mongo.minconn=100</span><br><span class=\"line\">class.aheadoftime=30</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>platform.properties</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修改为服务器所在域名加上端口号</span><br><span class=\"line\">DOMAIN=http\\://sso.zzkt.com\\:8080</span><br><span class=\"line\">//不用修改</span><br><span class=\"line\">PLAT_APP_NAME=eduportal/</span><br><span class=\"line\">//不用修改</span><br><span class=\"line\">PLAT_PHOTO_NAME=app/</span><br><span class=\"line\">//修改为服务器所在域名</span><br><span class=\"line\">CERTIFICATION_SERVER=sso.zzkt.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>aodianyun.properties</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修改为自己奥点运平台的参数</span><br><span class=\"line\">AODIANYUN_LIST_URL=http\\://openapi.aodianyun.com/v2/VOD.GetVodList</span><br><span class=\"line\">ACCESS_ID=</span><br><span class=\"line\">ACCESS_KEY=</span><br><span class=\"line\">APPNAME=sskt</span><br><span class=\"line\">PUBLISH_URL=</span><br><span class=\"line\">PLAY_URL=</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>web.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CASFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;filter-class&gt;org.jasig.cas.client.authentication.AuthenticationFilter&lt;/filter-class&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>cn.edu.pku.ss.casfilter.AuthenticationFilterWithExcludeUrl<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>casServerLoginUrl<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>http://sso.zzkt.com:8080/cas/login<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span> </span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- &lt;param-value&gt;http://online.sunhopeww.com:8080/cas/login&lt;/param-value&gt; --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!--这里的server是服务端的IP --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!--本程序所在的URL --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>serverName<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t\t <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>http://sso.zzkt.com:8080<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span> </span><br><span class=\"line\">\t\t\t <span class=\"comment\">&lt;!-- &lt;param-value&gt;http://online.sunhopeww.com:8080&lt;/param-value&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>exclusions<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>/register/checkUsername.action,/search/famousCourseSearch.action,/studentUCenter/studentUCenter.action,/teacherUCenter/teacherUCenter.action,/register/doRegister.action,/register/register.action,/index/queryIndex.action,/iframe/queryIframeCourse.action,/courseShow/getCourse.action,/studentCourseManage/chooseCourseForWS.action,/sskt_logout/sskt_logout.action,/courseManage/approveCourse.action,/liveshow/apiLiveShowAction.action,/apicourse/getCourseInforByID.action,/apicourse/getCourseInforByTeacherID.action,/apicourse/getUnderWayCourseInfor.action,/yitiku/loginYiTiKu.action,/apicourse/getCourseListByCatagory.action,/apicourse/getCourseInforByProductID.action,/apiteacher/applyCourseAction.action,/user/getAllClassesInfoByTeacherID.action,/user/getAllStudentInfoByGradeIDAndClassID.action,/user/getAllStudentInfoByTeacherID.action<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span>\t</span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 该过滤器负责对Ticket的校验工作，必须启用它 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CAS Validation Filter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">\t\t\torg.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>casServerUrlPrefix<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>http://sso.zzkt.com:8080/cas<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- &lt;param-value&gt;http://online.sunhopeww.com:8080/cas&lt;/param-value&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>serverName<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t\t <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>http://sso.zzkt.com:8080<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span> </span><br><span class=\"line\">\t\t  <span class=\"comment\">&lt;!-- &lt;param-value&gt;http://online.sunhopeww.com:8080&lt;/param-value&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CAS Validation Filter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.action<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>webroot/static-new/js/ownjs/course-detail.js</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//未登录点击购买课程按钮</span></span><br><span class=\"line\">$(<span class=\"string\">\"#notLoginPurchase\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> courseId = $(<span class=\"string\">\"#courseId\"</span>).val();</span><br><span class=\"line\">\talert(<span class=\"string\">\"请您先登录\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href=<span class=\"string\">'http://sso.zzkt.com:8080/cas/login?service=http://sso.zzkt.com:8080/RealTimeClassRoom/courseShow/getCourse.action?courseId='</span>+courseId+<span class=\"string\">'&amp;&amp;pamCasLoginId=1'</span>;</span><br><span class=\"line\"><span class=\"comment\">//\twindow.location.href='http://online.sunhopeww.com:8080/cas/login?service=http://online.sunhopeww.com:8080/RealTimeClassRoom/courseShow/getCourse.action?courseId='+courseId+'&amp;&amp;pamCasLoginId=1';</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"CAS要修改的文件\"><a href=\"#CAS要修改的文件\" class=\"headerlink\" title=\"CAS要修改的文件\"></a>CAS要修改的文件</h3><ul>\n<li><p>web-inf/depolyerConfigContext.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"primaryAuthenticationHandler\"</span></span><br><span class=\"line\">          <span class=\"attr\">class</span>=<span class=\"string\">\"org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sql\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"select password from sskt_user where userId=?\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"passwordEncoder\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"passwordEncoder\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DriverManagerDataSource\"</span>&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>jdbc:mysql://127.0.0.1:3307/zzkt_ofbiz<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mysql123<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/cas/WEB-INF/view/jsp/default/ui/casLogoutView.jsp</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">doSomeLogout</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//getLabelsGet(\"http://121.42.149.42:6301/logout\");</span></span><br><span class=\"line\">\tgetLabelsGet(<span class=\"string\">\"http://sso.zzkt.com:8080/RealTimeClassRoom/sskt_logout/sskt_logout.action\"</span>);\t</span><br><span class=\"line\">\t<span class=\"comment\">//getLabelsGet(\"http://121.42.149.42:6300/logout\");</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","excerpt":"","more":"<h3 id=\"RealTimeClassRoom修改的文件\"><a href=\"#RealTimeClassRoom修改的文件\" class=\"headerlink\" title=\"RealTimeClassRoom修改的文件\"></a>RealTimeClassRoom修改的文件</h3><p>将服务器环境搭建好之后需要修改以下几个文件：</p>\n<ul>\n<li><p>property.properties</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//mysql链接，如果是远程数据库，修改为远程数据库的链接和端口</span><br><span class=\"line\">mysql.url=jdbc\\:mysql\\://127.0.0.1\\:3307/zzkt_ofbiz?&amp;useUnicode\\=<span class=\"literal\">true</span>&amp;characterEncoding\\=utf-8&amp;autoReconnect\\=<span class=\"literal\">true</span></span><br><span class=\"line\">mysql.drivername=com.mysql.jdbc.Driver</span><br><span class=\"line\">mysql.username=root</span><br><span class=\"line\">mysql.password=****</span><br><span class=\"line\">mysql2.url=jdbc\\:mysql\\://127.0.0.1\\:3307/ofbiz?&amp;useUnicode\\=<span class=\"literal\">true</span>&amp;characterEncoding\\=utf-8&amp;autoReconnect\\=<span class=\"literal\">true</span></span><br><span class=\"line\">mysql2.username=root</span><br><span class=\"line\">mysql2.password=****</span><br><span class=\"line\">//mongo的url也需要更改，用远程的也可以</span><br><span class=\"line\">mongo.url=115.28.233.32</span><br><span class=\"line\">mongo.port=27017</span><br><span class=\"line\">mongo.dbname=RealTimeClass</span><br><span class=\"line\">UseRecordCollectionName=UserOPRecord</span><br><span class=\"line\">mongo.username=root</span><br><span class=\"line\">mongo.password=123456</span><br><span class=\"line\">mongo.maxconn=5000</span><br><span class=\"line\">mongo.minconn=100</span><br><span class=\"line\">class.aheadoftime=30</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>platform.properties</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修改为服务器所在域名加上端口号</span><br><span class=\"line\">DOMAIN=http\\://sso.zzkt.com\\:8080</span><br><span class=\"line\">//不用修改</span><br><span class=\"line\">PLAT_APP_NAME=eduportal/</span><br><span class=\"line\">//不用修改</span><br><span class=\"line\">PLAT_PHOTO_NAME=app/</span><br><span class=\"line\">//修改为服务器所在域名</span><br><span class=\"line\">CERTIFICATION_SERVER=sso.zzkt.com</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>aodianyun.properties</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//修改为自己奥点运平台的参数</span><br><span class=\"line\">AODIANYUN_LIST_URL=http\\://openapi.aodianyun.com/v2/VOD.GetVodList</span><br><span class=\"line\">ACCESS_ID=</span><br><span class=\"line\">ACCESS_KEY=</span><br><span class=\"line\">APPNAME=sskt</span><br><span class=\"line\">PUBLISH_URL=</span><br><span class=\"line\">PLAY_URL=</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>web.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CASFilter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- &lt;filter-class&gt;org.jasig.cas.client.authentication.AuthenticationFilter&lt;/filter-class&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span>cn.edu.pku.ss.casfilter.AuthenticationFilterWithExcludeUrl<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>casServerLoginUrl<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>http://sso.zzkt.com:8080/cas/login<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span> </span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- &lt;param-value&gt;http://online.sunhopeww.com:8080/cas/login&lt;/param-value&gt; --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!--这里的server是服务端的IP --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!--本程序所在的URL --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>serverName<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t\t <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>http://sso.zzkt.com:8080<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span> </span><br><span class=\"line\">\t\t\t <span class=\"comment\">&lt;!-- &lt;param-value&gt;http://online.sunhopeww.com:8080&lt;/param-value&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>exclusions<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>/register/checkUsername.action,/search/famousCourseSearch.action,/studentUCenter/studentUCenter.action,/teacherUCenter/teacherUCenter.action,/register/doRegister.action,/register/register.action,/index/queryIndex.action,/iframe/queryIframeCourse.action,/courseShow/getCourse.action,/studentCourseManage/chooseCourseForWS.action,/sskt_logout/sskt_logout.action,/courseManage/approveCourse.action,/liveshow/apiLiveShowAction.action,/apicourse/getCourseInforByID.action,/apicourse/getCourseInforByTeacherID.action,/apicourse/getUnderWayCourseInfor.action,/yitiku/loginYiTiKu.action,/apicourse/getCourseListByCatagory.action,/apicourse/getCourseInforByProductID.action,/apiteacher/applyCourseAction.action,/user/getAllClassesInfoByTeacherID.action,/user/getAllStudentInfoByGradeIDAndClassID.action,/user/getAllStudentInfoByTeacherID.action<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span>\t</span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 该过滤器负责对Ticket的校验工作，必须启用它 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CAS Validation Filter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">\t\t\torg.jasig.cas.client.validation.Cas20ProxyReceivingTicketValidationFilter</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">filter-class</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>casServerUrlPrefix<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>http://sso.zzkt.com:8080/cas<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- &lt;param-value&gt;http://online.sunhopeww.com:8080/cas&lt;/param-value&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>serverName<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">\t\t\t <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>http://sso.zzkt.com:8080<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span> </span><br><span class=\"line\">\t\t  <span class=\"comment\">&lt;!-- &lt;param-value&gt;http://online.sunhopeww.com:8080&lt;/param-value&gt; --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">filter-mapping</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">filter-name</span>&gt;</span>CAS Validation Filter<span class=\"tag\">&lt;/<span class=\"name\">filter-name</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>*.action<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>webroot/static-new/js/ownjs/course-detail.js</p>\n  <figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//未登录点击购买课程按钮</span></span><br><span class=\"line\">$(<span class=\"string\">\"#notLoginPurchase\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> courseId = $(<span class=\"string\">\"#courseId\"</span>).val();</span><br><span class=\"line\">\talert(<span class=\"string\">\"请您先登录\"</span>);</span><br><span class=\"line\"><span class=\"built_in\">window</span>.location.href=<span class=\"string\">'http://sso.zzkt.com:8080/cas/login?service=http://sso.zzkt.com:8080/RealTimeClassRoom/courseShow/getCourse.action?courseId='</span>+courseId+<span class=\"string\">'&amp;&amp;pamCasLoginId=1'</span>;</span><br><span class=\"line\"><span class=\"comment\">//\twindow.location.href='http://online.sunhopeww.com:8080/cas/login?service=http://online.sunhopeww.com:8080/RealTimeClassRoom/courseShow/getCourse.action?courseId='+courseId+'&amp;&amp;pamCasLoginId=1';</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h3 id=\"CAS要修改的文件\"><a href=\"#CAS要修改的文件\" class=\"headerlink\" title=\"CAS要修改的文件\"></a>CAS要修改的文件</h3><ul>\n<li><p>web-inf/depolyerConfigContext.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"primaryAuthenticationHandler\"</span></span><br><span class=\"line\">          <span class=\"attr\">class</span>=<span class=\"string\">\"org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"dataSource\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"sql\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"select password from sskt_user where userId=?\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"passwordEncoder\"</span> <span class=\"attr\">ref</span>=<span class=\"string\">\"passwordEncoder\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">id</span>=<span class=\"string\">\"dataSource\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.jdbc.datasource.DriverManagerDataSource\"</span>&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"driverClassName\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>com.mysql.jdbc.Driver<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"url\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>jdbc:mysql://127.0.0.1:3307/zzkt_ofbiz<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"username\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>root<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t   <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"password\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mysql123<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>/cas/WEB-INF/view/jsp/default/ui/casLogoutView.jsp</p>\n<figure class=\"highlight jsp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">function <span class=\"title\">doSomeLogout</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//getLabelsGet(\"http://121.42.149.42:6301/logout\");</span></span><br><span class=\"line\">\tgetLabelsGet(<span class=\"string\">\"http://sso.zzkt.com:8080/RealTimeClassRoom/sskt_logout/sskt_logout.action\"</span>);\t</span><br><span class=\"line\">\t<span class=\"comment\">//getLabelsGet(\"http://121.42.149.42:6300/logout\");</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"数据库索引以及数据库优化","date":"2016-06-25T02:30:53.000Z","_content":"\n### 聚集索引和非聚集索引\n聚集索引存储记录是物理上连续存在，而非聚集索引是逻辑上的连续，物理存储并不连续。就像字段，聚集索引是连续的，a后面肯定是b，非聚集索引就不连续了，就像图书馆的某个作者的书，有可能在第1个货架上和第10个货架上。还有一个小知识点就是：聚集索引一个表只能有一个，而非聚集索引一个表可以存在多个。\n\n### 索引建立的原则\n* 定义主键的数据列一定要建立索引。\n\n* 定义有外键的数据列一定要建立索引。\n\n* 对于经常查询的数据列最好建立索引。\n\n* 对于需要在指定范围内的快速或频繁查询的数据列;\n\n* 经常用在WHERE子句中的数据列。\n\n* 经常出现在关键字order by、group by、distinct后面的字段，建立索引。如果建立的是复合索引，索引的字段顺序要和这些关键字后面的字段顺序一致，否则索引不会被使用。\n\n* 对于那些查询中很少涉及的列，重复值比较多的列不要建立索引。\n\n* 对于定义为text、image和bit的数据类型的列不要建立索引。\n\n* 对于经常存取的列避免建立索引 \n\n* 限制表上的索引数目。对一个存在大量更新操作的表，所建索引的数目一般不要超过3个，最多不要超过5个。索引虽说提高了访问速度，但太多索引会影响数据的更新操作。\n\n* 对复合索引，按照字段在查询条件中出现的频度建立索引。在复合索引中，记录首先按照第一个字段排序。对于在第一个字段上取值相同的记录，系统再按照第二个字段的取值排序，以此类推。因此只有复合索引的第一个字段出现在查询条件中，该索引才可能被使用,因此将应用频度高的字段，放置在复合索引的前面，会使系统最大可能地使用此索引，发挥索引的作用。\n\n### SQL的优化\n1. 有大量重复值、且经常有范围查询（between, >,< ，>=,< =）和order by、group by发生的列，可考虑建立群集索引；\n\n2. 经常同时存取多列，且每列都含有重复值可考虑建立组合索引；\n\n3. 组合索引要尽量使关键查询形成索引覆盖，其前导列一定是使用最频繁的列。遇到以下情况，执行计划不会选择覆盖查询：\n\t* select选择的字段中含有不在索引中的字段 ，也即索引没有覆盖全部的列。\n\t* where 条件中不能含有对索引进行like的操作。 \n4. 任何对列的操作都将导致表扫描，它包括数据库函数、计算表达式等等，查询时要尽可能将操作移至等号右边。\n\n5. 要善于使用存储过程，它使SQL变得更加灵活和高效。\n\n\t* 存储过程减少了网络传输、处理及存储的工作量，且经过编译和优化，执行速度快，易于维护，且表的结构改变时，不影响客户端的应用程序 \n\n\t* 使用存储过程，视图，函数有助于减少应用程序中SQL复制的弊端，因为现在只在一个地方集中处理SQL\n6. IN、NOT IN 操作符\n\n　　IN和EXISTS 性能有外表和内表区分的，但是在大数据量的表中推荐用EXISTS 代替IN 。\n\n　　Not IN 不走索引的是绝对不能用的，可以用NOT EXISTS 代替\n\n\n7.  IS NULL 或IS NOT NULL操作\n\t索引是不索引空值的，所以这样的操作不能使用索引，可以用其他的办法处理，例如：数字类型，判断大于0，字符串类型设置一个默认值，判断是否等于默认值即可\n\n8. <> 操作符（不等于） \n　　不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描。 用其它相同功能的操作运算代替，如 a<>0 改为 a>0 or a<0    a<>’’ 改为 a>’’ \n\n9.  用全文搜索搜索文本数据，取代like搜索，全文搜索始终优于like搜索\n　　\n10.  在查询中不要使用  select * \n11.  where使用原则\n\t* 第一个原则：在where子句中应把最具限制性的条件放在最前面。\n\t* 第二个原则：where子句中字段的顺序应和索引中字段顺序一致。\n\t```sql\nselect field3,field4 from tb where field2 like 'R%' 快\nselect field3,field4 from tb where field2 like '%R' 慢，不使用索引\n\nselect field3,field4 from tb where field1>='sdf' 快 可以迅速定位索引\nselect field3,field4 from tb where field1>'sdf' 慢\n　　 ```\n\n\n\n\n \n### 范式\n\n1. 第一范式：属性(字段)的原子性约束，要求属性具有原子性，不可再分割；\n\n2. 第二范式：记录的惟一性约束，要求记录有惟一标识，每条记录需要有一个属性来做为实体的唯一标识。\n\n3. 第三范式：属性(字段)冗余性的约束，即任何字段不能由其他字段派生出来，在通俗点就是：主键没有直接关系的数据列必须消除(消除的办法就是再创建一个表来存放他们，当然外键除外)\n\t\n数据库设计的实用原则是：在数据冗余和处理速度之间找到合适的平衡点 \n\n满足范式的表一定是规范化的表，但不一定是最佳的设计。很多情况下会为了提高数据库的运行效率，常常需要降低范式标准：适当增加冗余，达到以空间换时间的目的\n\n### 主键和外键的必要性\n\n主键与外键的设计，在全局数据库的设计中，占有重要地位。 因为：主键是实体的抽象，主键与外键的配对，表示实体之间的连接。\n\n主键：根据第二范式，需要有一个字段去标识这条记录，主键无疑是最好的标识，但是很多表也不一定需要主键，但是对于数据量大，查询频繁的数据库表，一定要有主键，主键可以增加效率、防止重复等优点。\n\n主键的选择也比较重要，一般选择总的长度小的键，小的键的比较速度快，同时小的键可以使主键的B树结构的层次更少。\n主键的选择还要注意组合主键的字段次序，对于组合主键来说，不同的字段次序的主键的性能差别可能会很大，一般应该选择重复率低、单独或者组合查询可能性大的字段放在前面。\n\n外键：外键作为数据库对象，很多人认为麻烦而不用，实际上，外键在大部分情况下是很有用的，理由是：外键是最高效的一致性维护方法\n\n数据库的一致性要求，依次可以用外键、CHECK约束、规则约束、触发器、客户端程序，一般认为，离数据越近的方法效率越高。\n谨慎使用级联删除和级联更新，级联删除和级联更新作为SQL SERVER 2000当年的新功能，在2005作了保留，应该有其可用之处。我这里说的谨慎，是因为级联删除和级联更新有些突破了传统的关于外键的定义，功能有点太过强大，使用前必须确定自己已经把握好其功能范围，否则，级联删除和级联更新可能让你的数据莫名其妙的被修改或者丢失。从性能看级联删除和级联更新是比其他方法更高效的方法。\n\n \n### 分割你的表，减小表尺寸\n\n  如果你发现某个表的记录太多，例如超过一千万条，则要对该表进行水平分割。水平分割的做法是，以该表主键的某个值为界线，将该表的记录水平分割为两个表。\n\n如果你若发现某个表的字段太多，例如超过八十个，则垂直分割该表，将原来的一个表分解为两个表\n\n \n### 字段设计原则\n\n字段是数据库最基本的单位，其设计对性能的影响是很大的。需要注意如下：\n\nA、数据类型尽量用数字型，数字型的比较比字符型的快很多。\n\nB、 数据类型尽量小，这里的尽量小是指在满足可以预见的未来需求的前提下的。\n\nC、 尽量不要允许NULL，除非必要，可以用NOT NULL+DEFAULT代替。\n\nD、少用TEXT和IMAGE，二进制字段的读写是比较慢的，而且，读取的方法也不多，大部分情况下最好不用。\n\nE、 自增字段要慎用，不利于数据迁移\n\n### 减少持有行级锁的时间\n\n比如对于一个秒杀系统，成功秒杀一件商品需要先在商品表里减库存再将购买记录插入到购买记录表：\n\n\t减库存  update product set number=number-1 where product.id=id\n\t插入购买记录：insert into sales(id,..,..,) value (...);\n这两个sql是在事务管理下的，是原子的，减库存的行级锁需要等到插入操作执行完之后才能释放锁。所以整个过程都必须持有行级锁，由于减库存一个高热点的操作，如果持有锁的时间太长会降低秒杀的效率。为了降低持有锁的时间，可以将插入操作放到update前面。\n","source":"_posts/数据库索引.md","raw":"---\ntitle: 数据库索引以及数据库优化\ndate: 2016-06-25 10:30:53\ntags:\n- 索引\ncategories:\n- 数据库\n\n---\n\n### 聚集索引和非聚集索引\n聚集索引存储记录是物理上连续存在，而非聚集索引是逻辑上的连续，物理存储并不连续。就像字段，聚集索引是连续的，a后面肯定是b，非聚集索引就不连续了，就像图书馆的某个作者的书，有可能在第1个货架上和第10个货架上。还有一个小知识点就是：聚集索引一个表只能有一个，而非聚集索引一个表可以存在多个。\n\n### 索引建立的原则\n* 定义主键的数据列一定要建立索引。\n\n* 定义有外键的数据列一定要建立索引。\n\n* 对于经常查询的数据列最好建立索引。\n\n* 对于需要在指定范围内的快速或频繁查询的数据列;\n\n* 经常用在WHERE子句中的数据列。\n\n* 经常出现在关键字order by、group by、distinct后面的字段，建立索引。如果建立的是复合索引，索引的字段顺序要和这些关键字后面的字段顺序一致，否则索引不会被使用。\n\n* 对于那些查询中很少涉及的列，重复值比较多的列不要建立索引。\n\n* 对于定义为text、image和bit的数据类型的列不要建立索引。\n\n* 对于经常存取的列避免建立索引 \n\n* 限制表上的索引数目。对一个存在大量更新操作的表，所建索引的数目一般不要超过3个，最多不要超过5个。索引虽说提高了访问速度，但太多索引会影响数据的更新操作。\n\n* 对复合索引，按照字段在查询条件中出现的频度建立索引。在复合索引中，记录首先按照第一个字段排序。对于在第一个字段上取值相同的记录，系统再按照第二个字段的取值排序，以此类推。因此只有复合索引的第一个字段出现在查询条件中，该索引才可能被使用,因此将应用频度高的字段，放置在复合索引的前面，会使系统最大可能地使用此索引，发挥索引的作用。\n\n### SQL的优化\n1. 有大量重复值、且经常有范围查询（between, >,< ，>=,< =）和order by、group by发生的列，可考虑建立群集索引；\n\n2. 经常同时存取多列，且每列都含有重复值可考虑建立组合索引；\n\n3. 组合索引要尽量使关键查询形成索引覆盖，其前导列一定是使用最频繁的列。遇到以下情况，执行计划不会选择覆盖查询：\n\t* select选择的字段中含有不在索引中的字段 ，也即索引没有覆盖全部的列。\n\t* where 条件中不能含有对索引进行like的操作。 \n4. 任何对列的操作都将导致表扫描，它包括数据库函数、计算表达式等等，查询时要尽可能将操作移至等号右边。\n\n5. 要善于使用存储过程，它使SQL变得更加灵活和高效。\n\n\t* 存储过程减少了网络传输、处理及存储的工作量，且经过编译和优化，执行速度快，易于维护，且表的结构改变时，不影响客户端的应用程序 \n\n\t* 使用存储过程，视图，函数有助于减少应用程序中SQL复制的弊端，因为现在只在一个地方集中处理SQL\n6. IN、NOT IN 操作符\n\n　　IN和EXISTS 性能有外表和内表区分的，但是在大数据量的表中推荐用EXISTS 代替IN 。\n\n　　Not IN 不走索引的是绝对不能用的，可以用NOT EXISTS 代替\n\n\n7.  IS NULL 或IS NOT NULL操作\n\t索引是不索引空值的，所以这样的操作不能使用索引，可以用其他的办法处理，例如：数字类型，判断大于0，字符串类型设置一个默认值，判断是否等于默认值即可\n\n8. <> 操作符（不等于） \n　　不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描。 用其它相同功能的操作运算代替，如 a<>0 改为 a>0 or a<0    a<>’’ 改为 a>’’ \n\n9.  用全文搜索搜索文本数据，取代like搜索，全文搜索始终优于like搜索\n　　\n10.  在查询中不要使用  select * \n11.  where使用原则\n\t* 第一个原则：在where子句中应把最具限制性的条件放在最前面。\n\t* 第二个原则：where子句中字段的顺序应和索引中字段顺序一致。\n\t```sql\nselect field3,field4 from tb where field2 like 'R%' 快\nselect field3,field4 from tb where field2 like '%R' 慢，不使用索引\n\nselect field3,field4 from tb where field1>='sdf' 快 可以迅速定位索引\nselect field3,field4 from tb where field1>'sdf' 慢\n　　 ```\n\n\n\n\n \n### 范式\n\n1. 第一范式：属性(字段)的原子性约束，要求属性具有原子性，不可再分割；\n\n2. 第二范式：记录的惟一性约束，要求记录有惟一标识，每条记录需要有一个属性来做为实体的唯一标识。\n\n3. 第三范式：属性(字段)冗余性的约束，即任何字段不能由其他字段派生出来，在通俗点就是：主键没有直接关系的数据列必须消除(消除的办法就是再创建一个表来存放他们，当然外键除外)\n\t\n数据库设计的实用原则是：在数据冗余和处理速度之间找到合适的平衡点 \n\n满足范式的表一定是规范化的表，但不一定是最佳的设计。很多情况下会为了提高数据库的运行效率，常常需要降低范式标准：适当增加冗余，达到以空间换时间的目的\n\n### 主键和外键的必要性\n\n主键与外键的设计，在全局数据库的设计中，占有重要地位。 因为：主键是实体的抽象，主键与外键的配对，表示实体之间的连接。\n\n主键：根据第二范式，需要有一个字段去标识这条记录，主键无疑是最好的标识，但是很多表也不一定需要主键，但是对于数据量大，查询频繁的数据库表，一定要有主键，主键可以增加效率、防止重复等优点。\n\n主键的选择也比较重要，一般选择总的长度小的键，小的键的比较速度快，同时小的键可以使主键的B树结构的层次更少。\n主键的选择还要注意组合主键的字段次序，对于组合主键来说，不同的字段次序的主键的性能差别可能会很大，一般应该选择重复率低、单独或者组合查询可能性大的字段放在前面。\n\n外键：外键作为数据库对象，很多人认为麻烦而不用，实际上，外键在大部分情况下是很有用的，理由是：外键是最高效的一致性维护方法\n\n数据库的一致性要求，依次可以用外键、CHECK约束、规则约束、触发器、客户端程序，一般认为，离数据越近的方法效率越高。\n谨慎使用级联删除和级联更新，级联删除和级联更新作为SQL SERVER 2000当年的新功能，在2005作了保留，应该有其可用之处。我这里说的谨慎，是因为级联删除和级联更新有些突破了传统的关于外键的定义，功能有点太过强大，使用前必须确定自己已经把握好其功能范围，否则，级联删除和级联更新可能让你的数据莫名其妙的被修改或者丢失。从性能看级联删除和级联更新是比其他方法更高效的方法。\n\n \n### 分割你的表，减小表尺寸\n\n  如果你发现某个表的记录太多，例如超过一千万条，则要对该表进行水平分割。水平分割的做法是，以该表主键的某个值为界线，将该表的记录水平分割为两个表。\n\n如果你若发现某个表的字段太多，例如超过八十个，则垂直分割该表，将原来的一个表分解为两个表\n\n \n### 字段设计原则\n\n字段是数据库最基本的单位，其设计对性能的影响是很大的。需要注意如下：\n\nA、数据类型尽量用数字型，数字型的比较比字符型的快很多。\n\nB、 数据类型尽量小，这里的尽量小是指在满足可以预见的未来需求的前提下的。\n\nC、 尽量不要允许NULL，除非必要，可以用NOT NULL+DEFAULT代替。\n\nD、少用TEXT和IMAGE，二进制字段的读写是比较慢的，而且，读取的方法也不多，大部分情况下最好不用。\n\nE、 自增字段要慎用，不利于数据迁移\n\n### 减少持有行级锁的时间\n\n比如对于一个秒杀系统，成功秒杀一件商品需要先在商品表里减库存再将购买记录插入到购买记录表：\n\n\t减库存  update product set number=number-1 where product.id=id\n\t插入购买记录：insert into sales(id,..,..,) value (...);\n这两个sql是在事务管理下的，是原子的，减库存的行级锁需要等到插入操作执行完之后才能释放锁。所以整个过程都必须持有行级锁，由于减库存一个高热点的操作，如果持有锁的时间太长会降低秒杀的效率。为了降低持有锁的时间，可以将插入操作放到update前面。\n","slug":"数据库索引","published":1,"updated":"2016-06-27T10:43:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixud001jbxboqf9f0ogo","content":"<h3 id=\"聚集索引和非聚集索引\"><a href=\"#聚集索引和非聚集索引\" class=\"headerlink\" title=\"聚集索引和非聚集索引\"></a>聚集索引和非聚集索引</h3><p>聚集索引存储记录是物理上连续存在，而非聚集索引是逻辑上的连续，物理存储并不连续。就像字段，聚集索引是连续的，a后面肯定是b，非聚集索引就不连续了，就像图书馆的某个作者的书，有可能在第1个货架上和第10个货架上。还有一个小知识点就是：聚集索引一个表只能有一个，而非聚集索引一个表可以存在多个。</p>\n<h3 id=\"索引建立的原则\"><a href=\"#索引建立的原则\" class=\"headerlink\" title=\"索引建立的原则\"></a>索引建立的原则</h3><ul>\n<li><p>定义主键的数据列一定要建立索引。</p>\n</li>\n<li><p>定义有外键的数据列一定要建立索引。</p>\n</li>\n<li><p>对于经常查询的数据列最好建立索引。</p>\n</li>\n<li><p>对于需要在指定范围内的快速或频繁查询的数据列;</p>\n</li>\n<li><p>经常用在WHERE子句中的数据列。</p>\n</li>\n<li><p>经常出现在关键字order by、group by、distinct后面的字段，建立索引。如果建立的是复合索引，索引的字段顺序要和这些关键字后面的字段顺序一致，否则索引不会被使用。</p>\n</li>\n<li><p>对于那些查询中很少涉及的列，重复值比较多的列不要建立索引。</p>\n</li>\n<li><p>对于定义为text、image和bit的数据类型的列不要建立索引。</p>\n</li>\n<li><p>对于经常存取的列避免建立索引 </p>\n</li>\n<li><p>限制表上的索引数目。对一个存在大量更新操作的表，所建索引的数目一般不要超过3个，最多不要超过5个。索引虽说提高了访问速度，但太多索引会影响数据的更新操作。</p>\n</li>\n<li><p>对复合索引，按照字段在查询条件中出现的频度建立索引。在复合索引中，记录首先按照第一个字段排序。对于在第一个字段上取值相同的记录，系统再按照第二个字段的取值排序，以此类推。因此只有复合索引的第一个字段出现在查询条件中，该索引才可能被使用,因此将应用频度高的字段，放置在复合索引的前面，会使系统最大可能地使用此索引，发挥索引的作用。</p>\n</li>\n</ul>\n<h3 id=\"SQL的优化\"><a href=\"#SQL的优化\" class=\"headerlink\" title=\"SQL的优化\"></a>SQL的优化</h3><ol>\n<li><p>有大量重复值、且经常有范围查询（between, &gt;,&lt; ，&gt;=,&lt; =）和order by、group by发生的列，可考虑建立群集索引；</p>\n</li>\n<li><p>经常同时存取多列，且每列都含有重复值可考虑建立组合索引；</p>\n</li>\n<li><p>组合索引要尽量使关键查询形成索引覆盖，其前导列一定是使用最频繁的列。遇到以下情况，执行计划不会选择覆盖查询：</p>\n<ul>\n<li>select选择的字段中含有不在索引中的字段 ，也即索引没有覆盖全部的列。</li>\n<li>where 条件中不能含有对索引进行like的操作。 </li>\n</ul>\n</li>\n<li><p>任何对列的操作都将导致表扫描，它包括数据库函数、计算表达式等等，查询时要尽可能将操作移至等号右边。</p>\n</li>\n<li><p>要善于使用存储过程，它使SQL变得更加灵活和高效。</p>\n<ul>\n<li><p>存储过程减少了网络传输、处理及存储的工作量，且经过编译和优化，执行速度快，易于维护，且表的结构改变时，不影响客户端的应用程序 </p>\n</li>\n<li><p>使用存储过程，视图，函数有助于减少应用程序中SQL复制的弊端，因为现在只在一个地方集中处理SQL</p>\n</li>\n</ul>\n</li>\n<li>IN、NOT IN 操作符</li>\n</ol>\n<p>　　IN和EXISTS 性能有外表和内表区分的，但是在大数据量的表中推荐用EXISTS 代替IN 。</p>\n<p>　　Not IN 不走索引的是绝对不能用的，可以用NOT EXISTS 代替</p>\n<ol>\n<li><p>IS NULL 或IS NOT NULL操作<br>索引是不索引空值的，所以这样的操作不能使用索引，可以用其他的办法处理，例如：数字类型，判断大于0，字符串类型设置一个默认值，判断是否等于默认值即可</p>\n</li>\n<li><p>&lt;&gt; 操作符（不等于）<br>　　不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描。 用其它相同功能的操作运算代替，如 a&lt;&gt;0 改为 a&gt;0 or a<0 a<=\"\">’’ 改为 a&gt;’’ </0></p>\n</li>\n<li><p>用全文搜索搜索文本数据，取代like搜索，全文搜索始终优于like搜索\n　　</p>\n</li>\n<li>在查询中不要使用  select * </li>\n<li>where使用原则<ul>\n<li>第一个原则：在where子句中应把最具限制性的条件放在最前面。</li>\n<li>第二个原则：where子句中字段的顺序应和索引中字段顺序一致。<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> field3,field4 <span class=\"keyword\">from</span> tb <span class=\"keyword\">where</span> field2 <span class=\"keyword\">like</span> <span class=\"string\">'R%'</span> 快</span><br><span class=\"line\"><span class=\"keyword\">select</span> field3,field4 <span class=\"keyword\">from</span> tb <span class=\"keyword\">where</span> field2 <span class=\"keyword\">like</span> <span class=\"string\">'%R'</span> 慢，不使用索引</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> field3,field4 <span class=\"keyword\">from</span> tb <span class=\"keyword\">where</span> field1&gt;=<span class=\"string\">'sdf'</span> 快 可以迅速定位索引</span><br><span class=\"line\"><span class=\"keyword\">select</span> field3,field4 <span class=\"keyword\">from</span> tb <span class=\"keyword\">where</span> field1&gt;<span class=\"string\">'sdf'</span> 慢</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"范式\"><a href=\"#范式\" class=\"headerlink\" title=\"范式\"></a>范式</h3><ol>\n<li><p>第一范式：属性(字段)的原子性约束，要求属性具有原子性，不可再分割；</p>\n</li>\n<li><p>第二范式：记录的惟一性约束，要求记录有惟一标识，每条记录需要有一个属性来做为实体的唯一标识。</p>\n</li>\n<li><p>第三范式：属性(字段)冗余性的约束，即任何字段不能由其他字段派生出来，在通俗点就是：主键没有直接关系的数据列必须消除(消除的办法就是再创建一个表来存放他们，当然外键除外)</p>\n</li>\n</ol>\n<p>数据库设计的实用原则是：在数据冗余和处理速度之间找到合适的平衡点 </p>\n<p>满足范式的表一定是规范化的表，但不一定是最佳的设计。很多情况下会为了提高数据库的运行效率，常常需要降低范式标准：适当增加冗余，达到以空间换时间的目的</p>\n<h3 id=\"主键和外键的必要性\"><a href=\"#主键和外键的必要性\" class=\"headerlink\" title=\"主键和外键的必要性\"></a>主键和外键的必要性</h3><p>主键与外键的设计，在全局数据库的设计中，占有重要地位。 因为：主键是实体的抽象，主键与外键的配对，表示实体之间的连接。</p>\n<p>主键：根据第二范式，需要有一个字段去标识这条记录，主键无疑是最好的标识，但是很多表也不一定需要主键，但是对于数据量大，查询频繁的数据库表，一定要有主键，主键可以增加效率、防止重复等优点。</p>\n<p>主键的选择也比较重要，一般选择总的长度小的键，小的键的比较速度快，同时小的键可以使主键的B树结构的层次更少。<br>主键的选择还要注意组合主键的字段次序，对于组合主键来说，不同的字段次序的主键的性能差别可能会很大，一般应该选择重复率低、单独或者组合查询可能性大的字段放在前面。</p>\n<p>外键：外键作为数据库对象，很多人认为麻烦而不用，实际上，外键在大部分情况下是很有用的，理由是：外键是最高效的一致性维护方法</p>\n<p>数据库的一致性要求，依次可以用外键、CHECK约束、规则约束、触发器、客户端程序，一般认为，离数据越近的方法效率越高。<br>谨慎使用级联删除和级联更新，级联删除和级联更新作为SQL SERVER 2000当年的新功能，在2005作了保留，应该有其可用之处。我这里说的谨慎，是因为级联删除和级联更新有些突破了传统的关于外键的定义，功能有点太过强大，使用前必须确定自己已经把握好其功能范围，否则，级联删除和级联更新可能让你的数据莫名其妙的被修改或者丢失。从性能看级联删除和级联更新是比其他方法更高效的方法。</p>\n<h3 id=\"分割你的表，减小表尺寸\"><a href=\"#分割你的表，减小表尺寸\" class=\"headerlink\" title=\"分割你的表，减小表尺寸\"></a>分割你的表，减小表尺寸</h3><p>  如果你发现某个表的记录太多，例如超过一千万条，则要对该表进行水平分割。水平分割的做法是，以该表主键的某个值为界线，将该表的记录水平分割为两个表。</p>\n<p>如果你若发现某个表的字段太多，例如超过八十个，则垂直分割该表，将原来的一个表分解为两个表</p>\n<h3 id=\"字段设计原则\"><a href=\"#字段设计原则\" class=\"headerlink\" title=\"字段设计原则\"></a>字段设计原则</h3><p>字段是数据库最基本的单位，其设计对性能的影响是很大的。需要注意如下：</p>\n<p>A、数据类型尽量用数字型，数字型的比较比字符型的快很多。</p>\n<p>B、 数据类型尽量小，这里的尽量小是指在满足可以预见的未来需求的前提下的。</p>\n<p>C、 尽量不要允许NULL，除非必要，可以用NOT NULL+DEFAULT代替。</p>\n<p>D、少用TEXT和IMAGE，二进制字段的读写是比较慢的，而且，读取的方法也不多，大部分情况下最好不用。</p>\n<p>E、 自增字段要慎用，不利于数据迁移</p>\n<h3 id=\"减少持有行级锁的时间\"><a href=\"#减少持有行级锁的时间\" class=\"headerlink\" title=\"减少持有行级锁的时间\"></a>减少持有行级锁的时间</h3><p>比如对于一个秒杀系统，成功秒杀一件商品需要先在商品表里减库存再将购买记录插入到购买记录表：</p>\n<pre><code>减库存  update product set number=number-1 where product.id=id\n插入购买记录：insert into sales(id,..,..,) value (...);\n</code></pre><p>这两个sql是在事务管理下的，是原子的，减库存的行级锁需要等到插入操作执行完之后才能释放锁。所以整个过程都必须持有行级锁，由于减库存一个高热点的操作，如果持有锁的时间太长会降低秒杀的效率。为了降低持有锁的时间，可以将插入操作放到update前面。</p>\n","excerpt":"","more":"<h3 id=\"聚集索引和非聚集索引\"><a href=\"#聚集索引和非聚集索引\" class=\"headerlink\" title=\"聚集索引和非聚集索引\"></a>聚集索引和非聚集索引</h3><p>聚集索引存储记录是物理上连续存在，而非聚集索引是逻辑上的连续，物理存储并不连续。就像字段，聚集索引是连续的，a后面肯定是b，非聚集索引就不连续了，就像图书馆的某个作者的书，有可能在第1个货架上和第10个货架上。还有一个小知识点就是：聚集索引一个表只能有一个，而非聚集索引一个表可以存在多个。</p>\n<h3 id=\"索引建立的原则\"><a href=\"#索引建立的原则\" class=\"headerlink\" title=\"索引建立的原则\"></a>索引建立的原则</h3><ul>\n<li><p>定义主键的数据列一定要建立索引。</p>\n</li>\n<li><p>定义有外键的数据列一定要建立索引。</p>\n</li>\n<li><p>对于经常查询的数据列最好建立索引。</p>\n</li>\n<li><p>对于需要在指定范围内的快速或频繁查询的数据列;</p>\n</li>\n<li><p>经常用在WHERE子句中的数据列。</p>\n</li>\n<li><p>经常出现在关键字order by、group by、distinct后面的字段，建立索引。如果建立的是复合索引，索引的字段顺序要和这些关键字后面的字段顺序一致，否则索引不会被使用。</p>\n</li>\n<li><p>对于那些查询中很少涉及的列，重复值比较多的列不要建立索引。</p>\n</li>\n<li><p>对于定义为text、image和bit的数据类型的列不要建立索引。</p>\n</li>\n<li><p>对于经常存取的列避免建立索引 </p>\n</li>\n<li><p>限制表上的索引数目。对一个存在大量更新操作的表，所建索引的数目一般不要超过3个，最多不要超过5个。索引虽说提高了访问速度，但太多索引会影响数据的更新操作。</p>\n</li>\n<li><p>对复合索引，按照字段在查询条件中出现的频度建立索引。在复合索引中，记录首先按照第一个字段排序。对于在第一个字段上取值相同的记录，系统再按照第二个字段的取值排序，以此类推。因此只有复合索引的第一个字段出现在查询条件中，该索引才可能被使用,因此将应用频度高的字段，放置在复合索引的前面，会使系统最大可能地使用此索引，发挥索引的作用。</p>\n</li>\n</ul>\n<h3 id=\"SQL的优化\"><a href=\"#SQL的优化\" class=\"headerlink\" title=\"SQL的优化\"></a>SQL的优化</h3><ol>\n<li><p>有大量重复值、且经常有范围查询（between, &gt;,&lt; ，&gt;=,&lt; =）和order by、group by发生的列，可考虑建立群集索引；</p>\n</li>\n<li><p>经常同时存取多列，且每列都含有重复值可考虑建立组合索引；</p>\n</li>\n<li><p>组合索引要尽量使关键查询形成索引覆盖，其前导列一定是使用最频繁的列。遇到以下情况，执行计划不会选择覆盖查询：</p>\n<ul>\n<li>select选择的字段中含有不在索引中的字段 ，也即索引没有覆盖全部的列。</li>\n<li>where 条件中不能含有对索引进行like的操作。 </li>\n</ul>\n</li>\n<li><p>任何对列的操作都将导致表扫描，它包括数据库函数、计算表达式等等，查询时要尽可能将操作移至等号右边。</p>\n</li>\n<li><p>要善于使用存储过程，它使SQL变得更加灵活和高效。</p>\n<ul>\n<li><p>存储过程减少了网络传输、处理及存储的工作量，且经过编译和优化，执行速度快，易于维护，且表的结构改变时，不影响客户端的应用程序 </p>\n</li>\n<li><p>使用存储过程，视图，函数有助于减少应用程序中SQL复制的弊端，因为现在只在一个地方集中处理SQL</p>\n</li>\n</ul>\n</li>\n<li>IN、NOT IN 操作符</li>\n</ol>\n<p>　　IN和EXISTS 性能有外表和内表区分的，但是在大数据量的表中推荐用EXISTS 代替IN 。</p>\n<p>　　Not IN 不走索引的是绝对不能用的，可以用NOT EXISTS 代替</p>\n<ol>\n<li><p>IS NULL 或IS NOT NULL操作<br>索引是不索引空值的，所以这样的操作不能使用索引，可以用其他的办法处理，例如：数字类型，判断大于0，字符串类型设置一个默认值，判断是否等于默认值即可</p>\n</li>\n<li><p>&lt;&gt; 操作符（不等于）<br>　　不等于操作符是永远不会用到索引的，因此对它的处理只会产生全表扫描。 用其它相同功能的操作运算代替，如 a&lt;&gt;0 改为 a&gt;0 or a<0    a<>’’ 改为 a&gt;’’ </p>\n</li>\n<li><p>用全文搜索搜索文本数据，取代like搜索，全文搜索始终优于like搜索\n　　</p>\n</li>\n<li>在查询中不要使用  select * </li>\n<li>where使用原则<ul>\n<li>第一个原则：在where子句中应把最具限制性的条件放在最前面。</li>\n<li>第二个原则：where子句中字段的顺序应和索引中字段顺序一致。<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">select</span> field3,field4 <span class=\"keyword\">from</span> tb <span class=\"keyword\">where</span> field2 <span class=\"keyword\">like</span> <span class=\"string\">'R%'</span> 快</span><br><span class=\"line\"><span class=\"keyword\">select</span> field3,field4 <span class=\"keyword\">from</span> tb <span class=\"keyword\">where</span> field2 <span class=\"keyword\">like</span> <span class=\"string\">'%R'</span> 慢，不使用索引</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> field3,field4 <span class=\"keyword\">from</span> tb <span class=\"keyword\">where</span> field1&gt;=<span class=\"string\">'sdf'</span> 快 可以迅速定位索引</span><br><span class=\"line\"><span class=\"keyword\">select</span> field3,field4 <span class=\"keyword\">from</span> tb <span class=\"keyword\">where</span> field1&gt;<span class=\"string\">'sdf'</span> 慢</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"范式\"><a href=\"#范式\" class=\"headerlink\" title=\"范式\"></a>范式</h3><ol>\n<li><p>第一范式：属性(字段)的原子性约束，要求属性具有原子性，不可再分割；</p>\n</li>\n<li><p>第二范式：记录的惟一性约束，要求记录有惟一标识，每条记录需要有一个属性来做为实体的唯一标识。</p>\n</li>\n<li><p>第三范式：属性(字段)冗余性的约束，即任何字段不能由其他字段派生出来，在通俗点就是：主键没有直接关系的数据列必须消除(消除的办法就是再创建一个表来存放他们，当然外键除外)</p>\n</li>\n</ol>\n<p>数据库设计的实用原则是：在数据冗余和处理速度之间找到合适的平衡点 </p>\n<p>满足范式的表一定是规范化的表，但不一定是最佳的设计。很多情况下会为了提高数据库的运行效率，常常需要降低范式标准：适当增加冗余，达到以空间换时间的目的</p>\n<h3 id=\"主键和外键的必要性\"><a href=\"#主键和外键的必要性\" class=\"headerlink\" title=\"主键和外键的必要性\"></a>主键和外键的必要性</h3><p>主键与外键的设计，在全局数据库的设计中，占有重要地位。 因为：主键是实体的抽象，主键与外键的配对，表示实体之间的连接。</p>\n<p>主键：根据第二范式，需要有一个字段去标识这条记录，主键无疑是最好的标识，但是很多表也不一定需要主键，但是对于数据量大，查询频繁的数据库表，一定要有主键，主键可以增加效率、防止重复等优点。</p>\n<p>主键的选择也比较重要，一般选择总的长度小的键，小的键的比较速度快，同时小的键可以使主键的B树结构的层次更少。<br>主键的选择还要注意组合主键的字段次序，对于组合主键来说，不同的字段次序的主键的性能差别可能会很大，一般应该选择重复率低、单独或者组合查询可能性大的字段放在前面。</p>\n<p>外键：外键作为数据库对象，很多人认为麻烦而不用，实际上，外键在大部分情况下是很有用的，理由是：外键是最高效的一致性维护方法</p>\n<p>数据库的一致性要求，依次可以用外键、CHECK约束、规则约束、触发器、客户端程序，一般认为，离数据越近的方法效率越高。<br>谨慎使用级联删除和级联更新，级联删除和级联更新作为SQL SERVER 2000当年的新功能，在2005作了保留，应该有其可用之处。我这里说的谨慎，是因为级联删除和级联更新有些突破了传统的关于外键的定义，功能有点太过强大，使用前必须确定自己已经把握好其功能范围，否则，级联删除和级联更新可能让你的数据莫名其妙的被修改或者丢失。从性能看级联删除和级联更新是比其他方法更高效的方法。</p>\n<h3 id=\"分割你的表，减小表尺寸\"><a href=\"#分割你的表，减小表尺寸\" class=\"headerlink\" title=\"分割你的表，减小表尺寸\"></a>分割你的表，减小表尺寸</h3><p>  如果你发现某个表的记录太多，例如超过一千万条，则要对该表进行水平分割。水平分割的做法是，以该表主键的某个值为界线，将该表的记录水平分割为两个表。</p>\n<p>如果你若发现某个表的字段太多，例如超过八十个，则垂直分割该表，将原来的一个表分解为两个表</p>\n<h3 id=\"字段设计原则\"><a href=\"#字段设计原则\" class=\"headerlink\" title=\"字段设计原则\"></a>字段设计原则</h3><p>字段是数据库最基本的单位，其设计对性能的影响是很大的。需要注意如下：</p>\n<p>A、数据类型尽量用数字型，数字型的比较比字符型的快很多。</p>\n<p>B、 数据类型尽量小，这里的尽量小是指在满足可以预见的未来需求的前提下的。</p>\n<p>C、 尽量不要允许NULL，除非必要，可以用NOT NULL+DEFAULT代替。</p>\n<p>D、少用TEXT和IMAGE，二进制字段的读写是比较慢的，而且，读取的方法也不多，大部分情况下最好不用。</p>\n<p>E、 自增字段要慎用，不利于数据迁移</p>\n<h3 id=\"减少持有行级锁的时间\"><a href=\"#减少持有行级锁的时间\" class=\"headerlink\" title=\"减少持有行级锁的时间\"></a>减少持有行级锁的时间</h3><p>比如对于一个秒杀系统，成功秒杀一件商品需要先在商品表里减库存再将购买记录插入到购买记录表：</p>\n<pre><code>减库存  update product set number=number-1 where product.id=id\n插入购买记录：insert into sales(id,..,..,) value (...);\n</code></pre><p>这两个sql是在事务管理下的，是原子的，减库存的行级锁需要等到插入操作执行完之后才能释放锁。所以整个过程都必须持有行级锁，由于减库存一个高热点的操作，如果持有锁的时间太长会降低秒杀的效率。为了降低持有锁的时间，可以将插入操作放到update前面。</p>\n"},{"title":"笔试常见问题","date":"2016-08-14T07:33:36.000Z","_content":"#### scron表达式\n\nCron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，Cron有如下两种语法格式： \n\nSeconds Minutes Hours DayofMonth Month DayofWeek Year或 \nSeconds Minutes Hours DayofMonth Month DayofWeek\n\n每一个域可出现的字符如下： \nSeconds:可出现\", - * /\"四个字符，有效范围为0-59的整数 \nMinutes:可出现\", - * /\"四个字符，有效范围为0-59的整数 \nHours:可出现\", - * /\"四个字符，有效范围为0-23的整数 \nDayofMonth:可出现\", - * / ? L W C\"八个字符，有效范围为0-31的整数 \nMonth:可出现\", - * /\"四个字符，有效范围为1-12的整数或JAN-DEc \nDayofWeek:可出现\", - * / ? L C #\"四个字符，有效范围为1-7的整数或SUN-SAT两个范围。1表示星期天，2表示星期一， 依次类推 \nYear:可出现\", - * /\"四个字符，有效范围为1970-2099年\n\n/：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着从第5分钟开始每20分钟触发一次\n\n","source":"_posts/笔试常见问题.md","raw":"---\ntitle: 笔试常见问题\ndate: 2016-08-14 15:33:36\ntags:\n- 笔试\ncategories:\n- Java\n\n---\n#### scron表达式\n\nCron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，Cron有如下两种语法格式： \n\nSeconds Minutes Hours DayofMonth Month DayofWeek Year或 \nSeconds Minutes Hours DayofMonth Month DayofWeek\n\n每一个域可出现的字符如下： \nSeconds:可出现\", - * /\"四个字符，有效范围为0-59的整数 \nMinutes:可出现\", - * /\"四个字符，有效范围为0-59的整数 \nHours:可出现\", - * /\"四个字符，有效范围为0-23的整数 \nDayofMonth:可出现\", - * / ? L W C\"八个字符，有效范围为0-31的整数 \nMonth:可出现\", - * /\"四个字符，有效范围为1-12的整数或JAN-DEc \nDayofWeek:可出现\", - * / ? L C #\"四个字符，有效范围为1-7的整数或SUN-SAT两个范围。1表示星期天，2表示星期一， 依次类推 \nYear:可出现\", - * /\"四个字符，有效范围为1970-2099年\n\n/：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着从第5分钟开始每20分钟触发一次\n\n","slug":"笔试常见问题","published":1,"updated":"2016-08-15T01:31:30.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixug001lbxbo3lp4d4jr","content":"<h4 id=\"scron表达式\"><a href=\"#scron表达式\" class=\"headerlink\" title=\"scron表达式\"></a>scron表达式</h4><p>Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，Cron有如下两种语法格式： </p>\n<p>Seconds Minutes Hours DayofMonth Month DayofWeek Year或<br>Seconds Minutes Hours DayofMonth Month DayofWeek</p>\n<p>每一个域可出现的字符如下：<br>Seconds:可出现”, - <em> /“四个字符，有效范围为0-59的整数<br>Minutes:可出现”, - </em> /“四个字符，有效范围为0-59的整数<br>Hours:可出现”, - <em> /“四个字符，有效范围为0-23的整数<br>DayofMonth:可出现”, - </em> / ? L W C”八个字符，有效范围为0-31的整数<br>Month:可出现”, - <em> /“四个字符，有效范围为1-12的整数或JAN-DEc<br>DayofWeek:可出现”, - </em> / ? L C #”四个字符，有效范围为1-7的整数或SUN-SAT两个范围。1表示星期天，2表示星期一， 依次类推<br>Year:可出现”, - * /“四个字符，有效范围为1970-2099年</p>\n<p>/：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着从第5分钟开始每20分钟触发一次</p>\n","excerpt":"","more":"<h4 id=\"scron表达式\"><a href=\"#scron表达式\" class=\"headerlink\" title=\"scron表达式\"></a>scron表达式</h4><p>Cron表达式是一个字符串，字符串以5或6个空格隔开，分为6或7个域，每一个域代表一个含义，Cron有如下两种语法格式： </p>\n<p>Seconds Minutes Hours DayofMonth Month DayofWeek Year或<br>Seconds Minutes Hours DayofMonth Month DayofWeek</p>\n<p>每一个域可出现的字符如下：<br>Seconds:可出现”, - <em> /“四个字符，有效范围为0-59的整数<br>Minutes:可出现”, - </em> /“四个字符，有效范围为0-59的整数<br>Hours:可出现”, - <em> /“四个字符，有效范围为0-23的整数<br>DayofMonth:可出现”, - </em> / ? L W C”八个字符，有效范围为0-31的整数<br>Month:可出现”, - <em> /“四个字符，有效范围为1-12的整数或JAN-DEc<br>DayofWeek:可出现”, - </em> / ? L C #”四个字符，有效范围为1-7的整数或SUN-SAT两个范围。1表示星期天，2表示星期一， 依次类推<br>Year:可出现”, - * /“四个字符，有效范围为1970-2099年</p>\n<p>/：表示起始时间开始触发，然后每隔固定时间触发一次，例如在Minutes域使用5/20,则意味着从第5分钟开始每20分钟触发一次</p>\n"},{"title":"转:Spring如何加载XSD文件(org.xml.sax.SAXParseException: Failed to read schema document错误的解决方法)","date":"2016-06-06T00:49:08.000Z","_content":"本文原文连接: http://blog.csdn.net/bluishglc/article/details/7596118 ,转载请注明出处！\n\n有时候你会发现过去一直启动正常的系统，某天启动时会报出形如下面的错误：\n\n\n\n    org.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document 'http://www.springframework.org/schema/beans/spring-beans-2.0.xsd', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not <xsd:schema>.  \n\n\n很显然，spring xml配置文件中指定的xsd文件读取不到了，原因多是因为断网或spring的官网暂时无法连接导致的。 你可以通过在浏览器输入xsd文件的URL，如：http://www.springframework.org/schema/beans/spring-beans-2.0.xsd 进行确认。\n\n\n关于这个问题，网上有两种常见的解决方法，第一种简单有效，但是工作量大，即：把所有spring配置文件中url形式的xsd路径转换成指向本地xsd文件的classpath形式的路径，例如：classpath:org/springframework/beans/factory/xml/spring-beans-2.5.xsd ,再有一种方法就是在本机搭建web服务器，按URL创建相应文件夹，放入对应xsd文件，在本机hosts文件中加入\"127.0.0.1 www.springframework.org\".实际上，这两种方法都属于“歪打正着”式的方法，直正弄明白这一问题还需要从spring的XSD文件加载机制谈起。\n\n\n首先：你必须知道一点：spring在加载xsd文件时总是先试图在本地查找xsd文件(spring的jar包中已经包含了所有版本的xsd文件)，如果没有找到，才会转向去URL指定的路径下载。这是非常合理的做法，并不像看上去的那样，每次都是从站点下载的。事实上，假如你的所有配置是正确定的，你的工程完全可以在断网的情况下启动而不会报上面的错误。Spring加载xsd文件的类是PluggableSchemaResolver，你可以查看一下它的源码来验证上述说法。另外，你可以在log4j.xml文件中加入：\n\n\n    <logger name=\"org.springframework.beans.factory.xml\">  \n        <level value=\"all\" />  \n    </logger>  \n\n\n通过日志了解spring是何加载xsd文件的。\n\n\n接下来，问题就是为什么spring在本地没有找到需要的文件，不得不转向网站下载。关于这个问题，其实也非常简单。在很多spring的jar包里，在META-INF目录下都有一个spring.schemas，这是一个property文件，其内容类似于下面：\n\n\n\n    http\\://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd  \n    http\\://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd  \n    http\\://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd  \n    ....  \n\n\n实际上，这个文件就是spring关于xsd文件在本地存放路径的映射，spring就是通过这个文件在本地（也就是spring的jar里）查找xsd文件的。那么，查找不到的原因排除URL输入有误之外，可能就是声明的xsd文件版本在本地不存在。一般来说，新版本的spring jar包会将过去所有版本(应该是自2.0以后)的xsd打包，并在spring.schemas文件中加入了对应项，出现问题的情况往往是声明使用了一个高版本的xsd文件，如3.0，但依赖的spring的jar包却是2.5之前的版本，由于2.5版本自然不可能包含3.0的xsd文件，此时就会导致spring去站点下载目标xsd文件，如遇断网或是目标站点不可用，上述问题就发生了。\n\n\n但是，在实现开发中，出现上述错误的几率并不高，最常见的导致这一问题的原因其实与使用了一个名为“assembly”的maven打包插件有关。很多项目需要将工程连同其所依赖的所有jar包打包成一个jar包，maven的assembly插件就是用来完成这个任务的。但是由于工程往往依赖很多的jar包，而被依赖的jar又会依赖其他的jar包，这样，当工程中依赖到不同的版本的spring时，在使用assembly进行打包时，只能将某一个版本jar包下的spring.schemas文件放入最终打出的jar包里，这就有可能遗漏了一些版本的xsd的本地映射，进而出现了文章开始提到的错误。如果你的项目是打成单一jar的，你可以通过检查最终生成的jar里的spring.schemas文件来确认是不是这种情况。而关于这种情况，解决的方法一般是推荐使用另外一种打包插件shade,它确实是一款比assembly更加优秀的工具，在对spring.schemas文件处理上，shade能够将所有jar里的spring.schemas文件进行合并，在最终生成的单一jar包里，spring.schemas包含了所有出现过的版本的集合！\n\n\n以上就是spring加载XSD文件的机制和出现问题的原因分析。实际上，我们应该让我们工程在启动时总是加载本地的xsd文件，而不是每次去站点下载，做到这一点就需要你结合上述提及的种种情况对你的工程进行一番检查。","source":"_posts/转-Spring如何加载XSD文件-org-xml-sax-SAXParseException-Failed-to-read-schema-document错误的解决方法.md","raw":"---\ntitle: >-\n  转:Spring如何加载XSD文件(org.xml.sax.SAXParseException: Failed to read schema\n  document错误的解决方法)\ndate: 2016-06-06 08:49:08\ntags:\n- Spring\n- 转发\ncategories:\n- Java\n\n---\n本文原文连接: http://blog.csdn.net/bluishglc/article/details/7596118 ,转载请注明出处！\n\n有时候你会发现过去一直启动正常的系统，某天启动时会报出形如下面的错误：\n\n\n\n    org.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document 'http://www.springframework.org/schema/beans/spring-beans-2.0.xsd', because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not <xsd:schema>.  \n\n\n很显然，spring xml配置文件中指定的xsd文件读取不到了，原因多是因为断网或spring的官网暂时无法连接导致的。 你可以通过在浏览器输入xsd文件的URL，如：http://www.springframework.org/schema/beans/spring-beans-2.0.xsd 进行确认。\n\n\n关于这个问题，网上有两种常见的解决方法，第一种简单有效，但是工作量大，即：把所有spring配置文件中url形式的xsd路径转换成指向本地xsd文件的classpath形式的路径，例如：classpath:org/springframework/beans/factory/xml/spring-beans-2.5.xsd ,再有一种方法就是在本机搭建web服务器，按URL创建相应文件夹，放入对应xsd文件，在本机hosts文件中加入\"127.0.0.1 www.springframework.org\".实际上，这两种方法都属于“歪打正着”式的方法，直正弄明白这一问题还需要从spring的XSD文件加载机制谈起。\n\n\n首先：你必须知道一点：spring在加载xsd文件时总是先试图在本地查找xsd文件(spring的jar包中已经包含了所有版本的xsd文件)，如果没有找到，才会转向去URL指定的路径下载。这是非常合理的做法，并不像看上去的那样，每次都是从站点下载的。事实上，假如你的所有配置是正确定的，你的工程完全可以在断网的情况下启动而不会报上面的错误。Spring加载xsd文件的类是PluggableSchemaResolver，你可以查看一下它的源码来验证上述说法。另外，你可以在log4j.xml文件中加入：\n\n\n    <logger name=\"org.springframework.beans.factory.xml\">  \n        <level value=\"all\" />  \n    </logger>  \n\n\n通过日志了解spring是何加载xsd文件的。\n\n\n接下来，问题就是为什么spring在本地没有找到需要的文件，不得不转向网站下载。关于这个问题，其实也非常简单。在很多spring的jar包里，在META-INF目录下都有一个spring.schemas，这是一个property文件，其内容类似于下面：\n\n\n\n    http\\://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd  \n    http\\://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd  \n    http\\://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd  \n    ....  \n\n\n实际上，这个文件就是spring关于xsd文件在本地存放路径的映射，spring就是通过这个文件在本地（也就是spring的jar里）查找xsd文件的。那么，查找不到的原因排除URL输入有误之外，可能就是声明的xsd文件版本在本地不存在。一般来说，新版本的spring jar包会将过去所有版本(应该是自2.0以后)的xsd打包，并在spring.schemas文件中加入了对应项，出现问题的情况往往是声明使用了一个高版本的xsd文件，如3.0，但依赖的spring的jar包却是2.5之前的版本，由于2.5版本自然不可能包含3.0的xsd文件，此时就会导致spring去站点下载目标xsd文件，如遇断网或是目标站点不可用，上述问题就发生了。\n\n\n但是，在实现开发中，出现上述错误的几率并不高，最常见的导致这一问题的原因其实与使用了一个名为“assembly”的maven打包插件有关。很多项目需要将工程连同其所依赖的所有jar包打包成一个jar包，maven的assembly插件就是用来完成这个任务的。但是由于工程往往依赖很多的jar包，而被依赖的jar又会依赖其他的jar包，这样，当工程中依赖到不同的版本的spring时，在使用assembly进行打包时，只能将某一个版本jar包下的spring.schemas文件放入最终打出的jar包里，这就有可能遗漏了一些版本的xsd的本地映射，进而出现了文章开始提到的错误。如果你的项目是打成单一jar的，你可以通过检查最终生成的jar里的spring.schemas文件来确认是不是这种情况。而关于这种情况，解决的方法一般是推荐使用另外一种打包插件shade,它确实是一款比assembly更加优秀的工具，在对spring.schemas文件处理上，shade能够将所有jar里的spring.schemas文件进行合并，在最终生成的单一jar包里，spring.schemas包含了所有出现过的版本的集合！\n\n\n以上就是spring加载XSD文件的机制和出现问题的原因分析。实际上，我们应该让我们工程在启动时总是加载本地的xsd文件，而不是每次去站点下载，做到这一点就需要你结合上述提及的种种情况对你的工程进行一番检查。","slug":"转-Spring如何加载XSD文件-org-xml-sax-SAXParseException-Failed-to-read-schema-document错误的解决方法","published":1,"updated":"2016-06-06T00:52:18.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cis9pixuh001pbxboyfgwjl5h","content":"<p>本文原文连接: <a href=\"http://blog.csdn.net/bluishglc/article/details/7596118\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/bluishglc/article/details/7596118</a> ,转载请注明出处！</p>\n<p>有时候你会发现过去一直启动正常的系统，某天启动时会报出形如下面的错误：</p>\n<pre><code>org.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document &apos;http://www.springframework.org/schema/beans/spring-beans-2.0.xsd&apos;, because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not &lt;xsd:schema&gt;.  \n</code></pre><p>很显然，spring xml配置文件中指定的xsd文件读取不到了，原因多是因为断网或spring的官网暂时无法连接导致的。 你可以通过在浏览器输入xsd文件的URL，如：<a href=\"http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\" target=\"_blank\" rel=\"external\">http://www.springframework.org/schema/beans/spring-beans-2.0.xsd</a> 进行确认。</p>\n<p>关于这个问题，网上有两种常见的解决方法，第一种简单有效，但是工作量大，即：把所有spring配置文件中url形式的xsd路径转换成指向本地xsd文件的classpath形式的路径，例如：classpath:org/springframework/beans/factory/xml/spring-beans-2.5.xsd ,再有一种方法就是在本机搭建web服务器，按URL创建相应文件夹，放入对应xsd文件，在本机hosts文件中加入”127.0.0.1 www.springframework.org”.实际上，这两种方法都属于“歪打正着”式的方法，直正弄明白这一问题还需要从spring的XSD文件加载机制谈起。</p>\n<p>首先：你必须知道一点：spring在加载xsd文件时总是先试图在本地查找xsd文件(spring的jar包中已经包含了所有版本的xsd文件)，如果没有找到，才会转向去URL指定的路径下载。这是非常合理的做法，并不像看上去的那样，每次都是从站点下载的。事实上，假如你的所有配置是正确定的，你的工程完全可以在断网的情况下启动而不会报上面的错误。Spring加载xsd文件的类是PluggableSchemaResolver，你可以查看一下它的源码来验证上述说法。另外，你可以在log4j.xml文件中加入：</p>\n<pre><code>&lt;logger name=&quot;org.springframework.beans.factory.xml&quot;&gt;  \n    &lt;level value=&quot;all&quot; /&gt;  \n&lt;/logger&gt;  \n</code></pre><p>通过日志了解spring是何加载xsd文件的。</p>\n<p>接下来，问题就是为什么spring在本地没有找到需要的文件，不得不转向网站下载。关于这个问题，其实也非常简单。在很多spring的jar包里，在META-INF目录下都有一个spring.schemas，这是一个property文件，其内容类似于下面：</p>\n<pre><code>http\\://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd  \nhttp\\://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd  \nhttp\\://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd  \n....  \n</code></pre><p>实际上，这个文件就是spring关于xsd文件在本地存放路径的映射，spring就是通过这个文件在本地（也就是spring的jar里）查找xsd文件的。那么，查找不到的原因排除URL输入有误之外，可能就是声明的xsd文件版本在本地不存在。一般来说，新版本的spring jar包会将过去所有版本(应该是自2.0以后)的xsd打包，并在spring.schemas文件中加入了对应项，出现问题的情况往往是声明使用了一个高版本的xsd文件，如3.0，但依赖的spring的jar包却是2.5之前的版本，由于2.5版本自然不可能包含3.0的xsd文件，此时就会导致spring去站点下载目标xsd文件，如遇断网或是目标站点不可用，上述问题就发生了。</p>\n<p>但是，在实现开发中，出现上述错误的几率并不高，最常见的导致这一问题的原因其实与使用了一个名为“assembly”的maven打包插件有关。很多项目需要将工程连同其所依赖的所有jar包打包成一个jar包，maven的assembly插件就是用来完成这个任务的。但是由于工程往往依赖很多的jar包，而被依赖的jar又会依赖其他的jar包，这样，当工程中依赖到不同的版本的spring时，在使用assembly进行打包时，只能将某一个版本jar包下的spring.schemas文件放入最终打出的jar包里，这就有可能遗漏了一些版本的xsd的本地映射，进而出现了文章开始提到的错误。如果你的项目是打成单一jar的，你可以通过检查最终生成的jar里的spring.schemas文件来确认是不是这种情况。而关于这种情况，解决的方法一般是推荐使用另外一种打包插件shade,它确实是一款比assembly更加优秀的工具，在对spring.schemas文件处理上，shade能够将所有jar里的spring.schemas文件进行合并，在最终生成的单一jar包里，spring.schemas包含了所有出现过的版本的集合！</p>\n<p>以上就是spring加载XSD文件的机制和出现问题的原因分析。实际上，我们应该让我们工程在启动时总是加载本地的xsd文件，而不是每次去站点下载，做到这一点就需要你结合上述提及的种种情况对你的工程进行一番检查。</p>\n","excerpt":"","more":"<p>本文原文连接: <a href=\"http://blog.csdn.net/bluishglc/article/details/7596118\">http://blog.csdn.net/bluishglc/article/details/7596118</a> ,转载请注明出处！</p>\n<p>有时候你会发现过去一直启动正常的系统，某天启动时会报出形如下面的错误：</p>\n<pre><code>org.xml.sax.SAXParseException: schema_reference.4: Failed to read schema document &apos;http://www.springframework.org/schema/beans/spring-beans-2.0.xsd&apos;, because 1) could not find the document; 2) the document could not be read; 3) the root element of the document is not &lt;xsd:schema&gt;.  \n</code></pre><p>很显然，spring xml配置文件中指定的xsd文件读取不到了，原因多是因为断网或spring的官网暂时无法连接导致的。 你可以通过在浏览器输入xsd文件的URL，如：<a href=\"http://www.springframework.org/schema/beans/spring-beans-2.0.xsd\">http://www.springframework.org/schema/beans/spring-beans-2.0.xsd</a> 进行确认。</p>\n<p>关于这个问题，网上有两种常见的解决方法，第一种简单有效，但是工作量大，即：把所有spring配置文件中url形式的xsd路径转换成指向本地xsd文件的classpath形式的路径，例如：classpath:org/springframework/beans/factory/xml/spring-beans-2.5.xsd ,再有一种方法就是在本机搭建web服务器，按URL创建相应文件夹，放入对应xsd文件，在本机hosts文件中加入”127.0.0.1 www.springframework.org”.实际上，这两种方法都属于“歪打正着”式的方法，直正弄明白这一问题还需要从spring的XSD文件加载机制谈起。</p>\n<p>首先：你必须知道一点：spring在加载xsd文件时总是先试图在本地查找xsd文件(spring的jar包中已经包含了所有版本的xsd文件)，如果没有找到，才会转向去URL指定的路径下载。这是非常合理的做法，并不像看上去的那样，每次都是从站点下载的。事实上，假如你的所有配置是正确定的，你的工程完全可以在断网的情况下启动而不会报上面的错误。Spring加载xsd文件的类是PluggableSchemaResolver，你可以查看一下它的源码来验证上述说法。另外，你可以在log4j.xml文件中加入：</p>\n<pre><code>&lt;logger name=&quot;org.springframework.beans.factory.xml&quot;&gt;  \n    &lt;level value=&quot;all&quot; /&gt;  \n&lt;/logger&gt;  \n</code></pre><p>通过日志了解spring是何加载xsd文件的。</p>\n<p>接下来，问题就是为什么spring在本地没有找到需要的文件，不得不转向网站下载。关于这个问题，其实也非常简单。在很多spring的jar包里，在META-INF目录下都有一个spring.schemas，这是一个property文件，其内容类似于下面：</p>\n<pre><code>http\\://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd  \nhttp\\://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd  \nhttp\\://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd  \n....  \n</code></pre><p>实际上，这个文件就是spring关于xsd文件在本地存放路径的映射，spring就是通过这个文件在本地（也就是spring的jar里）查找xsd文件的。那么，查找不到的原因排除URL输入有误之外，可能就是声明的xsd文件版本在本地不存在。一般来说，新版本的spring jar包会将过去所有版本(应该是自2.0以后)的xsd打包，并在spring.schemas文件中加入了对应项，出现问题的情况往往是声明使用了一个高版本的xsd文件，如3.0，但依赖的spring的jar包却是2.5之前的版本，由于2.5版本自然不可能包含3.0的xsd文件，此时就会导致spring去站点下载目标xsd文件，如遇断网或是目标站点不可用，上述问题就发生了。</p>\n<p>但是，在实现开发中，出现上述错误的几率并不高，最常见的导致这一问题的原因其实与使用了一个名为“assembly”的maven打包插件有关。很多项目需要将工程连同其所依赖的所有jar包打包成一个jar包，maven的assembly插件就是用来完成这个任务的。但是由于工程往往依赖很多的jar包，而被依赖的jar又会依赖其他的jar包，这样，当工程中依赖到不同的版本的spring时，在使用assembly进行打包时，只能将某一个版本jar包下的spring.schemas文件放入最终打出的jar包里，这就有可能遗漏了一些版本的xsd的本地映射，进而出现了文章开始提到的错误。如果你的项目是打成单一jar的，你可以通过检查最终生成的jar里的spring.schemas文件来确认是不是这种情况。而关于这种情况，解决的方法一般是推荐使用另外一种打包插件shade,它确实是一款比assembly更加优秀的工具，在对spring.schemas文件处理上，shade能够将所有jar里的spring.schemas文件进行合并，在最终生成的单一jar包里，spring.schemas包含了所有出现过的版本的集合！</p>\n<p>以上就是spring加载XSD文件的机制和出现问题的原因分析。实际上，我们应该让我们工程在启动时总是加载本地的xsd文件，而不是每次去站点下载，做到这一点就需要你结合上述提及的种种情况对你的工程进行一番检查。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cis9pixsk0002bxboc9ajhbhv","category_id":"cis9pixsy0005bxbo9waik6pl","_id":"cis9pixta000dbxbodxcxt96c"},{"post_id":"cis9pixt30009bxbogfvzg60e","category_id":"cis9pixsy0005bxbo9waik6pl","_id":"cis9pixtg000hbxbolf9ky4xl"},{"post_id":"cis9pixt6000cbxbo78di9i6u","category_id":"cis9pixsy0005bxbo9waik6pl","_id":"cis9pixti000kbxborrqffvi8"},{"post_id":"cis9pixsq0003bxboy71vdjtd","category_id":"cis9pixt4000abxbo2aihwnyo","_id":"cis9pixtl000obxboc76j1p11"},{"post_id":"cis9pixtb000ebxbookc1uxqp","category_id":"cis9pixsy0005bxbo9waik6pl","_id":"cis9pixto000rbxbouxcizz3l"},{"post_id":"cis9pixth000jbxbobex7tvw5","category_id":"cis9pixsy0005bxbo9waik6pl","_id":"cis9pixtq000vbxboykn2fhdl"},{"post_id":"cis9pixsz0006bxbo1c6tc4gc","category_id":"cis9pixtf000gbxbobpwhjond","_id":"cis9pixts000ybxbohyhdvwe8"},{"post_id":"cis9pixtm000pbxbo3n1axj18","category_id":"cis9pixsy0005bxbo9waik6pl","_id":"cis9pixtu0010bxboufl3vy2u"},{"post_id":"cis9pixt00007bxboti86o6hy","category_id":"cis9pixtl000nbxbo12g6zjxh","_id":"cis9pixty0014bxbos3c3wm18"},{"post_id":"cis9pixto000sbxbokwzhl992","category_id":"cis9pixsy0005bxbo9waik6pl","_id":"cis9pixu10016bxbozfr7d3bp"},{"post_id":"cis9pixtr000wbxboeofhhpq1","category_id":"cis9pixsy0005bxbo9waik6pl","_id":"cis9pixu3001abxboqxd5whsv"},{"post_id":"cis9pixtt000zbxboe9x3okeq","category_id":"cis9pixsy0005bxbo9waik6pl","_id":"cis9pixu9001ebxbouwijb817"},{"post_id":"cis9pixtj000lbxbosdyrkb9r","category_id":"cis9pixtq000ubxboge1snqdg","_id":"cis9pixud001hbxbok1f2h55z"},{"post_id":"cis9pixtz0015bxboas0masaw","category_id":"cis9pixsy0005bxbo9waik6pl","_id":"cis9pixug001kbxboiqfhk5x4"},{"post_id":"cis9pixu4001bbxboeypgokda","category_id":"cis9pixsy0005bxbo9waik6pl","_id":"cis9pixuh001nbxborxendrqk"},{"post_id":"cis9pixua001fbxbo4p41lopn","category_id":"cis9pixsy0005bxbo9waik6pl","_id":"cis9pixuj001qbxbocjcf4dch"},{"post_id":"cis9pixud001jbxboqf9f0ogo","category_id":"cis9pixu8001dbxbofaa8ergu","_id":"cis9pixuj001sbxbo71iluy8c"},{"post_id":"cis9pixu20018bxbojeg9udj0","category_id":"cis9pixu8001dbxbofaa8ergu","_id":"cis9pixuk001ubxbovg9fahhn"},{"post_id":"cis9pixug001lbxbo3lp4d4jr","category_id":"cis9pixsy0005bxbo9waik6pl","_id":"cis9pixuk001wbxbomhuho81w"},{"post_id":"cis9pixuh001pbxboyfgwjl5h","category_id":"cis9pixsy0005bxbo9waik6pl","_id":"cis9pixuk001xbxboyl2ehicp"}],"PostTag":[{"post_id":"cis9pixsk0002bxboc9ajhbhv","tag_id":"cis9pixsu0004bxbojor39cpj","_id":"cis9pixt5000bbxbosdv4bet8"},{"post_id":"cis9pixsq0003bxboy71vdjtd","tag_id":"cis9pixt20008bxbojzkltuzo","_id":"cis9pixtg000ibxboyxlcpkva"},{"post_id":"cis9pixsz0006bxbo1c6tc4gc","tag_id":"cis9pixte000fbxbofz8ot5bv","_id":"cis9pixto000qbxboa49iw4gv"},{"post_id":"cis9pixt00007bxboti86o6hy","tag_id":"cis9pixtk000mbxbogdvxl7vq","_id":"cis9pixts000xbxbo1v8395ws"},{"post_id":"cis9pixt30009bxbogfvzg60e","tag_id":"cis9pixtq000tbxboblu435ob","_id":"cis9pixty0013bxbo34ecq7a2"},{"post_id":"cis9pixtz0015bxboas0masaw","tag_id":"cis9pixtq000tbxboblu435ob","_id":"cis9pixu30019bxbo8hp2z3a5"},{"post_id":"cis9pixt6000cbxbo78di9i6u","tag_id":"cis9pixtq000tbxboblu435ob","_id":"cis9pixu8001cbxboatbd4cdp"},{"post_id":"cis9pixtb000ebxbookc1uxqp","tag_id":"cis9pixu10017bxbo3y4f302x","_id":"cis9pixud001ibxboz00yf495"},{"post_id":"cis9pixth000jbxbobex7tvw5","tag_id":"cis9pixtq000tbxboblu435ob","_id":"cis9pixuh001obxbotjcfd66m"},{"post_id":"cis9pixtj000lbxbosdyrkb9r","tag_id":"cis9pixuh001mbxbox8xnrp18","_id":"cis9pixuj001tbxbo6rg8wwnj"},{"post_id":"cis9pixtm000pbxbo3n1axj18","tag_id":"cis9pixuj001rbxbox2b9jdyp","_id":"cis9pixul001zbxbo2cp9bomx"},{"post_id":"cis9pixtm000pbxbo3n1axj18","tag_id":"cis9pixuk001vbxbonjhyg77c","_id":"cis9pixul0020bxboqg1mpzxe"},{"post_id":"cis9pixto000sbxbokwzhl992","tag_id":"cis9pixtq000tbxboblu435ob","_id":"cis9pixul0022bxboacktdueu"},{"post_id":"cis9pixtr000wbxboeofhhpq1","tag_id":"cis9pixul0021bxbom5msq4zz","_id":"cis9pixum0024bxbo9fxl1hah"},{"post_id":"cis9pixtt000zbxboe9x3okeq","tag_id":"cis9pixul0021bxbom5msq4zz","_id":"cis9pixum0026bxboall0gpi1"},{"post_id":"cis9pixu20018bxbojeg9udj0","tag_id":"cis9pixum0025bxbo8g0hdabg","_id":"cis9pixum0028bxbo8y6mdnhx"},{"post_id":"cis9pixu4001bbxboeypgokda","tag_id":"cis9pixum0027bxbo0aokounc","_id":"cis9pixun002abxbo8d8qyn6h"},{"post_id":"cis9pixua001fbxbo4p41lopn","tag_id":"cis9pixum0029bxbostmtft37","_id":"cis9pixun002cbxbouaw0blt6"},{"post_id":"cis9pixud001jbxboqf9f0ogo","tag_id":"cis9pixun002bbxbosw70d4iw","_id":"cis9pixuo002ebxbojd8krz2z"},{"post_id":"cis9pixug001lbxbo3lp4d4jr","tag_id":"cis9pixun002dbxbolu5y1ram","_id":"cis9pixup002gbxboob10erpx"},{"post_id":"cis9pixuh001pbxboyfgwjl5h","tag_id":"cis9pixul0021bxbom5msq4zz","_id":"cis9pixup002ibxbo8xfvu6n7"},{"post_id":"cis9pixuh001pbxboyfgwjl5h","tag_id":"cis9pixup002hbxbo88gpdjqf","_id":"cis9pixup002jbxboeygwd2w1"}],"Tag":[{"name":"源码","_id":"cis9pixsu0004bxbojor39cpj"},{"name":"GitHub","_id":"cis9pixt20008bxbojzkltuzo"},{"name":"CAS","_id":"cis9pixte000fbxbofz8ot5bv"},{"name":"Hexo","_id":"cis9pixtk000mbxbogdvxl7vq"},{"name":"面试","_id":"cis9pixtq000tbxboblu435ob"},{"name":"JVM","_id":"cis9pixu10017bxbo3y4f302x"},{"name":"maven","_id":"cis9pixuh001mbxbox8xnrp18"},{"name":"Mybatis","_id":"cis9pixuj001rbxbox2b9jdyp"},{"name":"Java Web","_id":"cis9pixuk001vbxbonjhyg77c"},{"name":"Spring","_id":"cis9pixul0021bxbom5msq4zz"},{"name":"MongoDB","_id":"cis9pixum0025bxbo8g0hdabg"},{"name":"设计模式","_id":"cis9pixum0027bxbo0aokounc"},{"name":"SSH","_id":"cis9pixum0029bxbostmtft37"},{"name":"索引","_id":"cis9pixun002bbxbosw70d4iw"},{"name":"笔试","_id":"cis9pixun002dbxbolu5y1ram"},{"name":"转发","_id":"cis9pixup002hbxbo88gpdjqf"}]}}